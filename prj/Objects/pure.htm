<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\pure.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\pure.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Oct 20 18:56:13 2017
<BR><P>
<H3>Maximum Stack Usage =        120 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
GPTM1_IRQHandler &rArr; ir_rx_decode &rArr; Send_Packet &rArr; SPI_Write_Buf &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">CAN_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">CKRDY_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">COMP_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4]">DebugMon_Handler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">EVWUP_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">EXTI0_1_2_3_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">EXTI12_13_14_15_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">EXTI4_5_6_7_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">EXTI8_9_10_11_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">FLASH_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">GPTM0_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">GPTM1_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">GPTM2_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">GPTM3_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">LPWUP_POR_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">LVD_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1f]">PDMA_CH0_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">PDMA_CH1_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">PDMA_CH2_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[22]">PDMA_CH3_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">PDMA_CH4_CH5IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">PDMA_CH6_CH7_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">RTC_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[18]">SPI0_SPI1_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">UART0_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">UART1_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1b]">UART2_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1c]">UART3_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">UART4_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">UART5_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">WDT_IRQHandler</a> from exception.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(RESET)
 <LI><a href="#[2a]">fputc</a> from bsp_usart.o(.text) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[29]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bd]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[be]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[bf]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[c1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>Delay_us</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>Delay_ms</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[31]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetUSARTClockFreq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[66]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, am8813_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_NVIC_Configuration
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_NVIC_Configuration
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[c2]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, am8813_misc.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, am8813_misc.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>SysTick_CounterCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, am8813_misc.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>SysTick_IntConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, am8813_misc.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>SysTick_SetReloadValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am8813_misc.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>CKCU_APBPerip0ClockConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ckcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[53]"></a>CKCU_APBPerip1ClockConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ckcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[51]"></a>CKCU_AHBPeripClockConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ckcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[c7]"></a>CKCU_AdcClockDivConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckcu.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>CKCU_LcdClockDivConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ckcu.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>CKCU_LCDSrcSel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ckcu.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>CKCU_GetUSARTClockFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ckcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKCU_GetUSARTClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[4f]"></a>Set_sys_Frequency</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, ckcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[ca]"></a>Set_sys_Frequency_LSE</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, ckcu.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>Convert_HSI_to_HSE</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, ckcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[45]"></a>NMI_Handler_IRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ckcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[46]"></a>CKRDY_IRQHandler_IRQ</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, ckcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKRDY_IRQHandler
</UL>

<P><STRONG><a name="[35]"></a>RSTCU_APBPerip0Reset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rstcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_DeInit
</UL>

<P><STRONG><a name="[37]"></a>RSTCU_APBPerip1Reset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rstcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_DeInit
</UL>

<P><STRONG><a name="[33]"></a>RSTCU_AHBPeripReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rstcu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[32]"></a>GPIO_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_AHBPeripReset
</UL>

<P><STRONG><a name="[5c]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_GPIO_Config
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_GPIO_Config
</UL>

<P><STRONG><a name="[61]"></a>GPIO_InputConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_GPIO_Config
</UL>

<P><STRONG><a name="[5e]"></a>GPIO_DriveConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_OpenDrainConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[75]"></a>GPIO_ReadInBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rec
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_ReadInData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>GPIO_ReadOutBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
</UL>

<P><STRONG><a name="[cc]"></a>GPIO_ReadOutData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>GPIO_SetOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[64]"></a>GPIO_ClearOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
</UL>

<P><STRONG><a name="[cd]"></a>GPIO_WriteOutBits</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>GPIO_WriteOutData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>AFIO_EXTISourceConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>GPIO_PinLock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>GPIO_IsPortLocked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>GPIO_IsPinLocked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>AFIO_DeInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_APBPerip0Reset
</UL>

<P><STRONG><a name="[d3]"></a>AFIO_GPAConfig</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>AFIO_GPBConfig</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>AFIO_GPCConfig</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AFIO_GPCConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Config
</UL>

<P><STRONG><a name="[89]"></a>AFIO_GPDConfig</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AFIO_GPDConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
</UL>

<P><STRONG><a name="[d5]"></a>AFIO_GPEConfig</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>exti_clear_edge_flag</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>GPTM_DeInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gptm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPTM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_APBPerip1Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
</UL>

<P><STRONG><a name="[71]"></a>GPTM_TimeBaseInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gptm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
</UL>

<P><STRONG><a name="[d7]"></a>GPTM_OutputInit</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>GPTM_CHPSCConfig</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gptm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_PwmInputInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_CaptureInit
</UL>

<P><STRONG><a name="[38]"></a>GPTM_CaptureInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_CHPSCConfig
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptm_CHx_Config
</UL>

<P><STRONG><a name="[3b]"></a>GPTM_PwmInputInit</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, gptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_CHPSCConfig
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptm_CHx_Config
</UL>

<P><STRONG><a name="[d8]"></a>GPTM_TimeBaseStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>GPTM_OutputStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>GPTM_CaptureStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>GPTM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gptm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
</UL>

<P><STRONG><a name="[3d]"></a>GPTM_StiConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gptm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_ChExternalClockConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_ItiExternalClockConfig
</UL>

<P><STRONG><a name="[3c]"></a>GPTM_ItiExternalClockConfig</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, gptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_StiConfig
</UL>

<P><STRONG><a name="[3e]"></a>GPTM_ChExternalClockConfig</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_StiConfig
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptm_CHx_Config
</UL>

<P><STRONG><a name="[40]"></a>GPTM_EtiConfig</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gptm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_EtiExternalClockConfig
</UL>

<P><STRONG><a name="[3f]"></a>GPTM_EtiExternalClockConfig</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, gptm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_EtiConfig
</UL>

<P><STRONG><a name="[db]"></a>GPTM_PrescalerConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>GPTM_CounterModeConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>GPTM_DecoderConfig</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>GPTM_ForcedOREF0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>GPTM_ForcedOREF1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>GPTM_ForcedOREF2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>GPTM_ForcedOREF3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>GPTM_CRRPreloadCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>GPTM_CHCCRPreloadConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>GPTM_ClearOREFConfig</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>GPTM_ChPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>GPTM_ImmActiveConfig</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>GPTM_ChannelConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>GPTM_OutputModeConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>GPTM_UpdateCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>GPTM_UEVG_IntConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>GPTM_HallInterfaceCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>GPTM_SinglePulseModeCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>GPTM_MMSELConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>GPTM_SlaveModeConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>GPTM_TimSyncCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>GPTM_SetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>GPTM_SetCounterReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>GPTM_SetCaptureCompare0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>GPTM_SetCaptureCompare1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>GPTM_SetCaptureCompare2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>GPTM_SetCaptureCompare3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>GPTM_SetAsymmetricCompare0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>GPTM_SetAsymmetricCompare1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>GPTM_SetAsymmetricCompare2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>GPTM_SetAsymmetricCompare3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>GPTM_CKDIVConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>GPTM_GetCaptureCompare0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>GPTM_GetCaptureCompare1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>GPTM_GetCaptureCompare2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>GPTM_GetCaptureCompare3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>GPTM_GetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>GPTM_GetPrescaler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>GPTM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>GPTM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gptm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>GPTM_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gptm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>GPTM_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gptm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
</UL>

<P><STRONG><a name="[102]"></a>GPTM_GetIntStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>GPTM_ClearIntPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>GPTM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>GPTM_CHCCDSConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>GPTM_PDMAConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gptm.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>SPI_DeInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_APBPerip0Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
</UL>

<P><STRONG><a name="[8b]"></a>SPI_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
</UL>

<P><STRONG><a name="[8a]"></a>SPI_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
</UL>

<P><STRONG><a name="[8e]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
</UL>

<P><STRONG><a name="[8c]"></a>SPI_SELOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
</UL>

<P><STRONG><a name="[107]"></a>SPI_FIFOCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>SPI_SetDataLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>SPI_SELModeConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>SPI_SoftwareSELCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
</UL>

<P><STRONG><a name="[92]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[93]"></a>SPI_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[10a]"></a>SPI_SetTimeOutValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>SPI_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
</UL>

<P><STRONG><a name="[91]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[10b]"></a>SPI_GetFIFOStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>SPI_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>SPI_FIFOTriggerLevelConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>SPI_PDMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>SPI_DUALCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>SPI_GUADTCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>SPI_GUADTSPI_GUADTConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>SPI_SELHTConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>USART_DeInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_APBPerip1Reset
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_APBPerip0Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Config
</UL>

<P><STRONG><a name="[43]"></a>USART_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetUSARTClockFreq
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Config
</UL>

<P><STRONG><a name="[113]"></a>USART_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>USART_SynClockInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>USART_SynClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendHalfWord
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>USART_GetLineStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendHalfWord
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>USART_GetFIFOStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>USART_GetModemStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>USART_ForceModemPinState</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>USART_IrDAConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>USART_SetIrDAPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>USART_IrDADirectionConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>USART_RS485TxEnablePolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>USART_ForceBreakCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>USART_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Config
</UL>

<P><STRONG><a name="[120]"></a>USART_GetIntID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>USART_RFITLConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>USART_TFITLConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>USART_TimeOutIntConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>USART_SetTimeOutValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>USART_FIFOReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>USART_StickParityCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>USART_StickParityConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>USART_TxCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Config
</UL>

<P><STRONG><a name="[6a]"></a>USART_RxCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Config
</UL>

<P><STRONG><a name="[128]"></a>USART_IrDAInvtOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>USART_IrDAInvtInputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>USART_HardwareFlowControlCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>USART_TxPDMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>USART_RxPDMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>USART_RS485NMMCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>USART_RS485AADCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>USART_SetAddressMatchValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>USART_LINModeSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>USART_LINBreakDetectLenSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>USART_LINSendBreak</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>USART_LINIntConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>USART_LINIntStatusClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>USART_LINIntStatusGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>CKRDY_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKRDY_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKRDY_IRQHandler_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>LVD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>WDT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>LPWUP_POR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI0_1_2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI4_5_6_7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI8_9_10_11_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI12_13_14_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPTM0_IRQHandler &rArr; ir_rx_capture_4khz &rArr; ir_rec
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_ClearFlag
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_GetFlagStatus
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_capture_4khz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GPTM1_IRQHandler &rArr; ir_rx_decode &rArr; Send_Packet &rArr; SPI_Write_Buf &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_ClearFlag
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_GetFlagStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>GPTM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPTM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI0_SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART4_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exception.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetLineStatus
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PDMA_CH0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PDMA_CH1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PDMA_CH2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PDMA_CH3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PDMA_CH4_CH5IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PDMA_CH6_CH7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>COMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>init_sys</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_sys &rArr; SystemInit &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_HSI_to_HSE
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_sys_Frequency
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_AHBPeripClockConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip1ClockConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_APBPerip0ClockConfig
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>main</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = main &rArr; Get_Chip_ID &rArr; SPI_Bank1_Read_Reg &rArr; SwitchCFG &rArr; SPI_Read_Reg &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Config
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_GPIO_Config
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Chip_ID
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2425_Initialize
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[54]"></a>LED_GPIO_Config</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, bsp_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>IR_GPIO_Config</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, bsp_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>LED_Toggle</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, bsp_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutBit
</UL>

<P><STRONG><a name="[56]"></a>USARTx_Config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USARTx_Config &rArr; USART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxCmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPCConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>Usart_SendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetLineStatus
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
</UL>

<P><STRONG><a name="[6c]"></a>Usart_SendHalfWord</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetLineStatus
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[6d]"></a>Usart_SendString</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetLineStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[2a]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetLineStatus
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[6e]"></a>fgetc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetLineStatus
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>

<P><STRONG><a name="[58]"></a>TIM_Mode_Config</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_Mode_Config &rArr; GPTM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_IntConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_ClearFlag
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_TimeBaseInit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_DeInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_NVIC_Configuration
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>ir_rec</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, remote_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ir_rec
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_capture_4khz
</UL>

<P><STRONG><a name="[76]"></a>ir_gpio_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, remote_handle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_init
</UL>

<P><STRONG><a name="[77]"></a>ir_rx_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, remote_handle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_gpio_init
</UL>

<P><STRONG><a name="[7a]"></a>ir_rx_q_put</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, remote_handle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_capture_4khz
</UL>

<P><STRONG><a name="[7b]"></a>ir_rx_q_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, remote_handle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_decode
</UL>

<P><STRONG><a name="[7d]"></a>ir_rx_q_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, remote_handle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_decode
</UL>

<P><STRONG><a name="[79]"></a>ir_rx_q_full</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, remote_handle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_capture_4khz
</UL>

<P><STRONG><a name="[48]"></a>ir_rx_capture_4khz</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, remote_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ir_rx_capture_4khz &rArr; ir_rec
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_q_full
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_q_put
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rec
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM0_IRQHandler
</UL>

<P><STRONG><a name="[4a]"></a>ir_rx_decode</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, remote_handle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ir_rx_decode &rArr; Send_Packet &rArr; SPI_Write_Buf &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_decode_ir
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Packet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_q_empty
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_q_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM1_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>IR_signal_tans_code</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, remote_handle.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>remote_ir_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, remote_handle.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>get_ir_local</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, remote_handle.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>get_ir_test</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, remote_handle.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>ir_rx_code_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, remote_handle.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>remote_resync_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_decode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_decode_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_decode_ir
</UL>

<P><STRONG><a name="[82]"></a>remote_byte_start_wait_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_decode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_decode_ir
</UL>

<P><STRONG><a name="[83]"></a>remote_start_bit_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_decode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_decode_ir
</UL>

<P><STRONG><a name="[84]"></a>remote_data_bit_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_decode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_decode_ir
</UL>

<P><STRONG><a name="[85]"></a>remote_stop_bit_wait_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_decode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_decode_ir
</UL>

<P><STRONG><a name="[86]"></a>remote_stop_bit_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_decode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_decode_ir
</UL>

<P><STRONG><a name="[88]"></a>remote_start_bit_wait_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_decode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_decode_ir
</UL>

<P><STRONG><a name="[87]"></a>remote_byte_stop_wait_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_decode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_decode_ir
</UL>

<P><STRONG><a name="[7f]"></a>remote_decode_init</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, ir_decode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_resync_init
</UL>

<P><STRONG><a name="[7c]"></a>remote_decode_ir</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, ir_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = remote_decode_ir &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_byte_stop_wait_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_start_bit_wait_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_stop_bit_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_stop_bit_wait_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_data_bit_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_start_bit_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_byte_start_wait_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_resync_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_decode
</UL>

<P><STRONG><a name="[57]"></a>SPI0_Init</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, bsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI0_Init &rArr; AFIO_GPDConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IntConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SoftwareSELCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SELOutputCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPDConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>SPI_RW_Byte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_StartReadSequence
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadDeviceID
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
</UL>

<P><STRONG><a name="[94]"></a>SPI_FLASH_ReadByte</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[95]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
</UL>

<P><STRONG><a name="[96]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
</UL>

<P><STRONG><a name="[97]"></a>SPI_Flash_PowerDown</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[98]"></a>SPI_Flash_WAKEUP</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[99]"></a>SPI_FLASH_SectorErase</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[9a]"></a>SPI_FLASH_BulkErase</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[9b]"></a>SPI_FLASH_PageWrite</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[9c]"></a>SPI_FLASH_BufferWrite</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[9d]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[9e]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[9f]"></a>SPI_FLASH_ReadDeviceID</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[a0]"></a>SPI_FLASH_StartReadSequence</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>

<P><STRONG><a name="[a1]"></a>SPI_RW</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bk2425_initialization_141015.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Buf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Buf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Reg
</UL>

<P><STRONG><a name="[a2]"></a>SPI_Write_Reg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bk2425_initialization_141015.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_Write_Reg &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Packet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChannelNum
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCFG
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToTxMode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToRxMode
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2425_Initialize
</UL>

<P><STRONG><a name="[a3]"></a>SPI_Read_Reg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bk2425_initialization_141015.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_Read_Reg &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Packet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCFG
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToTxMode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToRxMode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Packet
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2425_Initialize
</UL>

<P><STRONG><a name="[a4]"></a>SPI_Read_Buf</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bk2425_initialization_141015.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Read_Buf &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Read_Reg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Packet
</UL>

<P><STRONG><a name="[a5]"></a>SPI_Write_Buf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bk2425_initialization_141015.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Write_Buf &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BER_Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Write_Reg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Packet
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2425_Initialize
</UL>

<P><STRONG><a name="[a6]"></a>SwitchToRxMode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bk2425_initialization_141015.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BER_Test
</UL>

<P><STRONG><a name="[a7]"></a>SwitchToTxMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bk2425_initialization_141015.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SwitchToTxMode &rArr; SPI_Read_Reg &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carrier_Test
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2425_Initialize
</UL>

<P><STRONG><a name="[a8]"></a>SwitchCFG</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bk2425_initialization_141015.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SwitchCFG &rArr; SPI_Read_Reg &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Read_Reg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Write_Reg
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2425_Initialize
</UL>

<P><STRONG><a name="[a9]"></a>SetChannelNum</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bk2425_initialization_141015.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Reg
</UL>

<P><STRONG><a name="[aa]"></a>DelayMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bk2425_initialization_141015.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DelayMs &rArr; Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BER_Test
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2425_Initialize
</UL>

<P><STRONG><a name="[59]"></a>BK2425_Initialize</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, bk2425_initialization_141015.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BK2425_Initialize &rArr; SwitchCFG &rArr; SPI_Read_Reg &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCFG
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToTxMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Buf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>Send_Packet</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bk2425_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Send_Packet &rArr; SPI_Write_Buf &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Buf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_decode
</UL>

<P><STRONG><a name="[ab]"></a>Receive_Packet</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, bk2425_txrx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Buf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Reg
</UL>

<P><STRONG><a name="[ac]"></a>SPI_Bank1_Write_Reg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, test_func.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCFG
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PN9_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_CD_Detect
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sen_Mode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LowPower_Mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BER_Test
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carrier_Test
</UL>

<P><STRONG><a name="[ad]"></a>SPI_Bank1_Read_Reg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, test_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_Bank1_Read_Reg &rArr; SwitchCFG &rArr; SPI_Read_Reg &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCFG
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BER_Test
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Chip_ID
</UL>

<P><STRONG><a name="[ae]"></a>Carrier_Test</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, test_func.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Write_Reg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToTxMode
</UL>

<P><STRONG><a name="[af]"></a>BER_Test</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, test_func.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Read_Reg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Write_Reg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToRxMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write_Buf
</UL>

<P><STRONG><a name="[b0]"></a>Set_LowPower_Mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, test_func.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Write_Reg
</UL>

<P><STRONG><a name="[b1]"></a>Set_Sen_Mode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, test_func.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Write_Reg
</UL>

<P><STRONG><a name="[b2]"></a>Close_CD_Detect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, test_func.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Write_Reg
</UL>

<P><STRONG><a name="[b3]"></a>PN9_TX</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, test_func.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Write_Reg
</UL>

<P><STRONG><a name="[5a]"></a>Get_Chip_ID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Get_Chip_ID &rArr; SPI_Bank1_Read_Reg &rArr; SwitchCFG &rArr; SPI_Read_Reg &rArr; SPI_RW &rArr; SPI_RW_Byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Bank1_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_decode
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[141]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[142]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[143]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[144]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[5b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Packet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_rx_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_gpio_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ir_decode.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_decode_ir
</UL>

<P><STRONG><a name="[145]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[146]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[147]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2d]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[39]"></a>gptm_CHx_Config</STRONG> (Thumb, 76 bytes, Stack size 36 bytes, gptm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_ChExternalClockConfig
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_PwmInputInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTM_CaptureInit
</UL>

<P><STRONG><a name="[65]"></a>NVIC_Configuration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Config
</UL>

<P><STRONG><a name="[6f]"></a>TIMx_NVIC_Configuration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMx_NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
</UL>

<P><STRONG><a name="[70]"></a>TIM1_NVIC_Configuration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
</UL>

<P><STRONG><a name="[bb]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
