; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\comp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\comp.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\comp.crf ..\driver\src\comp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  COMP_DeInit PROC
;;;22      ************************************************************************************************************/
;;;23     void COMP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;24     {
;;;25       RSTCU_APBPerip1Reset(RSTCU_APBRST1_COMP, ENABLE);
000002  2101              MOVS     r1,#1
000004  0308              LSLS     r0,r1,#12
000006  f7fffffe          BL       RSTCU_APBPerip1Reset
;;;26     }
00000a  bd10              POP      {r4,pc}
;;;27     
                          ENDP

                  COMP_Config PROC
;;;54     ************************************************************************************************************/
;;;55     void COMP_Config(COMPx Comp_x, COMP_SPEED CompSpeed, COMP_INV_INPUT CompInvInput, COMP_OUT_POL CompOutPol, COMP_OUT_HYST CompOutHyst)
00000c  b5f0              PUSH     {r4-r7,lr}
;;;56     {
00000e  9c05              LDR      r4,[sp,#0x14]
;;;57     	AM_COMP->CCSR = (AM_COMP->CCSR & (~( (1<<(3+Comp_x*16))|(7<<(4+Comp_x*16))|(1<<(11+Comp_x*16))|(3<<(12+Comp_x*16)) ))) \
000010  0106              LSLS     r6,r0,#4
000012  1cf6              ADDS     r6,r6,#3
000014  2501              MOVS     r5,#1
000016  40b5              LSLS     r5,r5,r6
000018  0106              LSLS     r6,r0,#4
00001a  1d36              ADDS     r6,r6,#4
00001c  2707              MOVS     r7,#7
00001e  40b7              LSLS     r7,r7,r6
000020  433d              ORRS     r5,r5,r7
000022  0106              LSLS     r6,r0,#4
000024  360b              ADDS     r6,r6,#0xb
000026  2701              MOVS     r7,#1
000028  40b7              LSLS     r7,r7,r6
00002a  433d              ORRS     r5,r5,r7
00002c  0106              LSLS     r6,r0,#4
00002e  360c              ADDS     r6,r6,#0xc
000030  2703              MOVS     r7,#3
000032  40b7              LSLS     r7,r7,r6
000034  462e              MOV      r6,r5
000036  433e              ORRS     r6,r6,r7
000038  4d44              LDR      r5,|L1.332|
00003a  682d              LDR      r5,[r5,#0]
00003c  43b5              BICS     r5,r5,r6
00003e  0106              LSLS     r6,r0,#4
000040  1cf6              ADDS     r6,r6,#3
000042  460f              MOV      r7,r1
000044  40b7              LSLS     r7,r7,r6
000046  433d              ORRS     r5,r5,r7
000048  0106              LSLS     r6,r0,#4
00004a  1d36              ADDS     r6,r6,#4
00004c  4617              MOV      r7,r2
00004e  40b7              LSLS     r7,r7,r6
000050  433d              ORRS     r5,r5,r7
000052  0106              LSLS     r6,r0,#4
000054  360b              ADDS     r6,r6,#0xb
000056  461f              MOV      r7,r3
000058  40b7              LSLS     r7,r7,r6
00005a  433d              ORRS     r5,r5,r7
00005c  0106              LSLS     r6,r0,#4
00005e  360c              ADDS     r6,r6,#0xc
000060  4627              MOV      r7,r4
000062  40b7              LSLS     r7,r7,r6
000064  433d              ORRS     r5,r5,r7
000066  4e39              LDR      r6,|L1.332|
000068  6035              STR      r5,[r6,#0]
;;;58     	  | (CompSpeed<<(3+Comp_x*16)) | (CompInvInput<<(4+Comp_x*16)) | (CompOutPol<<(11+Comp_x*16)) | (CompOutHyst<<(12+Comp_x*16));
;;;59     }
00006a  bdf0              POP      {r4-r7,pc}
;;;60     
                          ENDP

                  COMP_Cmd PROC
;;;67     ************************************************************************************************************/
;;;68     void COMP_Cmd(COMPx Comp_x, ControlStatus NewState)
00006c  b510              PUSH     {r4,lr}
;;;69     {
;;;70       if (NewState != DISABLE)
00006e  2900              CMP      r1,#0
000070  d008              BEQ      |L1.132|
;;;71       {
;;;72     		AM_COMP->CCSR |= (1<<(Comp_x*16));    
000072  4a36              LDR      r2,|L1.332|
000074  6812              LDR      r2,[r2,#0]
000076  0104              LSLS     r4,r0,#4
000078  2301              MOVS     r3,#1
00007a  40a3              LSLS     r3,r3,r4
00007c  431a              ORRS     r2,r2,r3
00007e  4b33              LDR      r3,|L1.332|
000080  601a              STR      r2,[r3,#0]
000082  e007              B        |L1.148|
                  |L1.132|
;;;73       }
;;;74       else
;;;75       {
;;;76         AM_COMP->CCSR &= (~(1<<(Comp_x*16)));
000084  4a31              LDR      r2,|L1.332|
000086  6813              LDR      r3,[r2,#0]
000088  0104              LSLS     r4,r0,#4
00008a  2201              MOVS     r2,#1
00008c  40a2              LSLS     r2,r2,r4
00008e  4393              BICS     r3,r3,r2
000090  4a2e              LDR      r2,|L1.332|
000092  6013              STR      r3,[r2,#0]
                  |L1.148|
;;;77       }
;;;78     }
000094  bd10              POP      {r4,pc}
;;;79     
                          ENDP

                  COMP_GetOutput PROC
;;;87     ************************************************************************************************************/
;;;88     COMP_OUT COMP_GetOutput(COMPx Comp_x)
000096  4601              MOV      r1,r0
;;;89     {
;;;90     	if( AM_COMP->CCSR & (1<<(14+Comp_x*16)) )
000098  482c              LDR      r0,|L1.332|
00009a  6800              LDR      r0,[r0,#0]
00009c  010a              LSLS     r2,r1,#4
00009e  320e              ADDS     r2,r2,#0xe
0000a0  2301              MOVS     r3,#1
0000a2  4093              LSLS     r3,r3,r2
0000a4  4018              ANDS     r0,r0,r3
0000a6  2800              CMP      r0,#0
0000a8  d001              BEQ      |L1.174|
;;;91     		return COMP_OUT_HIGH;
0000aa  2001              MOVS     r0,#1
                  |L1.172|
;;;92     	else
;;;93     		return COMP_OUT_LOW;
;;;94     }
0000ac  4770              BX       lr
                  |L1.174|
0000ae  2000              MOVS     r0,#0                 ;93
0000b0  e7fc              B        |L1.172|
;;;95     
                          ENDP

                  COMP_WinModeCmd PROC
;;;100    ************************************************************************************************************/
;;;101    void COMP_WinModeCmd(ControlStatus NewState)
0000b2  2800              CMP      r0,#0
;;;102    {
;;;103      if (NewState != DISABLE)
0000b4  d007              BEQ      |L1.198|
;;;104      {
;;;105        AM_COMP->CCSR |= (1<<23);
0000b6  4925              LDR      r1,|L1.332|
0000b8  6809              LDR      r1,[r1,#0]
0000ba  2201              MOVS     r2,#1
0000bc  05d2              LSLS     r2,r2,#23
0000be  4311              ORRS     r1,r1,r2
0000c0  4a22              LDR      r2,|L1.332|
0000c2  6011              STR      r1,[r2,#0]
0000c4  e006              B        |L1.212|
                  |L1.198|
;;;106      }
;;;107      else
;;;108      {   
;;;109    		AM_COMP->CCSR &= (~(1<<23));
0000c6  4921              LDR      r1,|L1.332|
0000c8  6809              LDR      r1,[r1,#0]
0000ca  2201              MOVS     r2,#1
0000cc  05d2              LSLS     r2,r2,#23
0000ce  4391              BICS     r1,r1,r2
0000d0  4a1e              LDR      r2,|L1.332|
0000d2  6011              STR      r1,[r2,#0]
                  |L1.212|
;;;110      }
;;;111    }
0000d4  4770              BX       lr
;;;112    
                          ENDP

                  COMP_IntCmd PROC
;;;119    ************************************************************************************************************/
;;;120    void COMP_IntCmd(COMPx Comp_x, ControlStatus NewState)
0000d6  b510              PUSH     {r4,lr}
;;;121    {
;;;122      if (NewState != DISABLE)
0000d8  2900              CMP      r1,#0
0000da  d009              BEQ      |L1.240|
;;;123      {
;;;124    		AM_COMP->WICR |= (1<<(1+Comp_x*8));   
0000dc  4a1b              LDR      r2,|L1.332|
0000de  6852              LDR      r2,[r2,#4]
0000e0  00c3              LSLS     r3,r0,#3
0000e2  1c5b              ADDS     r3,r3,#1
0000e4  2401              MOVS     r4,#1
0000e6  409c              LSLS     r4,r4,r3
0000e8  4322              ORRS     r2,r2,r4
0000ea  4b18              LDR      r3,|L1.332|
0000ec  605a              STR      r2,[r3,#4]
0000ee  e008              B        |L1.258|
                  |L1.240|
;;;125      }
;;;126      else
;;;127      {
;;;128        AM_COMP->WICR &= (~(1<<(1+Comp_x*8)));
0000f0  4a16              LDR      r2,|L1.332|
0000f2  6852              LDR      r2,[r2,#4]
0000f4  00c3              LSLS     r3,r0,#3
0000f6  1c5b              ADDS     r3,r3,#1
0000f8  2401              MOVS     r4,#1
0000fa  409c              LSLS     r4,r4,r3
0000fc  43a2              BICS     r2,r2,r4
0000fe  4b13              LDR      r3,|L1.332|
000100  605a              STR      r2,[r3,#4]
                  |L1.258|
;;;129      }
;;;130    }
000102  bd10              POP      {r4,pc}
;;;131    
                          ENDP

                  COMP_WakeUpCmd PROC
;;;138    ************************************************************************************************************/
;;;139    void COMP_WakeUpCmd(COMPx Comp_x, ControlStatus NewState)
000104  b510              PUSH     {r4,lr}
;;;140    {
;;;141      if (NewState != DISABLE)
000106  2900              CMP      r1,#0
000108  d008              BEQ      |L1.284|
;;;142      {
;;;143        AM_COMP->WICR |= (1<<(0+Comp_x*8));
00010a  4a10              LDR      r2,|L1.332|
00010c  6852              LDR      r2,[r2,#4]
00010e  00c3              LSLS     r3,r0,#3
000110  2401              MOVS     r4,#1
000112  409c              LSLS     r4,r4,r3
000114  4322              ORRS     r2,r2,r4
000116  4b0d              LDR      r3,|L1.332|
000118  605a              STR      r2,[r3,#4]
00011a  e007              B        |L1.300|
                  |L1.284|
;;;144      }
;;;145      else
;;;146      {
;;;147    		AM_COMP->WICR &= (~(1<<(0+Comp_x*8)));   
00011c  4a0b              LDR      r2,|L1.332|
00011e  6852              LDR      r2,[r2,#4]
000120  00c3              LSLS     r3,r0,#3
000122  2401              MOVS     r4,#1
000124  409c              LSLS     r4,r4,r3
000126  43a2              BICS     r2,r2,r4
000128  4b08              LDR      r3,|L1.332|
00012a  605a              STR      r2,[r3,#4]
                  |L1.300|
;;;148      }
;;;149    }
00012c  bd10              POP      {r4,pc}
;;;150    
                          ENDP

                  COMP_GetITStatus PROC
;;;158    ************************************************************************************************************/
;;;159    ITStatus COMP_GetITStatus(COMPx Comp_x)
00012e  4601              MOV      r1,r0
;;;160    {
;;;161    	if( AM_COMP->CCSR & (1<<(4+Comp_x*8)) )
000130  4806              LDR      r0,|L1.332|
000132  6800              LDR      r0,[r0,#0]
000134  00ca              LSLS     r2,r1,#3
000136  1d12              ADDS     r2,r2,#4
000138  2301              MOVS     r3,#1
00013a  4093              LSLS     r3,r3,r2
00013c  4018              ANDS     r0,r0,r3
00013e  2800              CMP      r0,#0
000140  d001              BEQ      |L1.326|
;;;162    		return SET;
000142  2001              MOVS     r0,#1
                  |L1.324|
;;;163    	else
;;;164    		return RESET;
;;;165    }
000144  4770              BX       lr
                  |L1.326|
000146  2000              MOVS     r0,#0                 ;164
000148  e7fc              B        |L1.324|
;;;166    
                          ENDP

00014a  0000              DCW      0x0000
                  |L1.332|
                          DCD      0x40043000

;*** Start embedded assembler ***

#line 1 "..\\driver\\src\\comp.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_comp_c_66e338f6____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___6_comp_c_66e338f6____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_comp_c_66e338f6____REVSH|
#line 128
|__asm___6_comp_c_66e338f6____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
