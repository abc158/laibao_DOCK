; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\main.crf src\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  init_sys PROC
;;;23     #define W_TX_PAYLOAD_NOACK_CMD	0xb0
;;;24     void init_sys(void)
000000  b510              PUSH     {r4,lr}
;;;25     {
;;;26     	Set_sys_Frequency(24);//system_clk:
000002  2018              MOVS     r0,#0x18
000004  f7fffffe          BL       Set_sys_Frequency
;;;27     	Convert_HSI_to_HSE();
000008  f7fffffe          BL       Convert_HSI_to_HSE
;;;28     	SystemInit();
00000c  f7fffffe          BL       SystemInit
;;;29     //CKCU_AHBPeripClockConfig(CKCU_AHBEN_PA,ENABLE);  		//Clock for UART0/UART2
;;;30       CKCU_AHBPeripClockConfig(CKCU_AHBEN_PB,ENABLE);  		//Clock for UART3
000010  2101              MOVS     r1,#1
000012  0448              LSLS     r0,r1,#17
000014  f7fffffe          BL       CKCU_AHBPeripClockConfig
;;;31     	CKCU_AHBPeripClockConfig(CKCU_AHBEN_PC,ENABLE);  		//Clock for LEDx/UART0/UART4
000018  2101              MOVS     r1,#1
00001a  0488              LSLS     r0,r1,#18
00001c  f7fffffe          BL       CKCU_AHBPeripClockConfig
;;;32     	CKCU_AHBPeripClockConfig(CKCU_AHBEN_PD,ENABLE);  		//Clock for UART1/UART5
000020  2101              MOVS     r1,#1
000022  04c8              LSLS     r0,r1,#19
000024  f7fffffe          BL       CKCU_AHBPeripClockConfig
;;;33     //CKCU_AHBPeripClockConfig(CKCU_AHBEN_PE,ENABLE);  		//Clock for ...
;;;34     	
;;;35     	CKCU_APBPerip0ClockConfig(CKCU_APBEN0_AFIO,ENABLE); 	//Clock for GPIO Others Function	
000028  2101              MOVS     r1,#1
00002a  0388              LSLS     r0,r1,#14
00002c  f7fffffe          BL       CKCU_APBPerip0ClockConfig
;;;36     //CKCU_AHBPeripClockConfig(CKCU_AHBEN_PDMA,ENABLE);			//DMA Clock
;;;37     	CKCU_APBPerip1ClockConfig(CKCU_APBEN1_GPTM0, ENABLE);	//Clock for TIM0
000030  2101              MOVS     r1,#1
000032  0208              LSLS     r0,r1,#8
000034  f7fffffe          BL       CKCU_APBPerip1ClockConfig
;;;38     	CKCU_APBPerip1ClockConfig(CKCU_APBEN1_GPTM1, ENABLE);	//Clock for TIM1
000038  2101              MOVS     r1,#1
00003a  0248              LSLS     r0,r1,#9
00003c  f7fffffe          BL       CKCU_APBPerip1ClockConfig
;;;39     	CKCU_APBPerip1ClockConfig(CKCU_APBEN1_GPTM2, ENABLE);	//Clock for TIM2
000040  2101              MOVS     r1,#1
000042  0288              LSLS     r0,r1,#10
000044  f7fffffe          BL       CKCU_APBPerip1ClockConfig
;;;40     	CKCU_APBPerip1ClockConfig(CKCU_APBEN1_GPTM3, ENABLE);	//Clock for TIM3
000048  2101              MOVS     r1,#1
00004a  02c8              LSLS     r0,r1,#11
00004c  f7fffffe          BL       CKCU_APBPerip1ClockConfig
;;;41     	CKCU_APBPerip0ClockConfig(CKCU_APBEN0_SPI0,ENABLE);    //Clock for SPI0
000050  2101              MOVS     r1,#1
000052  2010              MOVS     r0,#0x10
000054  f7fffffe          BL       CKCU_APBPerip0ClockConfig
;;;42     	CKCU_APBPerip0ClockConfig(CKCU_APBEN0_SPI1,ENABLE);    //Clock for SPI1
000058  2101              MOVS     r1,#1
00005a  2040              MOVS     r0,#0x40
00005c  f7fffffe          BL       CKCU_APBPerip0ClockConfig
;;;43     	CKCU_APBPerip0ClockConfig(CKCU_APBEN0_EXTI,ENABLE);		//Clock for Interrupt
000060  2101              MOVS     r1,#1
000062  03c8              LSLS     r0,r1,#15
000064  f7fffffe          BL       CKCU_APBPerip0ClockConfig
;;;44     	
;;;45     	#if defined (BSP_USART0_BAUDRATE) 
;;;46     		CKCU_APBPerip0ClockConfig(CKCU_APBEN0_USART0,ENABLE);		//Clock for USART0
;;;47     	#endif
;;;48     	#if defined (BSP_USART2_BAUDRATE) 
;;;49     		CKCU_APBPerip0ClockConfig(CKCU_APBEN0_USART2,ENABLE);		//Clock for USART2
;;;50     	#endif
;;;51     	#if defined (BSP_USART4_BAUDRATE) 
;;;52     		CKCU_APBPerip0ClockConfig(CKCU_APBEN0_USART4,ENABLE);		//Clock for USART4
000068  2101              MOVS     r1,#1
00006a  0308              LSLS     r0,r1,#12
00006c  f7fffffe          BL       CKCU_APBPerip0ClockConfig
;;;53     	#endif
;;;54     	#if defined (BSP_USART5_BAUDRATE) 
;;;55     		CKCU_APBPerip0ClockConfig(CKCU_APBEN0_USART5,ENABLE);		//Clock for USART5
;;;56     	#endif
;;;57     	#if defined (BSP_USART1_BAUDRATE) 
;;;58     		CKCU_APBPerip1ClockConfig(CKCU_APBEN1_USART1,ENABLE);		//Clock for USART1
;;;59     	#endif
;;;60     	#if defined (BSP_USART3_BAUDRATE) 
;;;61     		CKCU_APBPerip1ClockConfig(CKCU_APBEN1_USART3,ENABLE);		//Clock for USART3
;;;62     	#endif
;;;63     }
000070  bd10              POP      {r4,pc}
;;;64     extern void Carrier_Test(uint8_t b_enable);
                          ENDP

                  main PROC
;;;73     	extern REMOTE_DECODE remote_decode[REMOTE_DECODER_MAX];
;;;74     int main(void)
000072  f7fffffe          BL       init_sys
;;;75     {
;;;76     	uint8_t id;
;;;77     	init_sys();
;;;78     	LED_GPIO_Config();
000076  f7fffffe          BL       LED_GPIO_Config
;;;79     	IR_GPIO_Config();
00007a  f7fffffe          BL       IR_GPIO_Config
;;;80     	USARTx_Config();
00007e  f7fffffe          BL       USARTx_Config
;;;81     	SPI0_Init();
000082  f7fffffe          BL       SPI0_Init
;;;82     	TIM_Mode_Config();
000086  f7fffffe          BL       TIM_Mode_Config
;;;83     	BK2425_Initialize();
00008a  f7fffffe          BL       BK2425_Initialize
;;;84     	id=Get_Chip_ID();
00008e  f7fffffe          BL       Get_Chip_ID
000092  4604              MOV      r4,r0
;;;85     	printf("chip id = %d \r\n",id);
000094  4621              MOV      r1,r4
000096  a00b              ADR      r0,|L1.196|
000098  f7fffffe          BL       __2printf
;;;86     	LED1_GPIO_PORT->RR = LED1_PIN;   //Debug指示LED灯
00009c  20ff              MOVS     r0,#0xff
00009e  3001              ADDS     r0,#1
0000a0  490c              LDR      r1,|L1.212|
0000a2  6288              STR      r0,[r1,#0x28]
;;;87     	while(1)
0000a4  e00d              B        |L1.194|
                  |L1.166|
;;;88     	{
;;;89     //		uint8_t i;
;;;90     //		for(i=0;i<6;n++)
;;;91     //		{
;;;92     //			if((remote_decode[n].rxByte==(BACK_LEFT_WEAK))||
;;;93     //				(remote_decode[n].rxByte==(BACK_RIGHT_WEAK))||\
;;;94     //				(remote_decode[n].rxByte==(LEFT_WEAK))||\
;;;95     //				(remote_decode[n].rxByte==(RIGHT_WEAK))||\
;;;96     //				(remote_decode[n].rxByte==(MIDDLE_WEAK)))
;;;97     //			
;;;98     //			n=1;
;;;99     //				else	if((remote_decode[n].rxByte==BACK_LEFT_STRONG)||
;;;100    //				(remote_decode[n].rxByte==BACK_RIGHT_STRONG)||\
;;;101    //				(remote_decode[n].rxByte==LEFT_STRONG)||\
;;;102    //				(remote_decode[n].rxByte==RIGHT_STRONG)||\
;;;103    //				(remote_decode[n].rxByte==MIDDLE_STRONG))
;;;104    //			n=10;
;;;105    //		  else n=0;
;;;106    //		LED1_GPIO_PORT->RR = LED1_PIN;   //Debug指示LED灯
;;;107    //		Delay_us(5000*n);
;;;108    //		//LED1_GPIO_PORT->RR = LED1_PIN;
;;;109    //		LED1_GPIO_PORT->SRR = LED1_PIN;
;;;110    //		Delay_us(5000*n);
;;;111    //	  printf("signal_code %x \r\n",remote_decode[n].rxByte);
;;;112    //		}
;;;113       	LED1_GPIO_PORT->RR = LED1_PIN;   //Debug指示LED灯
0000a6  20ff              MOVS     r0,#0xff
0000a8  3001              ADDS     r0,#1
0000aa  490a              LDR      r1,|L1.212|
0000ac  6288              STR      r0,[r1,#0x28]
;;;114    		Delay_us(10000);
0000ae  480a              LDR      r0,|L1.216|
0000b0  f7fffffe          BL       Delay_us
;;;115    		//LED1_GPIO_PORT->RR = LED1_PIN;
;;;116    		LED1_GPIO_PORT->SRR = LED1_PIN;
0000b4  20ff              MOVS     r0,#0xff
0000b6  3001              ADDS     r0,#1
0000b8  4906              LDR      r1,|L1.212|
0000ba  6248              STR      r0,[r1,#0x24]
;;;117    		Delay_us(10000);
0000bc  4806              LDR      r0,|L1.216|
0000be  f7fffffe          BL       Delay_us
                  |L1.194|
0000c2  e7f0              B        |L1.166|
;;;118    		
;;;119    		//Receive_Packet();
;;;120    		//Send_Packet(W_TX_PAYLOAD_NOACK_CMD,temp,sizeof(temp));
;;;121    		//LED1_GPIO_PORT->SRR = LED1_PIN;  //Debug指示LED灯
;;;122    		//if(GPIO_ReadInBit(AM_GPIOB,GPIO_PIN_5)==RESET)
;;;123    
;;;124    
;;;125    
;;;126    	}
;;;127    }
                          ENDP

                  |L1.196|
0000c4  63686970          DCB      "chip id = %d \r\n",0
0000c8  20696420
0000cc  3d202564
0000d0  200d0a00
                  |L1.212|
                          DCD      0x400b2000
                  |L1.216|
                          DCD      0x00002710

                          AREA ||.data||, DATA, ALIGN=0

                  temp_read
000000  01                DCB      0x01
                  temp
000001  000102            DCB      0x00,0x01,0x02
000004  03040506          DCB      0x03,0x04,0x05,0x06
000008  070809            DCB      0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "src\\main.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_init_sys____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___6_main_c_init_sys____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_init_sys____REVSH|
#line 128
|__asm___6_main_c_init_sys____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
