; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\spi.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\spi.crf ..\driver\src\spi.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SPI_DeInit PROC
;;;49       ************************************************************************************************************/
;;;50     void SPI_DeInit(AM_SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;51     {
000002  4604              MOV      r4,r0
;;;52       if(SPIx == AM_SPI0)
000004  4889              LDR      r0,|L1.556|
000006  4284              CMP      r4,r0
000008  d104              BNE      |L1.20|
;;;53       {
;;;54         RSTCU_APBPerip0Reset(RSTCU_APBRST0_SPI0, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       RSTCU_APBPerip0Reset
000012  e003              B        |L1.28|
                  |L1.20|
;;;55       }
;;;56       else
;;;57       {
;;;58         RSTCU_APBPerip0Reset(RSTCU_APBRST0_SPI1, ENABLE);
000014  2101              MOVS     r1,#1
000016  2040              MOVS     r0,#0x40
000018  f7fffffe          BL       RSTCU_APBPerip0Reset
                  |L1.28|
;;;59       }
;;;60     }
00001c  bd10              POP      {r4,pc}
;;;61     
                          ENDP

                  SPI_Init PROC
;;;68       ************************************************************************************************************/
;;;69     void SPI_Init(AM_SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
00001e  b510              PUSH     {r4,lr}
;;;70     {
000020  4602              MOV      r2,r0
;;;71       u32 tmp;
;;;72     
;;;73       /*---------------------------- SPIx Control Register 2 Configuration ------------------------*/
;;;74       if ((SPI_InitStruct->SPI_CPOL == SPI_CPOL_HIGH) && (SPI_InitStruct->SPI_CPHA == SPI_CPHA_FIRST))
000022  2401              MOVS     r4,#1
000024  02a4              LSLS     r4,r4,#10
000026  694b              LDR      r3,[r1,#0x14]
000028  42a3              CMP      r3,r4
00002a  d105              BNE      |L1.56|
00002c  698b              LDR      r3,[r1,#0x18]
00002e  2b00              CMP      r3,#0
000030  d102              BNE      |L1.56|
;;;75       {
;;;76         /* CPOL=1, CPHA=0 */
;;;77         tmp = 0x600;
000032  2003              MOVS     r0,#3
000034  0240              LSLS     r0,r0,#9
000036  e015              B        |L1.100|
                  |L1.56|
;;;78       }
;;;79       else if ((SPI_InitStruct->SPI_CPOL == SPI_CPOL_HIGH) && (SPI_InitStruct->SPI_CPHA == SPI_CPHA_SECOND))
000038  2401              MOVS     r4,#1
00003a  02a4              LSLS     r4,r4,#10
00003c  694b              LDR      r3,[r1,#0x14]
00003e  42a3              CMP      r3,r4
000040  d105              BNE      |L1.78|
000042  698b              LDR      r3,[r1,#0x18]
000044  2b01              CMP      r3,#1
000046  d102              BNE      |L1.78|
;;;80       {
;;;81         /* CPOL=1, CPHA=1 */
;;;82         tmp = 0x500;
000048  2005              MOVS     r0,#5
00004a  0200              LSLS     r0,r0,#8
00004c  e00a              B        |L1.100|
                  |L1.78|
;;;83       }
;;;84       else if ((SPI_InitStruct->SPI_CPOL == SPI_CPOL_LOW) && (SPI_InitStruct->SPI_CPHA == SPI_CPHA_FIRST))
00004e  694b              LDR      r3,[r1,#0x14]
000050  2b00              CMP      r3,#0
000052  d105              BNE      |L1.96|
000054  698b              LDR      r3,[r1,#0x18]
000056  2b00              CMP      r3,#0
000058  d102              BNE      |L1.96|
;;;85       {
;;;86         /* CPOL=0, CPHA=0 */
;;;87         tmp = 0x100;
00005a  20ff              MOVS     r0,#0xff
00005c  3001              ADDS     r0,#1
00005e  e001              B        |L1.100|
                  |L1.96|
;;;88       }
;;;89       else
;;;90       {
;;;91         /* CPOL=0, CPHA=1 */
;;;92         tmp = 0x200;
000060  2001              MOVS     r0,#1
000062  0240              LSLS     r0,r0,#9
                  |L1.100|
;;;93       }
;;;94     
;;;95       SPIx->CR1 = SPI_InitStruct->SPI_Mode |  SPI_InitStruct->SPI_DataLength |
000064  688c              LDR      r4,[r1,#8]
000066  680b              LDR      r3,[r1,#0]
000068  4323              ORRS     r3,r3,r4
00006a  68cc              LDR      r4,[r1,#0xc]
00006c  4323              ORRS     r3,r3,r4
00006e  690c              LDR      r4,[r1,#0x10]
000070  4323              ORRS     r3,r3,r4
000072  69cc              LDR      r4,[r1,#0x1c]
000074  4323              ORRS     r3,r3,r4
000076  4303              ORRS     r3,r3,r0
000078  6053              STR      r3,[r2,#4]
;;;96                   SPI_InitStruct->SPI_SELMode | SPI_InitStruct->SPI_SELPolarity |
;;;97                   SPI_InitStruct->SPI_FirstBit | tmp;
;;;98     
;;;99       /*---------------------------- SPIx FIFO Control Register Configuration ------------------------*/
;;;100      SPIx->FCR = SPI_InitStruct->SPI_FIFO | SPI_InitStruct->SPI_TxFIFOTriggerLevel |
00007a  6a4c              LDR      r4,[r1,#0x24]
00007c  684b              LDR      r3,[r1,#4]
00007e  4323              ORRS     r3,r3,r4
000080  6a0c              LDR      r4,[r1,#0x20]
000082  0124              LSLS     r4,r4,#4
000084  4323              ORRS     r3,r3,r4
000086  6193              STR      r3,[r2,#0x18]
;;;101                 (SPI_InitStruct->SPI_RxFIFOTriggerLevel << 4);
;;;102    
;;;103      /*---------------------------- SPIx Clock Prescaler Register Configuration ------------------------*/
;;;104      SPIx->CPR = (SPI_InitStruct->SPI_ClockPrescaler/2) - 1;
000088  6a8b              LDR      r3,[r1,#0x28]
00008a  085b              LSRS     r3,r3,#1
00008c  1e5b              SUBS     r3,r3,#1
00008e  60d3              STR      r3,[r2,#0xc]
;;;105    }
000090  bd10              POP      {r4,pc}
;;;106    
                          ENDP

                  SPI_StructInit PROC
;;;111      ************************************************************************************************************/
;;;112    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000092  2100              MOVS     r1,#0
;;;113    {
;;;114      /* Initialize the SPI_Mode member */
;;;115      SPI_InitStruct->SPI_Mode = SPI_SLAVE;
000094  6001              STR      r1,[r0,#0]
;;;116    
;;;117      /* Initialize the SPI_FIFO member */
;;;118      SPI_InitStruct->SPI_FIFO = SPI_FIFO_DISABLE;
000096  6041              STR      r1,[r0,#4]
;;;119    
;;;120      /* Initialize the SPI_DataLength member */
;;;121      SPI_InitStruct->SPI_DataLength = SPI_DATALENGTH_16;
000098  6081              STR      r1,[r0,#8]
;;;122    
;;;123      /* Initialize the SPI_SELMode member */
;;;124      SPI_InitStruct->SPI_SELMode = SPI_SEL_SOFTWARE;
00009a  60c1              STR      r1,[r0,#0xc]
;;;125    
;;;126      /* Initialize the SPI_SELPolarity member */
;;;127      SPI_InitStruct->SPI_SELPolarity = SPI_SELPOLARITY_LOW;
00009c  6101              STR      r1,[r0,#0x10]
;;;128    
;;;129      /* Initialize the SPI_CPOL member */
;;;130      SPI_InitStruct->SPI_CPOL = SPI_CPOL_LOW;
00009e  6141              STR      r1,[r0,#0x14]
;;;131    
;;;132      /* Initialize the SPI_CPHA member */
;;;133      SPI_InitStruct->SPI_CPHA = SPI_CPHA_FIRST;
0000a0  6181              STR      r1,[r0,#0x18]
;;;134    
;;;135      /* Initialize the SPI_FirstBit member */
;;;136      SPI_InitStruct->SPI_FirstBit = SPI_FIRSTBIT_MSB;
0000a2  61c1              STR      r1,[r0,#0x1c]
;;;137    
;;;138      /* Initialize the SPI_RxFIFOTriggerLevel member */
;;;139      SPI_InitStruct->SPI_RxFIFOTriggerLevel = 0;
0000a4  6201              STR      r1,[r0,#0x20]
;;;140    
;;;141      /* Initialize the SPI_TxFIFOTriggerLevel member */
;;;142      SPI_InitStruct->SPI_TxFIFOTriggerLevel = 0;
0000a6  6241              STR      r1,[r0,#0x24]
;;;143    
;;;144      /* Initialize the SPI_ClockPrescaler member */
;;;145      SPI_InitStruct->SPI_ClockPrescaler = 2;
0000a8  2102              MOVS     r1,#2
0000aa  6281              STR      r1,[r0,#0x28]
;;;146    }
0000ac  4770              BX       lr
;;;147    
                          ENDP

                  SPI_Cmd PROC
;;;154      ************************************************************************************************************/
;;;155    void SPI_Cmd(AM_SPI_TypeDef* SPIx, ControlStatus NewState)
0000ae  2900              CMP      r1,#0
;;;156    {
;;;157      if (NewState != DISABLE)
0000b0  d004              BEQ      |L1.188|
;;;158      {
;;;159        /* Enable the selected SPI peripheral */
;;;160        SPIx->CR0 |= CR1_SPIEN_SET;
0000b2  6802              LDR      r2,[r0,#0]
0000b4  2301              MOVS     r3,#1
0000b6  431a              ORRS     r2,r2,r3
0000b8  6002              STR      r2,[r0,#0]
0000ba  e003              B        |L1.196|
                  |L1.188|
;;;161      }
;;;162      else
;;;163      {
;;;164        /* Disable the selected SPI peripheral */
;;;165        SPIx->CR0 &= CR1_SPIEN_RESET;
0000bc  6802              LDR      r2,[r0,#0]
0000be  0852              LSRS     r2,r2,#1
0000c0  0052              LSLS     r2,r2,#1
0000c2  6002              STR      r2,[r0,#0]
                  |L1.196|
;;;166      }
;;;167    }
0000c4  4770              BX       lr
;;;168    
                          ENDP

                  SPI_SELOutputCmd PROC
;;;175      ************************************************************************************************************/
;;;176    void SPI_SELOutputCmd(AM_SPI_TypeDef* SPIx, ControlStatus NewState)
0000c6  2900              CMP      r1,#0
;;;177    {
;;;178      if (NewState != DISABLE)
0000c8  d004              BEQ      |L1.212|
;;;179      {
;;;180        SPIx->CR0 |= CR1_SELOEN_SET;
0000ca  6802              LDR      r2,[r0,#0]
0000cc  2308              MOVS     r3,#8
0000ce  431a              ORRS     r2,r2,r3
0000d0  6002              STR      r2,[r0,#0]
0000d2  e003              B        |L1.220|
                  |L1.212|
;;;181      }
;;;182      else
;;;183      {
;;;184        SPIx->CR0 &= CR1_SELOEN_RESET;
0000d4  6802              LDR      r2,[r0,#0]
0000d6  2308              MOVS     r3,#8
0000d8  439a              BICS     r2,r2,r3
0000da  6002              STR      r2,[r0,#0]
                  |L1.220|
;;;185      }
;;;186    }
0000dc  4770              BX       lr
;;;187    
                          ENDP

                  SPI_FIFOCmd PROC
;;;194      ************************************************************************************************************/
;;;195    void SPI_FIFOCmd(AM_SPI_TypeDef* SPIx, ControlStatus NewState)
0000de  2900              CMP      r1,#0
;;;196    {
;;;197      if (NewState != DISABLE)
0000e0  d005              BEQ      |L1.238|
;;;198      {
;;;199        SPIx->FCR |= FCR_FIFOEN_SET;
0000e2  6982              LDR      r2,[r0,#0x18]
0000e4  2301              MOVS     r3,#1
0000e6  029b              LSLS     r3,r3,#10
0000e8  431a              ORRS     r2,r2,r3
0000ea  6182              STR      r2,[r0,#0x18]
0000ec  e004              B        |L1.248|
                  |L1.238|
;;;200      }
;;;201      else
;;;202      {
;;;203        SPIx->FCR &= FCR_FIFOEN_RESET;
0000ee  6982              LDR      r2,[r0,#0x18]
0000f0  2301              MOVS     r3,#1
0000f2  029b              LSLS     r3,r3,#10
0000f4  439a              BICS     r2,r2,r3
0000f6  6182              STR      r2,[r0,#0x18]
                  |L1.248|
;;;204      }
;;;205    }
0000f8  4770              BX       lr
;;;206    
                          ENDP

                  SPI_SetDataLength PROC
;;;212      ************************************************************************************************************/
;;;213    void SPI_SetDataLength(AM_SPI_TypeDef* SPIx, u16 SPI_DataLength)
0000fa  6842              LDR      r2,[r0,#4]
;;;214    {
;;;215      /* Clear DFL[3:0] in CR1  */
;;;216      SPIx->CR1 &= (u32)~CR2_DFL_MASK;
0000fc  0912              LSRS     r2,r2,#4
0000fe  0112              LSLS     r2,r2,#4
000100  6042              STR      r2,[r0,#4]
;;;217      /* Set new DFL[3:0] in CR1  */
;;;218      SPIx->CR1 |= SPI_DataLength;
000102  6842              LDR      r2,[r0,#4]
000104  430a              ORRS     r2,r2,r1
000106  6042              STR      r2,[r0,#4]
;;;219    }
000108  4770              BX       lr
;;;220    
                          ENDP

                  SPI_SELModeConfig PROC
;;;229      ************************************************************************************************************/
;;;230    void SPI_SELModeConfig(AM_SPI_TypeDef* SPIx, u32 SPI_SEL)
00010a  2900              CMP      r1,#0
;;;231    {
;;;232      if(SPI_SEL != SPI_SEL_SOFTWARE)
00010c  d005              BEQ      |L1.282|
;;;233      {
;;;234        SPIx->CR1 |= SPI_SEL_HARDWARE;
00010e  6842              LDR      r2,[r0,#4]
000110  2301              MOVS     r3,#1
000112  035b              LSLS     r3,r3,#13
000114  431a              ORRS     r2,r2,r3
000116  6042              STR      r2,[r0,#4]
000118  e004              B        |L1.292|
                  |L1.282|
;;;235      }
;;;236      else
;;;237      {
;;;238        SPIx->CR1 &= ~SPI_SEL_HARDWARE;
00011a  6842              LDR      r2,[r0,#4]
00011c  2301              MOVS     r3,#1
00011e  035b              LSLS     r3,r3,#13
000120  439a              BICS     r2,r2,r3
000122  6042              STR      r2,[r0,#4]
                  |L1.292|
;;;239      }
;;;240    }
000124  4770              BX       lr
;;;241    
                          ENDP

                  SPI_SoftwareSELCmd PROC
;;;250      ************************************************************************************************************/
;;;251    void SPI_SoftwareSELCmd(AM_SPI_TypeDef* SPIx, u32 SPI_SoftwareSEL)
000126  460a              MOV      r2,r1
;;;252    {
;;;253      if (SPI_SoftwareSEL != SPI_SEL_INACTIVE)
000128  3211              ADDS     r2,r2,#0x11
00012a  2a00              CMP      r2,#0
00012c  d004              BEQ      |L1.312|
;;;254      {
;;;255        SPIx->CR0 |= SPI_SEL_ACTIVE;
00012e  6802              LDR      r2,[r0,#0]
000130  2310              MOVS     r3,#0x10
000132  431a              ORRS     r2,r2,r3
000134  6002              STR      r2,[r0,#0]
000136  e003              B        |L1.320|
                  |L1.312|
;;;256      }
;;;257      else
;;;258      {
;;;259        SPIx->CR0 &= SPI_SEL_INACTIVE;
000138  6802              LDR      r2,[r0,#0]
00013a  2310              MOVS     r3,#0x10
00013c  439a              BICS     r2,r2,r3
00013e  6002              STR      r2,[r0,#0]
                  |L1.320|
;;;260      }
;;;261    }
000140  4770              BX       lr
;;;262    
                          ENDP

                  SPI_SendData PROC
;;;268      ************************************************************************************************************/
;;;269    void SPI_SendData(AM_SPI_TypeDef* SPIx, u32 SPI_Data)
000142  6101              STR      r1,[r0,#0x10]
;;;270    {
;;;271      SPIx->DR = SPI_Data;
;;;272    }
000144  4770              BX       lr
;;;273    
                          ENDP

                  SPI_ReceiveData PROC
;;;278      ************************************************************************************************************/
;;;279    u16 SPI_ReceiveData(AM_SPI_TypeDef* SPIx)
000146  4601              MOV      r1,r0
;;;280    {
;;;281      return (u16)SPIx->DR;
000148  6908              LDR      r0,[r1,#0x10]
00014a  b280              UXTH     r0,r0
;;;282    }
00014c  4770              BX       lr
;;;283    
                          ENDP

                  SPI_SetTimeOutValue PROC
;;;289      ************************************************************************************************************/
;;;290    void SPI_SetTimeOutValue(AM_SPI_TypeDef* SPIx, u32 SPI_Timeout)
00014e  6201              STR      r1,[r0,#0x20]
;;;291    {
;;;292      SPIx->FTOCR = SPI_Timeout;
;;;293    }
000150  4770              BX       lr
;;;294    
                          ENDP

                  SPI_IntConfig PROC
;;;312      ************************************************************************************************************/
;;;313    void SPI_IntConfig(AM_SPI_TypeDef* SPIx, u32 SPI_Int, ControlStatus NewState)
000152  2a00              CMP      r2,#0
;;;314    {
;;;315      if (NewState != DISABLE)
000154  d003              BEQ      |L1.350|
;;;316      {
;;;317        SPIx->IER |= SPI_Int;
000156  6883              LDR      r3,[r0,#8]
000158  430b              ORRS     r3,r3,r1
00015a  6083              STR      r3,[r0,#8]
00015c  e002              B        |L1.356|
                  |L1.350|
;;;318      }
;;;319      else
;;;320      {
;;;321        SPIx->IER &= (u32)~SPI_Int;
00015e  6883              LDR      r3,[r0,#8]
000160  438b              BICS     r3,r3,r1
000162  6083              STR      r3,[r0,#8]
                  |L1.356|
;;;322      }
;;;323    }
000164  4770              BX       lr
;;;324    
                          ENDP

                  SPI_GetFlagStatus PROC
;;;340      ************************************************************************************************************/
;;;341    FlagStatus SPI_GetFlagStatus(AM_SPI_TypeDef* SPIx, u32 SPI_Flag)
000166  b510              PUSH     {r4,lr}
;;;342    {
000168  4602              MOV      r2,r0
;;;343      FlagStatus bitstatus = RESET;
00016a  2000              MOVS     r0,#0
;;;344      u32 statusreg = 0;
00016c  2300              MOVS     r3,#0
;;;345    
;;;346      statusreg = SPIx->SR;
00016e  6953              LDR      r3,[r2,#0x14]
;;;347    
;;;348      if( (statusreg & SPI_Flag) != (u32)RESET )
000170  461c              MOV      r4,r3
000172  400c              ANDS     r4,r4,r1
000174  2c00              CMP      r4,#0
000176  d001              BEQ      |L1.380|
;;;349      {
;;;350        bitstatus = SET;
000178  2001              MOVS     r0,#1
00017a  e000              B        |L1.382|
                  |L1.380|
;;;351      }
;;;352      else
;;;353      {
;;;354        bitstatus = RESET;
00017c  2000              MOVS     r0,#0
                  |L1.382|
;;;355      }
;;;356    
;;;357      return bitstatus;
;;;358    }
00017e  bd10              POP      {r4,pc}
;;;359    
                          ENDP

                  SPI_GetFIFOStatus PROC
;;;368      ************************************************************************************************************/
;;;369    u8 SPI_GetFIFOStatus(AM_SPI_TypeDef* SPIx, u32 SPI_FIFODirection)
000180  b510              PUSH     {r4,lr}
;;;370    {
000182  4602              MOV      r2,r0
000184  460b              MOV      r3,r1
;;;371      u32 tmpreg;
;;;372    
;;;373      if (SPI_FIFODirection == SPI_FIFO_TX)
000186  20ff              MOVS     r0,#0xff
000188  3001              ADDS     r0,#1
00018a  4283              CMP      r3,r0
00018c  d103              BNE      |L1.406|
;;;374      {
;;;375        tmpreg = SPIx->FSR & 0xf;
00018e  69d0              LDR      r0,[r2,#0x1c]
000190  0701              LSLS     r1,r0,#28
000192  0f09              LSRS     r1,r1,#28
000194  e003              B        |L1.414|
                  |L1.406|
;;;376      }
;;;377      else
;;;378      {
;;;379        tmpreg = (SPIx->FSR & 0xf0) >> 4;
000196  69d0              LDR      r0,[r2,#0x1c]
000198  24f0              MOVS     r4,#0xf0
00019a  4020              ANDS     r0,r0,r4
00019c  0901              LSRS     r1,r0,#4
                  |L1.414|
;;;380      }
;;;381    
;;;382      return (u8)tmpreg;
00019e  b2c8              UXTB     r0,r1
;;;383    }
0001a0  bd10              POP      {r4,pc}
;;;384    
                          ENDP

                  SPI_ClearFlag PROC
;;;396      ************************************************************************************************************/
;;;397    void SPI_ClearFlag(AM_SPI_TypeDef* SPIx, u32 SPI_Flag)
0001a2  6141              STR      r1,[r0,#0x14]
;;;398    {
;;;399      SPIx->SR = SPI_Flag;
;;;400    }
0001a4  4770              BX       lr
;;;401    
                          ENDP

                  SPI_FIFOTriggerLevelConfig PROC
;;;411      ************************************************************************************************************/
;;;412    void SPI_FIFOTriggerLevelConfig(AM_SPI_TypeDef* SPIx, u32 SPI_FIFODirection, u8 SPI_FIFOLevel)
0001a6  b510              PUSH     {r4,lr}
;;;413    {
;;;414      if (SPI_FIFODirection == SPI_FIFO_TX)
0001a8  23ff              MOVS     r3,#0xff
0001aa  3301              ADDS     r3,#1
0001ac  4299              CMP      r1,r3
0001ae  d106              BNE      |L1.446|
;;;415      {
;;;416        SPIx->FCR = ((SPIx->FCR & 0x000004F0) | SPI_FIFOLevel);
0001b0  6983              LDR      r3,[r0,#0x18]
0001b2  244f              MOVS     r4,#0x4f
0001b4  0124              LSLS     r4,r4,#4
0001b6  4023              ANDS     r3,r3,r4
0001b8  4313              ORRS     r3,r3,r2
0001ba  6183              STR      r3,[r0,#0x18]
0001bc  e005              B        |L1.458|
                  |L1.446|
;;;417      }
;;;418      else
;;;419      {
;;;420        SPIx->FCR = ((SPIx->FCR & 0x0000040F) | (SPI_FIFOLevel << 4));
0001be  6983              LDR      r3,[r0,#0x18]
0001c0  4c1b              LDR      r4,|L1.560|
0001c2  4023              ANDS     r3,r3,r4
0001c4  0114              LSLS     r4,r2,#4
0001c6  4323              ORRS     r3,r3,r4
0001c8  6183              STR      r3,[r0,#0x18]
                  |L1.458|
;;;421      }
;;;422    }
0001ca  bd10              POP      {r4,pc}
;;;423    
                          ENDP

                  SPI_PDMACmd PROC
;;;434      ************************************************************************************************************/
;;;435    void SPI_PDMACmd(AM_SPI_TypeDef* SPIx, u32 SPI_PDMAREQ, ControlStatus NewState)
0001cc  2a00              CMP      r2,#0
;;;436    {
;;;437      if (NewState != DISABLE)
0001ce  d003              BEQ      |L1.472|
;;;438      {
;;;439        SPIx->CR0 |= SPI_PDMAREQ;
0001d0  6803              LDR      r3,[r0,#0]
0001d2  430b              ORRS     r3,r3,r1
0001d4  6003              STR      r3,[r0,#0]
0001d6  e002              B        |L1.478|
                  |L1.472|
;;;440      }
;;;441      else
;;;442      {
;;;443        SPIx->CR0 &= ~SPI_PDMAREQ;
0001d8  6803              LDR      r3,[r0,#0]
0001da  438b              BICS     r3,r3,r1
0001dc  6003              STR      r3,[r0,#0]
                  |L1.478|
;;;444      }
;;;445    }
0001de  4770              BX       lr
;;;446    
                          ENDP

                  SPI_DUALCmd PROC
;;;453      ************************************************************************************************************/
;;;454    void SPI_DUALCmd(AM_SPI_TypeDef* SPIx, ControlStatus NewState)
0001e0  2901              CMP      r1,#1
;;;455    {
;;;456      (NewState == ENABLE)?(SPIx->CR0 |= CR1_DUALEN_SET):(SPIx->CR0 &= CR1_DUALEN_RESET);
0001e2  d104              BNE      |L1.494|
0001e4  6802              LDR      r2,[r0,#0]
0001e6  2340              MOVS     r3,#0x40
0001e8  431a              ORRS     r2,r2,r3
0001ea  6002              STR      r2,[r0,#0]
0001ec  e003              B        |L1.502|
                  |L1.494|
0001ee  6802              LDR      r2,[r0,#0]
0001f0  2340              MOVS     r3,#0x40
0001f2  439a              BICS     r2,r2,r3
0001f4  6002              STR      r2,[r0,#0]
                  |L1.502|
;;;457    }
0001f6  4770              BX       lr
;;;458    
                          ENDP

                  SPI_GUADTCmd PROC
;;;465      ************************************************************************************************************/
;;;466    void SPI_GUADTCmd(AM_SPI_TypeDef* SPIx, ControlStatus NewState)
0001f8  2901              CMP      r1,#1
;;;467    {
;;;468      (NewState == ENABLE)?(SPIx->CR0 |= CR1_GUADTEN_SET):(SPIx->CR0 &= CR1_GUADTEN_RESET);
0001fa  d104              BNE      |L1.518|
0001fc  6802              LDR      r2,[r0,#0]
0001fe  2380              MOVS     r3,#0x80
000200  431a              ORRS     r2,r2,r3
000202  6002              STR      r2,[r0,#0]
000204  e003              B        |L1.526|
                  |L1.518|
000206  6802              LDR      r2,[r0,#0]
000208  2380              MOVS     r3,#0x80
00020a  439a              BICS     r2,r2,r3
00020c  6002              STR      r2,[r0,#0]
                  |L1.526|
;;;469    }
00020e  4770              BX       lr
;;;470    
                          ENDP

                  SPI_GUADTSPI_GUADTConfig PROC
;;;477      ************************************************************************************************************/
;;;478    void SPI_GUADTSPI_GUADTConfig(AM_SPI_TypeDef* SPIx, u32 Guard_Time)
000210  6802              LDR      r2,[r0,#0]
;;;479    {
;;;480      SPIx->CR0 = (SPIx->CR0 & 0xF0FF) | (Guard_Time << 8);
000212  4b08              LDR      r3,|L1.564|
000214  401a              ANDS     r2,r2,r3
000216  020b              LSLS     r3,r1,#8
000218  431a              ORRS     r2,r2,r3
00021a  6002              STR      r2,[r0,#0]
;;;481    }
00021c  4770              BX       lr
;;;482    
                          ENDP

                  SPI_SELHTConfig PROC
;;;489      ************************************************************************************************************/
;;;490    void SPI_SELHTConfig(AM_SPI_TypeDef* SPIx, u32 CS_Hold_Time)
00021e  6802              LDR      r2,[r0,#0]
;;;491    {
;;;492      SPIx->CR0 = (SPIx->CR0 & 0x0FFF) | (CS_Hold_Time << 12);
000220  0512              LSLS     r2,r2,#20
000222  0d12              LSRS     r2,r2,#20
000224  030b              LSLS     r3,r1,#12
000226  431a              ORRS     r2,r2,r3
000228  6002              STR      r2,[r0,#0]
;;;493    }
00022a  4770              BX       lr
;;;494    
                          ENDP

                  |L1.556|
                          DCD      0x40004000
                  |L1.560|
                          DCD      0x0000040f
                  |L1.564|
                          DCD      0x0000f0ff

;*** Start embedded assembler ***

#line 1 "..\\driver\\src\\spi.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_a2ad70c2____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___5_spi_c_a2ad70c2____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_a2ad70c2____REVSH|
#line 128
|__asm___5_spi_c_a2ad70c2____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
