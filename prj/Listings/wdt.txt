; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\wdt.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\wdt.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\wdt.crf ..\driver\src\wdt.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  WDT_DeInit PROC
;;;49       ************************************************************************************************************/
;;;50     void WDT_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;51     {
;;;52       RSTCU_APBPerip1Reset(RSTCU_APBRST1_WDT, ENABLE);
000002  2101              MOVS     r1,#1
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       RSTCU_APBPerip1Reset
;;;53     }
00000a  bd10              POP      {r4,pc}
;;;54     
                          ENDP

                  WDT_Cmd PROC
;;;60       ************************************************************************************************************/
;;;61     void WDT_Cmd(ControlStatus NewState)
00000c  2800              CMP      r0,#0
;;;62     {
;;;63       if (NewState != DISABLE)
00000e  d007              BEQ      |L1.32|
;;;64       {
;;;65         AM_WDT->MR0 |= MODE0_WDTEN_SET;
000010  495e              LDR      r1,|L1.396|
000012  6849              LDR      r1,[r1,#4]
000014  2201              MOVS     r2,#1
000016  0412              LSLS     r2,r2,#16
000018  4311              ORRS     r1,r1,r2
00001a  4a5c              LDR      r2,|L1.396|
00001c  6051              STR      r1,[r2,#4]
00001e  e006              B        |L1.46|
                  |L1.32|
;;;66       }
;;;67       else
;;;68       {
;;;69         AM_WDT->MR0 &= MODE0_WDTEN_RESET;
000020  495a              LDR      r1,|L1.396|
000022  6849              LDR      r1,[r1,#4]
000024  2201              MOVS     r2,#1
000026  0412              LSLS     r2,r2,#16
000028  4391              BICS     r1,r1,r2
00002a  4a58              LDR      r2,|L1.396|
00002c  6051              STR      r1,[r2,#4]
                  |L1.46|
;;;70       }
;;;71     }
00002e  4770              BX       lr
;;;72     
                          ENDP

                  WDT_HaltConfig PROC
;;;81       ************************************************************************************************************/
;;;82     void WDT_HaltConfig(u32 WDT_Mode)
000030  2800              CMP      r0,#0
;;;83     {
;;;84       if (WDT_Mode == MODE0_WDTSHLT_BOTH)
000032  d106              BNE      |L1.66|
;;;85       {
;;;86         AM_WDT->MR0 = (( MODE0_WDTSHLT_BOTH ) | (AM_WDT->MR0 & 0x00013FFF));
000034  4955              LDR      r1,|L1.396|
000036  6849              LDR      r1,[r1,#4]
000038  4a55              LDR      r2,|L1.400|
00003a  4011              ANDS     r1,r1,r2
00003c  4a53              LDR      r2,|L1.396|
00003e  6051              STR      r1,[r2,#4]
000040  e015              B        |L1.110|
                  |L1.66|
;;;87       }
;;;88       else if (WDT_Mode == MODE0_WDTSHLT_SLEEP)
000042  2101              MOVS     r1,#1
000044  0389              LSLS     r1,r1,#14
000046  4288              CMP      r0,r1
000048  d108              BNE      |L1.92|
;;;89       {
;;;90         AM_WDT->MR0 = (( MODE0_WDTSHLT_SLEEP ) | (AM_WDT->MR0 & 0x00013FFF));
00004a  4950              LDR      r1,|L1.396|
00004c  6849              LDR      r1,[r1,#4]
00004e  4a50              LDR      r2,|L1.400|
000050  4011              ANDS     r1,r1,r2
000052  4602              MOV      r2,r0
000054  4311              ORRS     r1,r1,r2
000056  4a4d              LDR      r2,|L1.396|
000058  6051              STR      r1,[r2,#4]
00005a  e008              B        |L1.110|
                  |L1.92|
;;;91       }
;;;92       else
;;;93       {
;;;94         AM_WDT->MR0 = (( MODE0_WDTSHLT_HALT ) | (AM_WDT->MR0 & 0x00013FFF));
00005c  494b              LDR      r1,|L1.396|
00005e  6849              LDR      r1,[r1,#4]
000060  4a4b              LDR      r2,|L1.400|
000062  4011              ANDS     r1,r1,r2
000064  2201              MOVS     r2,#1
000066  03d2              LSLS     r2,r2,#15
000068  4311              ORRS     r1,r1,r2
00006a  4a48              LDR      r2,|L1.396|
00006c  6051              STR      r1,[r2,#4]
                  |L1.110|
;;;95       }
;;;96     }
00006e  4770              BX       lr
;;;97     
                          ENDP

                  WDT_IntConfig PROC
;;;103      ************************************************************************************************************/
;;;104    void WDT_IntConfig(ControlStatus NewState)
000070  2800              CMP      r0,#0
;;;105    {
;;;106      if (NewState != DISABLE)
000072  d007              BEQ      |L1.132|
;;;107      {
;;;108        AM_WDT->MR0 |= MODE0_WDTFIEN_SET;
000074  4945              LDR      r1,|L1.396|
000076  6849              LDR      r1,[r1,#4]
000078  2201              MOVS     r2,#1
00007a  0312              LSLS     r2,r2,#12
00007c  4311              ORRS     r1,r1,r2
00007e  4a43              LDR      r2,|L1.396|
000080  6051              STR      r1,[r2,#4]
000082  e006              B        |L1.146|
                  |L1.132|
;;;109      }
;;;110      else
;;;111      {
;;;112        AM_WDT->MR0 &= MODE0_WDTFIEN_RESET;
000084  4941              LDR      r1,|L1.396|
000086  6849              LDR      r1,[r1,#4]
000088  2201              MOVS     r2,#1
00008a  0312              LSLS     r2,r2,#12
00008c  4391              BICS     r1,r1,r2
00008e  4a3f              LDR      r2,|L1.396|
000090  6051              STR      r1,[r2,#4]
                  |L1.146|
;;;113      }
;;;114    }
000092  4770              BX       lr
;;;115    
                          ENDP

                  WDT_ResetCmd PROC
;;;121      ************************************************************************************************************/
;;;122    void WDT_ResetCmd(ControlStatus NewState)
000094  2800              CMP      r0,#0
;;;123    {
;;;124      if (NewState != DISABLE)
000096  d007              BEQ      |L1.168|
;;;125      {
;;;126        AM_WDT->MR0 |= MODE0_WDTRETEN_SET;
000098  493c              LDR      r1,|L1.396|
00009a  6849              LDR      r1,[r1,#4]
00009c  2201              MOVS     r2,#1
00009e  0352              LSLS     r2,r2,#13
0000a0  4311              ORRS     r1,r1,r2
0000a2  4a3a              LDR      r2,|L1.396|
0000a4  6051              STR      r1,[r2,#4]
0000a6  e006              B        |L1.182|
                  |L1.168|
;;;127      }
;;;128      else
;;;129      {
;;;130        AM_WDT->MR0 &= MODE0_WDTRETEN_RESET;
0000a8  4938              LDR      r1,|L1.396|
0000aa  6849              LDR      r1,[r1,#4]
0000ac  2201              MOVS     r2,#1
0000ae  0352              LSLS     r2,r2,#13
0000b0  4391              BICS     r1,r1,r2
0000b2  4a36              LDR      r2,|L1.396|
0000b4  6051              STR      r1,[r2,#4]
                  |L1.182|
;;;131      }
;;;132    }
0000b6  4770              BX       lr
;;;133    
                          ENDP

                  WDT_ProtectCmd PROC
;;;139      ************************************************************************************************************/
;;;140    void WDT_ProtectCmd(ControlStatus NewState)
0000b8  2800              CMP      r0,#0
;;;141    {
;;;142      if (NewState != DISABLE)
0000ba  d003              BEQ      |L1.196|
;;;143      {
;;;144        AM_WDT->PR = PRCT_SET;
0000bc  4935              LDR      r1,|L1.404|
0000be  4a33              LDR      r2,|L1.396|
0000c0  6111              STR      r1,[r2,#0x10]
0000c2  e002              B        |L1.202|
                  |L1.196|
;;;145      }
;;;146      else
;;;147      {
;;;148        AM_WDT->PR = PRCT_RESET;
0000c4  4934              LDR      r1,|L1.408|
0000c6  4a31              LDR      r2,|L1.396|
0000c8  6111              STR      r1,[r2,#0x10]
                  |L1.202|
;;;149      }
;;;150    }
0000ca  4770              BX       lr
;;;151    
                          ENDP

                  WDT_SetReloadValue PROC
;;;157      ************************************************************************************************************/
;;;158    void WDT_SetReloadValue(u16 WDT_WDTV)
0000cc  492f              LDR      r1,|L1.396|
;;;159    {
;;;160      AM_WDT->MR0 = WDT_WDTV | (AM_WDT->MR0 & 0x0000F000);
0000ce  6849              LDR      r1,[r1,#4]
0000d0  220f              MOVS     r2,#0xf
0000d2  0312              LSLS     r2,r2,#12
0000d4  4011              ANDS     r1,r1,r2
0000d6  4301              ORRS     r1,r1,r0
0000d8  4a2c              LDR      r2,|L1.396|
0000da  6051              STR      r1,[r2,#4]
;;;161    }
0000dc  4770              BX       lr
;;;162    
                          ENDP

                  WDT_GetReloadValue PROC
;;;166      ************************************************************************************************************/
;;;167    u16 WDT_GetReloadValue(void)
0000de  482b              LDR      r0,|L1.396|
;;;168    {
;;;169      return ((u16)(AM_WDT->MR0 & 0xFFF)) ;
0000e0  6840              LDR      r0,[r0,#4]
0000e2  0500              LSLS     r0,r0,#20
0000e4  0d00              LSRS     r0,r0,#20
;;;170    }
0000e6  4770              BX       lr
;;;171    
                          ENDP

                  WDT_SetDeltaValue PROC
;;;177      ************************************************************************************************************/
;;;178    void WDT_SetDeltaValue(u16 WDT_WDTD)
0000e8  4928              LDR      r1,|L1.396|
;;;179    {
;;;180      AM_WDT->MR1 = (WDT_WDTD | (AM_WDT->MR1 & 0x00007000));
0000ea  6889              LDR      r1,[r1,#8]
0000ec  2207              MOVS     r2,#7
0000ee  0312              LSLS     r2,r2,#12
0000f0  4011              ANDS     r1,r1,r2
0000f2  4301              ORRS     r1,r1,r0
0000f4  4a25              LDR      r2,|L1.396|
0000f6  6091              STR      r1,[r2,#8]
;;;181    }
0000f8  4770              BX       lr
;;;182    
                          ENDP

                  WDT_GetDeltaValue PROC
;;;186      ************************************************************************************************************/
;;;187    u16 WDT_GetDeltaValue(void)
0000fa  4824              LDR      r0,|L1.396|
;;;188    {
;;;189      return ((u16)(AM_WDT->MR1 & 0xFFF)) ;
0000fc  6880              LDR      r0,[r0,#8]
0000fe  0500              LSLS     r0,r0,#20
000100  0d00              LSRS     r0,r0,#20
;;;190    }
000102  4770              BX       lr
;;;191    
                          ENDP

                  WDT_SetPrescaler PROC
;;;205      ************************************************************************************************************/
;;;206    void WDT_SetPrescaler(u16 WDT_PRESCALER)
000104  4921              LDR      r1,|L1.396|
;;;207    {
;;;208      AM_WDT->MR1 = (WDT_PRESCALER | (AM_WDT->MR1 & 0x00000FFF));
000106  6889              LDR      r1,[r1,#8]
000108  0509              LSLS     r1,r1,#20
00010a  0d09              LSRS     r1,r1,#20
00010c  4301              ORRS     r1,r1,r0
00010e  4a1f              LDR      r2,|L1.396|
000110  6091              STR      r1,[r2,#8]
;;;209    }
000112  4770              BX       lr
;;;210    
                          ENDP

                  WDT_GetPrescaler PROC
;;;214      ************************************************************************************************************/
;;;215    u8 WDT_GetPrescaler(void)
000114  481d              LDR      r0,|L1.396|
;;;216    {
;;;217      u32 tmp ;
;;;218    
;;;219      tmp = AM_WDT->MR1 & 0x7000 ;
000116  6880              LDR      r0,[r0,#8]
000118  2207              MOVS     r2,#7
00011a  0312              LSLS     r2,r2,#12
00011c  4010              ANDS     r0,r0,r2
00011e  4601              MOV      r1,r0
;;;220      tmp >>= 12 ;
000120  0b09              LSRS     r1,r1,#12
;;;221      return ((u8)0x1 << tmp) ;
000122  2001              MOVS     r0,#1
000124  4088              LSLS     r0,r0,r1
000126  b2c0              UXTB     r0,r0
;;;222    }
000128  4770              BX       lr
;;;223    
                          ENDP

                  WDT_Restart PROC
;;;227      ************************************************************************************************************/
;;;228    void WDT_Restart(void)
00012a  481c              LDR      r0,|L1.412|
;;;229    {
;;;230      AM_WDT->CR = RESTART_KEY | 0x1;
00012c  4917              LDR      r1,|L1.396|
00012e  6008              STR      r0,[r1,#0]
;;;231    }
000130  4770              BX       lr
;;;232    
                          ENDP

                  WDT_GetFlagStatus PROC
;;;240      ************************************************************************************************************/
;;;241    FlagStatus WDT_GetFlagStatus (u32 WDT_FLAG)
000132  4601              MOV      r1,r0
;;;242    {
;;;243      u32 statusreg = 0;
000134  2200              MOVS     r2,#0
;;;244      FlagStatus bitstatus = RESET;
000136  2000              MOVS     r0,#0
;;;245    
;;;246      statusreg = AM_WDT->SR;
000138  4b14              LDR      r3,|L1.396|
00013a  68da              LDR      r2,[r3,#0xc]
;;;247    
;;;248      if ( statusreg != WDT_FLAG )
00013c  428a              CMP      r2,r1
00013e  d000              BEQ      |L1.322|
;;;249      {
;;;250        bitstatus = RESET;
000140  e000              B        |L1.324|
                  |L1.322|
;;;251      }
;;;252      else
;;;253      {
;;;254        bitstatus = SET;
000142  2001              MOVS     r0,#1
                  |L1.324|
;;;255      }
;;;256    
;;;257      return bitstatus;
;;;258    }
000144  4770              BX       lr
;;;259    
                          ENDP

                  WDT_LockCmd PROC
;;;265      ************************************************************************************************************/
;;;266    void WDT_LockCmd(ControlStatus NewState)
000146  2800              CMP      r0,#0
;;;267    {
;;;268      if (NewState != DISABLE)
000148  d00b              BEQ      |L1.354|
;;;269      {
;;;270        AM_WDT->CSR |= ( MODE0_WDTLOCK_SET | ( AM_WDT->CSR & 0x00000001 ));
00014a  4910              LDR      r1,|L1.396|
00014c  6989              LDR      r1,[r1,#0x18]
00014e  4a0f              LDR      r2,|L1.396|
000150  6992              LDR      r2,[r2,#0x18]
000152  07d2              LSLS     r2,r2,#31
000154  0fd2              LSRS     r2,r2,#31
000156  2310              MOVS     r3,#0x10
000158  431a              ORRS     r2,r2,r3
00015a  4311              ORRS     r1,r1,r2
00015c  4a0b              LDR      r2,|L1.396|
00015e  6191              STR      r1,[r2,#0x18]
000160  e008              B        |L1.372|
                  |L1.354|
;;;271      }
;;;272      else
;;;273      {
;;;274        AM_WDT->CSR &= ( MODE0_WDTLOCK_RESET | ( AM_WDT->CSR & 0x00000001 ));
000162  490a              LDR      r1,|L1.396|
000164  6989              LDR      r1,[r1,#0x18]
000166  4a09              LDR      r2,|L1.396|
000168  6992              LDR      r2,[r2,#0x18]
00016a  07d2              LSLS     r2,r2,#31
00016c  0fd2              LSRS     r2,r2,#31
00016e  4011              ANDS     r1,r1,r2
000170  4a06              LDR      r2,|L1.396|
000172  6191              STR      r1,[r2,#0x18]
                  |L1.372|
;;;275      }
;;;276    }
000174  4770              BX       lr
;;;277    
                          ENDP

                  WDT_SourceConfig PROC
;;;283      ************************************************************************************************************/
;;;284    void WDT_SourceConfig( u32 WDT_SOURCE )
000176  2801              CMP      r0,#1
;;;285    {
;;;286      if (WDT_SOURCE != WDT_SOURCE_LSE)
000178  d003              BEQ      |L1.386|
;;;287      {
;;;288        AM_WDT->CSR = WDT_SOURCE_LSI;
00017a  2100              MOVS     r1,#0
00017c  4a03              LDR      r2,|L1.396|
00017e  6191              STR      r1,[r2,#0x18]
000180  e002              B        |L1.392|
                  |L1.386|
;;;289      }
;;;290      else
;;;291      {
;;;292        AM_WDT->CSR = WDT_SOURCE_LSE;
000182  2101              MOVS     r1,#1
000184  4a01              LDR      r2,|L1.396|
000186  6191              STR      r1,[r2,#0x18]
                  |L1.392|
;;;293      }
;;;294    }
000188  4770              BX       lr
;;;295    
                          ENDP

00018a  0000              DCW      0x0000
                  |L1.396|
                          DCD      0x40068000
                  |L1.400|
                          DCD      0x00013fff
                  |L1.404|
                          DCD      0x0000ca35
                  |L1.408|
                          DCD      0x000035ca
                  |L1.412|
                          DCD      0x5fa00001

;*** Start embedded assembler ***

#line 1 "..\\driver\\src\\wdt.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_wdt_c_bdd4e73f____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___5_wdt_c_bdd4e73f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_wdt_c_bdd4e73f____REVSH|
#line 128
|__asm___5_wdt_c_bdd4e73f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
