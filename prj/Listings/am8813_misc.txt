; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\am8813_misc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\am8813_misc.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\am8813_misc.crf src\AM8813_misc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;38       */
;;;39     void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  2100              MOVS     r1,#0
;;;40     {
;;;41       uint32_t tmppriority = 0x00;
;;;42       
;;;43       /* Check the parameters */
;;;44     //  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;45     //  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
;;;46         
;;;47       if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000002  7882              LDRB     r2,[r0,#2]
000004  2a00              CMP      r2,#0
000006  d027              BEQ      |L1.88|
;;;48       {
;;;49         /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;50         tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
000008  4a3b              LDR      r2,|L1.248|
00000a  2303              MOVS     r3,#3
00000c  021b              LSLS     r3,r3,#8
00000e  18d2              ADDS     r2,r2,r3
000010  7803              LDRB     r3,[r0,#0]
000012  109b              ASRS     r3,r3,#2
000014  009b              LSLS     r3,r3,#2
000016  58d1              LDR      r1,[r2,r3]
;;;51         tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
000018  7802              LDRB     r2,[r0,#0]
00001a  0792              LSLS     r2,r2,#30
00001c  0ed3              LSRS     r3,r2,#27
00001e  22ff              MOVS     r2,#0xff
000020  409a              LSLS     r2,r2,r3
000022  460b              MOV      r3,r1
000024  4393              BICS     r3,r3,r2
000026  4619              MOV      r1,r3
;;;52         tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
000028  7842              LDRB     r2,[r0,#1]
00002a  0792              LSLS     r2,r2,#30
00002c  0e12              LSRS     r2,r2,#24
00002e  7803              LDRB     r3,[r0,#0]
000030  079b              LSLS     r3,r3,#30
000032  0edb              LSRS     r3,r3,#27
000034  409a              LSLS     r2,r2,r3
000036  4311              ORRS     r1,r1,r2
;;;53         
;;;54         NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
000038  4a2f              LDR      r2,|L1.248|
00003a  2303              MOVS     r3,#3
00003c  021b              LSLS     r3,r3,#8
00003e  18d2              ADDS     r2,r2,r3
000040  7803              LDRB     r3,[r0,#0]
000042  109b              ASRS     r3,r3,#2
000044  009b              LSLS     r3,r3,#2
000046  50d1              STR      r1,[r2,r3]
;;;55         
;;;56         /* Enable the Selected IRQ Channels --------------------------------------*/
;;;57         NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
000048  7802              LDRB     r2,[r0,#0]
00004a  06d3              LSLS     r3,r2,#27
00004c  0edb              LSRS     r3,r3,#27
00004e  2201              MOVS     r2,#1
000050  409a              LSLS     r2,r2,r3
000052  4b29              LDR      r3,|L1.248|
000054  601a              STR      r2,[r3,#0]
000056  e007              B        |L1.104|
                  |L1.88|
;;;58       }
;;;59       else
;;;60       {
;;;61         /* Disable the Selected IRQ Channels -------------------------------------*/
;;;62         NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
000058  7802              LDRB     r2,[r0,#0]
00005a  06d3              LSLS     r3,r2,#27
00005c  0edb              LSRS     r3,r3,#27
00005e  2201              MOVS     r2,#1
000060  409a              LSLS     r2,r2,r3
000062  4b25              LDR      r3,|L1.248|
000064  3380              ADDS     r3,r3,#0x80
000066  601a              STR      r2,[r3,#0]
                  |L1.104|
;;;63       }
;;;64     }
000068  4770              BX       lr
;;;65     
                          ENDP

                  NVIC_SystemLPConfig PROC
;;;76       */
;;;77     void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
00006a  2900              CMP      r1,#0
;;;78     {
;;;79       /* Check the parameters */
;;;80     //  assert_param(IS_NVIC_LP(LowPowerMode));
;;;81       
;;;82     //  assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;83       
;;;84       if (NewState != DISABLE)
00006c  d005              BEQ      |L1.122|
;;;85       {
;;;86         SCB->SCR |= LowPowerMode;
00006e  4a23              LDR      r2,|L1.252|
000070  6912              LDR      r2,[r2,#0x10]
000072  4302              ORRS     r2,r2,r0
000074  4b21              LDR      r3,|L1.252|
000076  611a              STR      r2,[r3,#0x10]
000078  e004              B        |L1.132|
                  |L1.122|
;;;87       }
;;;88       else
;;;89       {
;;;90         SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
00007a  4a20              LDR      r2,|L1.252|
00007c  6912              LDR      r2,[r2,#0x10]
00007e  4382              BICS     r2,r2,r0
000080  4b1e              LDR      r3,|L1.252|
000082  611a              STR      r2,[r3,#0x10]
                  |L1.132|
;;;91       }
;;;92     }
000084  4770              BX       lr
;;;93     
                          ENDP

                  SysTick_CLKSourceConfig PROC
;;;101      */
;;;102    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000086  2804              CMP      r0,#4
;;;103    {
;;;104      /* Check the parameters */
;;;105    //  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;106      
;;;107      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000088  d106              BNE      |L1.152|
;;;108      {
;;;109        SysTick->CTRL |= SysTick_CLKSource_HCLK;
00008a  491d              LDR      r1,|L1.256|
00008c  6909              LDR      r1,[r1,#0x10]
00008e  2204              MOVS     r2,#4
000090  4311              ORRS     r1,r1,r2
000092  4a1b              LDR      r2,|L1.256|
000094  6111              STR      r1,[r2,#0x10]
000096  e005              B        |L1.164|
                  |L1.152|
;;;110      }
;;;111      else
;;;112      {
;;;113        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000098  4919              LDR      r1,|L1.256|
00009a  6909              LDR      r1,[r1,#0x10]
00009c  2204              MOVS     r2,#4
00009e  4391              BICS     r1,r1,r2
0000a0  4a17              LDR      r2,|L1.256|
0000a2  6111              STR      r1,[r2,#0x10]
                  |L1.164|
;;;114      }
;;;115    }
0000a4  4770              BX       lr
;;;116    
                          ENDP

                  SysTick_CounterCmd PROC
;;;125      ***********************************************************************************************************/
;;;126    void SysTick_CounterCmd(u32 SysTick_Counter)
0000a6  2800              CMP      r0,#0
;;;127    {
;;;128      /* Check the parameters */
;;;129      //Assert_Param(IS_SYSTICK_COUNTER(SysTick_Counter));
;;;130    
;;;131      if (SysTick_Counter == SYSTICK_COUNTER_CLEAR)
0000a8  d103              BNE      |L1.178|
;;;132      {
;;;133        SysTick->VAL = SYSTICK_COUNTER_CLEAR;
0000aa  2100              MOVS     r1,#0
0000ac  4a14              LDR      r2,|L1.256|
0000ae  6191              STR      r1,[r2,#0x18]
0000b0  e00e              B        |L1.208|
                  |L1.178|
;;;134      }
;;;135      else
;;;136      {
;;;137        if (SysTick_Counter == SYSTICK_COUNTER_ENABLE)
0000b2  2801              CMP      r0,#1
0000b4  d106              BNE      |L1.196|
;;;138        {
;;;139          SysTick->CTRL |= SYSTICK_COUNTER_ENABLE;
0000b6  4912              LDR      r1,|L1.256|
0000b8  6909              LDR      r1,[r1,#0x10]
0000ba  2201              MOVS     r2,#1
0000bc  4311              ORRS     r1,r1,r2
0000be  4a10              LDR      r2,|L1.256|
0000c0  6111              STR      r1,[r2,#0x10]
0000c2  e005              B        |L1.208|
                  |L1.196|
;;;140        }
;;;141        else
;;;142        {
;;;143          SysTick->CTRL &= SYSTICK_COUNTER_DISABLE;
0000c4  490e              LDR      r1,|L1.256|
0000c6  6909              LDR      r1,[r1,#0x10]
0000c8  0849              LSRS     r1,r1,#1
0000ca  0049              LSLS     r1,r1,#1
0000cc  4a0c              LDR      r2,|L1.256|
0000ce  6111              STR      r1,[r2,#0x10]
                  |L1.208|
;;;144        }
;;;145      }
;;;146    }
0000d0  4770              BX       lr
;;;147    
                          ENDP

                  SysTick_IntConfig PROC
;;;153      ***********************************************************************************************************/
;;;154    void SysTick_IntConfig(ControlStatus NewState)
0000d2  2800              CMP      r0,#0
;;;155    {
;;;156      /* Check the parameters */
;;;157      //Assert_Param(IS_CONTROL_STATUS(NewState));
;;;158    
;;;159      if (NewState != DISABLE)
0000d4  d006              BEQ      |L1.228|
;;;160      {
;;;161        SysTick->CTRL |= CTRL_TICKINT_SET;
0000d6  490a              LDR      r1,|L1.256|
0000d8  6909              LDR      r1,[r1,#0x10]
0000da  2202              MOVS     r2,#2
0000dc  4311              ORRS     r1,r1,r2
0000de  4a08              LDR      r2,|L1.256|
0000e0  6111              STR      r1,[r2,#0x10]
0000e2  e005              B        |L1.240|
                  |L1.228|
;;;162      }
;;;163      else
;;;164      {
;;;165        SysTick->CTRL &= CTRL_TICKINT_RESET;
0000e4  4906              LDR      r1,|L1.256|
0000e6  6909              LDR      r1,[r1,#0x10]
0000e8  2202              MOVS     r2,#2
0000ea  4391              BICS     r1,r1,r2
0000ec  4a04              LDR      r2,|L1.256|
0000ee  6111              STR      r1,[r2,#0x10]
                  |L1.240|
;;;166      }
;;;167    }
0000f0  4770              BX       lr
;;;168    
                          ENDP

                  SysTick_SetReloadValue PROC
;;;174      ***********************************************************************************************************/
;;;175    void SysTick_SetReloadValue(u32 SysTick_Reload)
0000f2  4903              LDR      r1,|L1.256|
;;;176    {
;;;177      /* Check the parameters */
;;;178      //Assert_Param(IS_SYSTICK_RELOAD(SysTick_Reload));
;;;179    
;;;180      SysTick->LOAD = SysTick_Reload;
0000f4  6148              STR      r0,[r1,#0x14]
;;;181    }
0000f6  4770              BX       lr
                          ENDP

                  |L1.248|
                          DCD      0xe000e100
                  |L1.252|
                          DCD      0xe000ed00
                  |L1.256|
                          DCD      0xe000e000

;*** Start embedded assembler ***

#line 1 "src\\AM8813_misc.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_AM8813_misc_c_c60eb25e____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___13_AM8813_misc_c_c60eb25e____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_AM8813_misc_c_c60eb25e____REVSH|
#line 128
|__asm___13_AM8813_misc_c_c60eb25e____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
