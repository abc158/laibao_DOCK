; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\crc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\crc.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\crc.crf ..\driver\src\crc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CRC_DeInit PROC
;;;22       ***********************************************************************************************************/
;;;23     void CRC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;24     {
;;;25       RSTCU_AHBPeripReset(RSTCU_AHBRST_CRC, ENABLE);
000002  2101              MOVS     r1,#1
000004  0348              LSLS     r0,r1,#13
000006  f7fffffe          BL       RSTCU_AHBPeripReset
;;;26     }
00000a  bd10              POP      {r4,pc}
;;;27     
                          ENDP

                  CRC_CCITT PROC
;;;34       ***********************************************************************************************************/
;;;35     u16 CRC_CCITT(u16 seed, u8 *buffer, u32 length)
00000c  b510              PUSH     {r4,lr}
;;;36     {
00000e  4603              MOV      r3,r0
;;;37       /* CRC-CCITT poly: 0x1021 */
;;;38       AM_CRC->SDR = seed;
000010  481c              LDR      r0,|L1.132|
000012  6043              STR      r3,[r0,#4]
;;;39       AM_CRC->CR = CRC_CCITT_POLY | CRC_NORMAL_WR | CRC_NORMAL_SUM;
000014  2000              MOVS     r0,#0
000016  4c1b              LDR      r4,|L1.132|
000018  6020              STR      r0,[r4,#0]
;;;40     
;;;41       while (length--)
00001a  e003              B        |L1.36|
                  |L1.28|
;;;42       {
;;;43         wb(&AM_CRC->DR, *buffer++); // byte write
00001c  7808              LDRB     r0,[r1,#0]
00001e  4c19              LDR      r4,|L1.132|
000020  7320              STRB     r0,[r4,#0xc]
000022  1c49              ADDS     r1,r1,#1
                  |L1.36|
000024  4610              MOV      r0,r2                 ;41
000026  1e52              SUBS     r2,r2,#1              ;41
000028  2800              CMP      r0,#0                 ;41
00002a  d1f7              BNE      |L1.28|
;;;44       }
;;;45     
;;;46       return (u16)(AM_CRC->CSR);
00002c  4815              LDR      r0,|L1.132|
00002e  6880              LDR      r0,[r0,#8]
000030  b280              UXTH     r0,r0
;;;47     }
000032  bd10              POP      {r4,pc}
;;;48     
                          ENDP

                  CRC_16 PROC
;;;55       ***********************************************************************************************************/
;;;56     u16 CRC_16(u16 seed, u8 *buffer, u32 length)
000034  b510              PUSH     {r4,lr}
;;;57     {
000036  4603              MOV      r3,r0
;;;58       /* CRC-16 poly: 0x8005 */
;;;59       AM_CRC->SDR = seed;
000038  4812              LDR      r0,|L1.132|
00003a  6043              STR      r3,[r0,#4]
;;;60       AM_CRC->CR = CRC_16_POLY | CRC_BIT_RVS_WR | CRC_BIT_RVS_SUM | CRC_BYTE_RVS_SUM;
00003c  2065              MOVS     r0,#0x65
00003e  4c11              LDR      r4,|L1.132|
000040  6020              STR      r0,[r4,#0]
;;;61     
;;;62       while (length--)
000042  e003              B        |L1.76|
                  |L1.68|
;;;63       {
;;;64         wb(&AM_CRC->DR, *buffer++); // byte write
000044  7808              LDRB     r0,[r1,#0]
000046  4c0f              LDR      r4,|L1.132|
000048  7320              STRB     r0,[r4,#0xc]
00004a  1c49              ADDS     r1,r1,#1
                  |L1.76|
00004c  4610              MOV      r0,r2                 ;62
00004e  1e52              SUBS     r2,r2,#1              ;62
000050  2800              CMP      r0,#0                 ;62
000052  d1f7              BNE      |L1.68|
;;;65       }
;;;66     
;;;67       return (u16)(AM_CRC->CSR);
000054  480b              LDR      r0,|L1.132|
000056  6880              LDR      r0,[r0,#8]
000058  b280              UXTH     r0,r0
;;;68     }
00005a  bd10              POP      {r4,pc}
;;;69     
                          ENDP

                  CRC_32 PROC
;;;76       ***********************************************************************************************************/
;;;77     u32 CRC_32(u32 seed, u8 *buffer, u32 length)
00005c  b510              PUSH     {r4,lr}
;;;78     {
00005e  4603              MOV      r3,r0
;;;79       /* CRC-32 poly: 0x04C11DB7 */
;;;80       AM_CRC->SDR = seed;
000060  4808              LDR      r0,|L1.132|
000062  6043              STR      r3,[r0,#4]
;;;81       AM_CRC->CR = CRC_32_POLY | CRC_BIT_RVS_WR | CRC_BIT_RVS_SUM | CRC_BYTE_RVS_SUM | CRC_CMPL_SUM;
000064  20e6              MOVS     r0,#0xe6
000066  4c07              LDR      r4,|L1.132|
000068  6020              STR      r0,[r4,#0]
;;;82     
;;;83       while (length--)
00006a  e003              B        |L1.116|
                  |L1.108|
;;;84       {
;;;85         wb(&AM_CRC->DR, *buffer++); // byte write
00006c  7808              LDRB     r0,[r1,#0]
00006e  4c05              LDR      r4,|L1.132|
000070  7320              STRB     r0,[r4,#0xc]
000072  1c49              ADDS     r1,r1,#1
                  |L1.116|
000074  4610              MOV      r0,r2                 ;83
000076  1e52              SUBS     r2,r2,#1              ;83
000078  2800              CMP      r0,#0                 ;83
00007a  d1f7              BNE      |L1.108|
;;;86       }
;;;87     
;;;88       return (AM_CRC->CSR);
00007c  4801              LDR      r0,|L1.132|
00007e  6880              LDR      r0,[r0,#8]
;;;89     }
000080  bd10              POP      {r4,pc}
;;;90     
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
                          DCD      0x4008a000

;*** Start embedded assembler ***

#line 1 "..\\driver\\src\\crc.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_crc_c_3a35c564____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___5_crc_c_3a35c564____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_crc_c_3a35c564____REVSH|
#line 128
|__asm___5_crc_c_3a35c564____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
