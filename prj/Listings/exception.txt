; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\exception.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\exception.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\exception.crf src\exception.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NMI_Handler PROC
;;;19     
;;;20     void NMI_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;21     {
;;;22       NMI_Handler_IRQ();
000002  f7fffffe          BL       NMI_Handler_IRQ
;;;23     }
000006  bd10              POP      {r4,pc}
;;;24     
                          ENDP

                  HardFault_Handler PROC
;;;25     void HardFault_Handler(void)
000008  bf00              NOP      
                  |L1.10|
;;;26     {
;;;27       while (1);
00000a  e7fe              B        |L1.10|
;;;28     }
;;;29     
                          ENDP

                  SVC_Handler PROC
;;;30     void SVC_Handler(void)
00000c  bf00              NOP      
                  |L1.14|
;;;31     {
;;;32     	while (1);
00000e  e7fe              B        |L1.14|
;;;33     }
;;;34     
                          ENDP

                  DebugMon_Handler PROC
;;;35     void DebugMon_Handler(void)
000010  bf00              NOP      
                  |L1.18|
;;;36     {
;;;37     	while (1);
000012  e7fe              B        |L1.18|
;;;38     }
;;;39     
                          ENDP

                  PendSV_Handler PROC
;;;40     void PendSV_Handler(void)
000014  bf00              NOP      
                  |L1.22|
;;;41     {
;;;42     	while (1);
000016  e7fe              B        |L1.22|
;;;43     }
;;;44     
                          ENDP

                  SysTick_Handler PROC
;;;49       */
;;;50     void SysTick_Handler(void)
000018  b510              PUSH     {r4,lr}
;;;51     {
;;;52     	SystemCoreClockUpdate();
00001a  f7fffffe          BL       SystemCoreClockUpdate
;;;53     }
00001e  bd10              POP      {r4,pc}
;;;54     
                          ENDP

                  CKRDY_IRQHandler PROC
;;;55     void CKRDY_IRQHandler(void)
000020  b510              PUSH     {r4,lr}
;;;56     {
;;;57     	CKRDY_IRQHandler_IRQ();
000022  f7fffffe          BL       CKRDY_IRQHandler_IRQ
;;;58     }
000026  bd10              POP      {r4,pc}
;;;59     
                          ENDP

                  LVD_IRQHandler PROC
;;;60     void LVD_IRQHandler(void)
000028  bf00              NOP      
                  |L1.42|
;;;61     {
;;;62     	while (1);
00002a  e7fe              B        |L1.42|
;;;63     }
;;;64     
                          ENDP

                  WDT_IRQHandler PROC
;;;65     void WDT_IRQHandler(void)
00002c  bf00              NOP      
                  |L1.46|
;;;66     {
;;;67     	while (1);
00002e  e7fe              B        |L1.46|
;;;68     }
;;;69     
                          ENDP

                  RTC_IRQHandler PROC
;;;70     void RTC_IRQHandler(void)
000030  bf00              NOP      
                  |L1.50|
;;;71     {
;;;72     	while (1);
000032  e7fe              B        |L1.50|
;;;73     }
;;;74     
                          ENDP

                  FLASH_IRQHandler PROC
;;;75     void FLASH_IRQHandler(void)
000034  bf00              NOP      
                  |L1.54|
;;;76     {
;;;77     	while (1);
000036  e7fe              B        |L1.54|
;;;78     }
;;;79     
                          ENDP

                  EVWUP_IRQHandler PROC
;;;80     void EVWUP_IRQHandler(void)
000038  bf00              NOP      
                  |L1.58|
;;;81     {
;;;82     	while (1);
00003a  e7fe              B        |L1.58|
;;;83     }
;;;84     
                          ENDP

                  LPWUP_POR_IRQHandler PROC
;;;85     void LPWUP_POR_IRQHandler(void)
00003c  bf00              NOP      
                  |L1.62|
;;;86     {
;;;87     	while (1);
00003e  e7fe              B        |L1.62|
;;;88     }
;;;89     
                          ENDP

                  EXTI0_1_2_3_IRQHandler PROC
;;;90     void EXTI0_1_2_3_IRQHandler(void)
000040  bf00              NOP      
                  |L1.66|
;;;91     {
;;;92     	while (1);
000042  e7fe              B        |L1.66|
;;;93     }
;;;94     
                          ENDP

                  EXTI4_5_6_7_IRQHandler PROC
;;;95     void EXTI4_5_6_7_IRQHandler(void)
000044  bf00              NOP      
                  |L1.70|
;;;96     {
;;;97     	while (1);
000046  e7fe              B        |L1.70|
;;;98     }
;;;99     
                          ENDP

                  EXTI8_9_10_11_IRQHandler PROC
;;;100    void EXTI8_9_10_11_IRQHandler(void)
000048  bf00              NOP      
                  |L1.74|
;;;101    {
;;;102    	while (1);
00004a  e7fe              B        |L1.74|
;;;103    }
;;;104    
                          ENDP

                  EXTI12_13_14_15_IRQHandler PROC
;;;105    void EXTI12_13_14_15_IRQHandler(void)
00004c  bf00              NOP      
                  |L1.78|
;;;106    {
;;;107    	while (1);
00004e  e7fe              B        |L1.78|
;;;108    }
;;;109    
                          ENDP

                  ADC_IRQHandler PROC
;;;110    void ADC_IRQHandler(void)
000050  bf00              NOP      
                  |L1.82|
;;;111    {
;;;112    	while (1);
000052  e7fe              B        |L1.82|
;;;113    }
;;;114    
                          ENDP

                  GPTM0_IRQHandler PROC
;;;117    extern void ir_rx_decode(void);
;;;118    void GPTM0_IRQHandler(void)
000054  b510              PUSH     {r4,lr}
;;;119    {
;;;120    	if(GPTM_GetFlagStatus(AM_GPTM0, GPTM_FLAG_CH0CC)==SET)
000056  2101              MOVS     r1,#1
000058  4825              LDR      r0,|L1.240|
00005a  f7fffffe          BL       GPTM_GetFlagStatus
00005e  2801              CMP      r0,#1
000060  d105              BNE      |L1.110|
;;;121    	{
;;;122    	//	if(GPIO_ReadInBit(AM_GPIOB,GPIO_PIN_5)==RESET)
;;;123    //		if(!(ir_rec(AM_IO_IR_REC_MIDDLE)))
;;;124    //	//	LED_Toggle(GREEN);
;;;125    //	  LED2_GPIO_PORT->RR = LED2_PIN;   //DebugÖ¸Ê¾LEDµÆ
;;;126    //		else
;;;127    //		LED2_GPIO_PORT->SRR = LED2_PIN;
;;;128    		ir_rx_capture_4khz();
000062  f7fffffe          BL       ir_rx_capture_4khz
;;;129    		GPTM_ClearFlag(AM_GPTM0, GPTM_FLAG_CH0CC);
000066  2101              MOVS     r1,#1
000068  4821              LDR      r0,|L1.240|
00006a  f7fffffe          BL       GPTM_ClearFlag
                  |L1.110|
;;;130    	}
;;;131    }
00006e  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  GPTM1_IRQHandler PROC
;;;133    void GPTM1_IRQHandler(void)
000070  b510              PUSH     {r4,lr}
;;;134    {
;;;135      if(GPTM_GetFlagStatus(AM_GPTM1, GPTM_FLAG_CH1CC)==SET)
000072  2102              MOVS     r1,#2
000074  481f              LDR      r0,|L1.244|
000076  f7fffffe          BL       GPTM_GetFlagStatus
00007a  2801              CMP      r0,#1
00007c  d105              BNE      |L1.138|
;;;136    	{
;;;137    		ir_rx_decode();
00007e  f7fffffe          BL       ir_rx_decode
;;;138    		GPTM_ClearFlag(AM_GPTM1, GPTM_FLAG_CH1CC);
000082  2102              MOVS     r1,#2
000084  481b              LDR      r0,|L1.244|
000086  f7fffffe          BL       GPTM_ClearFlag
                  |L1.138|
;;;139    	}
;;;140    }
00008a  bd10              POP      {r4,pc}
;;;141    
                          ENDP

                  GPTM2_IRQHandler PROC
;;;142    void GPTM2_IRQHandler(void)
00008c  bf00              NOP      
                  |L1.142|
;;;143    {
;;;144    	while (1);
00008e  e7fe              B        |L1.142|
;;;145    }
;;;146    
                          ENDP

                  GPTM3_IRQHandler PROC
;;;147    void GPTM3_IRQHandler(void)
000090  bf00              NOP      
                  |L1.146|
;;;148    {
;;;149    	while (1);
000092  e7fe              B        |L1.146|
;;;150    }
;;;151    
                          ENDP

                  I2C0_IRQHandler PROC
;;;152    void I2C0_IRQHandler(void)
000094  bf00              NOP      
                  |L1.150|
;;;153    {
;;;154    	while (1);
000096  e7fe              B        |L1.150|
;;;155    }
;;;156    
                          ENDP

                  SPI0_SPI1_IRQHandler PROC
;;;157    void SPI0_SPI1_IRQHandler(void)
000098  bf00              NOP      
                  |L1.154|
;;;158    {
;;;159    	while (1);
00009a  e7fe              B        |L1.154|
;;;160    }
;;;161    
                          ENDP

                  UART0_IRQHandler PROC
;;;162    void UART0_IRQHandler(void)
00009c  bf00              NOP      
                  |L1.158|
;;;163    {
;;;164    	while (1);	
00009e  e7fe              B        |L1.158|
;;;165    }
;;;166    
                          ENDP

                  UART1_IRQHandler PROC
;;;167    void UART1_IRQHandler(void)
0000a0  bf00              NOP      
                  |L1.162|
;;;168    {
;;;169    	while (1);	
0000a2  e7fe              B        |L1.162|
;;;170    }
;;;171    
                          ENDP

                  UART2_IRQHandler PROC
;;;172    void UART2_IRQHandler(void)
0000a4  bf00              NOP      
                  |L1.166|
;;;173    {
;;;174    	while (1);
0000a6  e7fe              B        |L1.166|
;;;175    }
;;;176    
                          ENDP

                  UART3_IRQHandler PROC
;;;177    void UART3_IRQHandler(void)
0000a8  bf00              NOP      
                  |L1.170|
;;;178    {
;;;179    	while (1);
0000aa  e7fe              B        |L1.170|
;;;180    }
;;;181    
                          ENDP

                  UART4_IRQHandler PROC
;;;182    void UART4_IRQHandler(void)
0000ac  b510              PUSH     {r4,lr}
;;;183    {
;;;184    //uint8_t ucTemp;
;;;185    	if(USART_GetLineStatus(AM_UART4, USART_LSR_RFDR) != RESET)
0000ae  2101              MOVS     r1,#1
0000b0  4811              LDR      r0,|L1.248|
0000b2  f7fffffe          BL       USART_GetLineStatus
0000b6  2800              CMP      r0,#0
0000b8  d007              BEQ      |L1.202|
;;;186    	{
;;;187    		USART_SendData(AM_UART4,USART_ReceiveData(AM_UART4));
0000ba  480f              LDR      r0,|L1.248|
0000bc  f7fffffe          BL       USART_ReceiveData
0000c0  4604              MOV      r4,r0
0000c2  4621              MOV      r1,r4
0000c4  480c              LDR      r0,|L1.248|
0000c6  f7fffffe          BL       USART_SendData
                  |L1.202|
;;;188    		//if(ucTemp == 'A')
;;;189    			//while (1);
;;;190    	}
;;;191    }
0000ca  bd10              POP      {r4,pc}
;;;192    
                          ENDP

                  UART5_IRQHandler PROC
;;;193    void UART5_IRQHandler(void)
0000cc  bf00              NOP      
                  |L1.206|
;;;194    {
;;;195    	while (1);
0000ce  e7fe              B        |L1.206|
;;;196    }
;;;197    
                          ENDP

                  PDMA_CH0_IRQHandler PROC
;;;198    void PDMA_CH0_IRQHandler(void)
0000d0  bf00              NOP      
                  |L1.210|
;;;199    {
;;;200    	while (1);
0000d2  e7fe              B        |L1.210|
;;;201    }
;;;202    
                          ENDP

                  PDMA_CH1_IRQHandler PROC
;;;203    void PDMA_CH1_IRQHandler(void)
0000d4  bf00              NOP      
                  |L1.214|
;;;204    {
;;;205    	while (1);
0000d6  e7fe              B        |L1.214|
;;;206    }
;;;207    
                          ENDP

                  PDMA_CH2_IRQHandler PROC
;;;208    void PDMA_CH2_IRQHandler(void)
0000d8  bf00              NOP      
                  |L1.218|
;;;209    {
;;;210    	while (1);
0000da  e7fe              B        |L1.218|
;;;211    }
;;;212    
                          ENDP

                  PDMA_CH3_IRQHandler PROC
;;;213    void PDMA_CH3_IRQHandler(void)
0000dc  bf00              NOP      
                  |L1.222|
;;;214    {
;;;215    	while (1);
0000de  e7fe              B        |L1.222|
;;;216    }
;;;217    
                          ENDP

                  PDMA_CH4_CH5IRQHandler PROC
;;;218    void PDMA_CH4_CH5IRQHandler(void)
0000e0  bf00              NOP      
                  |L1.226|
;;;219    {
;;;220    	while (1);
0000e2  e7fe              B        |L1.226|
;;;221    }
;;;222    
                          ENDP

                  PDMA_CH6_CH7_IRQHandler PROC
;;;223    void PDMA_CH6_CH7_IRQHandler(void)
0000e4  bf00              NOP      
                  |L1.230|
;;;224    {
;;;225    	while (1);
0000e6  e7fe              B        |L1.230|
;;;226    }
;;;227    
                          ENDP

                  COMP_IRQHandler PROC
;;;228    void COMP_IRQHandler(void)
0000e8  bf00              NOP      
                  |L1.234|
;;;229    {
;;;230    	while (1);
0000ea  e7fe              B        |L1.234|
;;;231    }
;;;232    
                          ENDP

                  CAN_IRQHandler PROC
;;;233    void CAN_IRQHandler(void)
0000ec  bf00              NOP      
                  |L1.238|
;;;234    {
;;;235    	while (1);
0000ee  e7fe              B        |L1.238|
;;;236    }
;;;237    
                          ENDP

                  |L1.240|
                          DCD      0x4006e000
                  |L1.244|
                          DCD      0x4006f000
                  |L1.248|
                          DCD      0x40002000

;*** Start embedded assembler ***

#line 1 "src\\exception.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_exception_c_bb8ca80c____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___11_exception_c_bb8ca80c____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_exception_c_bb8ca80c____REVSH|
#line 128
|__asm___11_exception_c_bb8ca80c____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
