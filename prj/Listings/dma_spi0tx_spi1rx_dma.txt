; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\dma_spi0tx_spi1rx_dma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\dma_spi0tx_spi1rx_dma.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\inc -I..\driver\inc -IF:\mcu\ForCustomer\Driver\prj\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=513 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\dma_spi0tx_spi1rx_dma.crf src\dma_spi0tx_spi1rx_dma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Dma_ch7_irq_handle PROC
;;;20     
;;;21     void Dma_ch7_irq_handle(void)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23     	AM_PDMA_TypeDef *pAM_PDMA = AM_PDMA;
000002  4c57              LDR      r4,|L1.352|
;;;24     	if( FLAG_SET == dma_get_status(TRAN_CPLT_INT,DMA_CH7) )
000004  2107              MOVS     r1,#7
000006  2003              MOVS     r0,#3
000008  f7fffffe          BL       dma_get_status
00000c  2801              CMP      r0,#1
00000e  d10e              BNE      |L1.46|
;;;25     	{
;;;26     		deinit_dma(DMA_CH6);
000010  2006              MOVS     r0,#6
000012  f7fffffe          BL       deinit_dma
;;;27     		deinit_dma(DMA_CH7);
000016  2007              MOVS     r0,#7
000018  f7fffffe          BL       deinit_dma
;;;28     		SPI_DeInit(AM_SPI0);
00001c  4851              LDR      r0,|L1.356|
00001e  f7fffffe          BL       SPI_DeInit
;;;29     		SPI_DeInit(AM_SPI1);
000022  4851              LDR      r0,|L1.360|
000024  f7fffffe          BL       SPI_DeInit
;;;30     		State[MdlSpi] = State_StartFinish;
000028  2002              MOVS     r0,#2
00002a  4950              LDR      r1,|L1.364|
00002c  7108              STRB     r0,[r1,#4]
                  |L1.46|
;;;31     	}
;;;32     	dma_clear_status(TRAN_CPLT_INT,DMA_CH6);	
00002e  2106              MOVS     r1,#6
000030  2003              MOVS     r0,#3
000032  f7fffffe          BL       dma_clear_status
;;;33     	dma_clear_status(TRAN_CPLT_INT,DMA_CH7);	
000036  2107              MOVS     r1,#7
000038  2003              MOVS     r0,#3
00003a  f7fffffe          BL       dma_clear_status
;;;34     }
00003e  bd10              POP      {r4,pc}
;;;35     
                          ENDP

                  CLK_ENABLE PROC
;;;36     void CLK_ENABLE(void)
000040  484b              LDR      r0,|L1.368|
;;;37     {
;;;38     	AM_CKCU_TypeDef * pCKCU= AM_CKCU;
;;;39       AM_RSTCU_TypeDef * pRSTCU=AM_RSTCU;
000042  494c              LDR      r1,|L1.372|
;;;40     	pCKCU->AHBCCR |=0x3FE8F5;               // clock gating		
000044  6a42              LDR      r2,[r0,#0x24]
000046  4b4c              LDR      r3,|L1.376|
000048  431a              ORRS     r2,r2,r3
00004a  6242              STR      r2,[r0,#0x24]
;;;41     	pCKCU->APBCCR0 |=0x107C513;             // clock gating	
00004c  6ac2              LDR      r2,[r0,#0x2c]
00004e  4b4b              LDR      r3,|L1.380|
000050  431a              ORRS     r2,r2,r3
000052  62c2              STR      r2,[r0,#0x2c]
;;;42     	pCKCU->APBCCR1 |=0xFF07077F;            // clock gating		
000054  6b02              LDR      r2,[r0,#0x30]
000056  4b4a              LDR      r3,|L1.384|
000058  431a              ORRS     r2,r2,r3
00005a  6302              STR      r2,[r0,#0x30]
;;;43     }
00005c  4770              BX       lr
;;;44     
                          ENDP

                  dma6_spi0tx_spi1rx_dma7_start PROC
;;;45     void dma6_spi0tx_spi1rx_dma7_start(void)
00005e  b570              PUSH     {r4-r6,lr}
;;;46     {   
;;;47     	AM_CKCU_TypeDef * pCKCU= AM_CKCU;	
000060  4d43              LDR      r5,|L1.368|
;;;48     	int i;	
;;;49     	
;;;50     	State[MdlSpi] = State_Continue;	
000062  2001              MOVS     r0,#1
000064  4941              LDR      r1,|L1.364|
000066  7108              STRB     r0,[r1,#4]
;;;51     
;;;52     //	CLK_ENABLE();
;;;53     	
;;;54     //	deinit_dma(DMA_CH6);
;;;55     	deinit_dma(DMA_CH7);
000068  2007              MOVS     r0,#7
00006a  f7fffffe          BL       deinit_dma
;;;56     //	  AM_CKCU->LPCR |= 1;                 //disable isolation cell
;;;57     	cpu_delay(40);
00006e  2028              MOVS     r0,#0x28
000070  f7fffffe          BL       cpu_delay
;;;58     	
;;;59     	for(i=0;i<256;i++)
000074  2400              MOVS     r4,#0
000076  e002              B        |L1.126|
                  |L1.120|
;;;60     	{
;;;61     		SPI0_Tx_buffer[i] = i;
000078  4942              LDR      r1,|L1.388|
00007a  550c              STRB     r4,[r1,r4]
00007c  1c64              ADDS     r4,r4,#1              ;59
                  |L1.126|
00007e  2cff              CMP      r4,#0xff              ;59
000080  ddfa              BLE      |L1.120|
;;;62     	}
;;;63     		
;;;64     //	for(i=0;i<256;i++)
;;;65     //	{
;;;66     //		SPI1_Tx_buffer[i] = 255-i;
;;;67     //	}
;;;68     	
;;;69     	AFIO_GPDConfig(AFIO_PIN_10|AFIO_PIN_11|AFIO_PIN_12|AFIO_PIN_13,AFIO_MODE_3); //SPI1
000082  2103              MOVS     r1,#3
000084  200f              MOVS     r0,#0xf
000086  0280              LSLS     r0,r0,#10
000088  f7fffffe          BL       AFIO_GPDConfig
;;;70     	AFIO_GPCConfig(AFIO_PIN_8|AFIO_PIN_9,AFIO_MODE_3); //SPI0
00008c  2103              MOVS     r1,#3
00008e  0208              LSLS     r0,r1,#8
000090  f7fffffe          BL       AFIO_GPCConfig
;;;71     	AFIO_GPDConfig(AFIO_PIN_0|AFIO_PIN_5,AFIO_MODE_3); //SPI0
000094  2103              MOVS     r1,#3
000096  2021              MOVS     r0,#0x21
000098  f7fffffe          BL       AFIO_GPDConfig
;;;72     	
;;;73     //	AM_PDMACH4->CR |= 0x020581;          //DMACH0, SPI0_Rx, medium priority,Dwidth=8,chen=1
;;;74     	AM_PDMACH6->CR |= 0x020421;          //DMACH0, SPI0_Tx, Low priority,Dwidth=8,chen=1
00009c  4830              LDR      r0,|L1.352|
00009e  3080              ADDS     r0,r0,#0x80
0000a0  6900              LDR      r0,[r0,#0x10]
0000a2  4939              LDR      r1,|L1.392|
0000a4  4308              ORRS     r0,r0,r1
0000a6  492e              LDR      r1,|L1.352|
0000a8  3180              ADDS     r1,r1,#0x80
0000aa  6108              STR      r0,[r1,#0x10]
;;;75     //	AM_PDMACH7->CR |= 0x290581;          //DMACH0, SPI1_Rx, medium priority,Dwidth=8,chen=1
;;;76     	AM_PDMACH7->CR |= 0x290781;          //DMACH0, SPI1_Rx, very high priority,Dwidth=8,chen=1
0000ac  4608              MOV      r0,r1
0000ae  6a80              LDR      r0,[r0,#0x28]
0000b0  4936              LDR      r1,|L1.396|
0000b2  4308              ORRS     r0,r0,r1
0000b4  492a              LDR      r1,|L1.352|
0000b6  3180              ADDS     r1,r1,#0x80
0000b8  6288              STR      r0,[r1,#0x28]
;;;77     //	AM_PDMACH7->CR |= 0x050621;          //DMACH0, SPI1_Tx, High priority,Dwidth=8,chen=1
;;;78     	
;;;79     //	AM_PDMACH4->DADR = (uint32_t)(SPI0_Rx_buffer);
;;;80     //	AM_PDMACH4->SADR = 0x40004010;
;;;81     	AM_PDMACH6->DADR = 0x40004010;
0000ba  482a              LDR      r0,|L1.356|
0000bc  3010              ADDS     r0,r0,#0x10
0000be  6188              STR      r0,[r1,#0x18]
;;;82     	AM_PDMACH6->SADR = (uint32_t)(SPI0_Tx_buffer);
0000c0  4830              LDR      r0,|L1.388|
0000c2  6148              STR      r0,[r1,#0x14]
;;;83     	AM_PDMACH7->DADR = (uint32_t)(SPI1_Rx_buffer);
0000c4  4832              LDR      r0,|L1.400|
0000c6  6308              STR      r0,[r1,#0x30]
;;;84     	AM_PDMACH7->SADR = 0x40005010;
0000c8  4827              LDR      r0,|L1.360|
0000ca  3010              ADDS     r0,r0,#0x10
0000cc  62c8              STR      r0,[r1,#0x2c]
;;;85     //	AM_PDMACH7->DADR = 0x40044010;
;;;86     //	AM_PDMACH7->SADR = (uint32_t)(SPI1_Tx_buffer);
;;;87     	
;;;88     //	AM_PDMACH4->TSR = 0x200008;
;;;89     //	AM_PDMACH6->TSR = 0x200008;
;;;90     //	AM_PDMACH7->TSR = 0x200008;
;;;91     	AM_PDMACH6->TSR = 0x400004;
0000ce  4831              LDR      r0,|L1.404|
0000d0  6208              STR      r0,[r1,#0x20]
;;;92     	AM_PDMACH7->TSR = 0x400004;
0000d2  6388              STR      r0,[r1,#0x38]
;;;93     //	AM_PDMACH7->TSR = 0x200008;
;;;94     
;;;95     	AM_PDMA->IER1 |= (1<<8)|(1<<5);			 //pdma ch7 cplt int, glob int enable
0000d4  4830              LDR      r0,|L1.408|
0000d6  6b40              LDR      r0,[r0,#0x34]
0000d8  21ff              MOVS     r1,#0xff
0000da  3121              ADDS     r1,r1,#0x21
0000dc  4308              ORRS     r0,r0,r1
0000de  492e              LDR      r1,|L1.408|
0000e0  6348              STR      r0,[r1,#0x34]
;;;96     	NVIC_EnableIRQ(PDMACH6_CH7_IRQn);	
0000e2  201d              MOVS     r0,#0x1d
0000e4  2101              MOVS     r1,#1
0000e6  4081              LSLS     r1,r1,r0
0000e8  4a2c              LDR      r2,|L1.412|
0000ea  6011              STR      r1,[r2,#0]
0000ec  bf00              NOP      
;;;97     	
;;;98     	AM_SPI0->CR1 |= 0x6108;              //Master mode, Set SEL as hardware mode, MSB first, SEL is active low, CPOL/CPHA=00, Data Length 8 bits 	
0000ee  481d              LDR      r0,|L1.356|
0000f0  6840              LDR      r0,[r0,#4]
0000f2  492b              LDR      r1,|L1.416|
0000f4  4308              ORRS     r0,r0,r1
0000f6  491b              LDR      r1,|L1.356|
0000f8  6048              STR      r0,[r1,#4]
;;;99     	AM_SPI0->CPR = 23;                    //SPI CLK = 24M/24 = 1M
0000fa  2017              MOVS     r0,#0x17
0000fc  60c8              STR      r0,[r1,#0xc]
;;;100    //	AM_SPI0->FCR |= 0x480;               //enable FIFO,Tx Trigger level=0, Rx Trigger level=8
;;;101    	AM_SPI0->FCR |= 0x440;               //enable FIFO,Tx Trigger level=0, Rx Trigger level=4
0000fe  4608              MOV      r0,r1
000100  6980              LDR      r0,[r0,#0x18]
000102  2111              MOVS     r1,#0x11
000104  0189              LSLS     r1,r1,#6
000106  4308              ORRS     r0,r0,r1
000108  4916              LDR      r1,|L1.356|
00010a  6188              STR      r0,[r1,#0x18]
;;;102    	
;;;103    //	AM_SPI1->CR1 |= 0x108;               //Slave mode, MSB first, SEL is active low, CPOL/CPHA=00, Data Length 8 bits
;;;104    //	AM_SPI1->FCR |= 0x480;               //enable FIFO,Tx Trigger level=0, Rx Trigger level=8
;;;105    	AM_SPI1->CR1 |= 0x108;               //Slave mode, MSB first, SEL is active low, CPOL/CPHA=00, Data Length 8 bits
00010c  4816              LDR      r0,|L1.360|
00010e  6840              LDR      r0,[r0,#4]
000110  21ff              MOVS     r1,#0xff
000112  3109              ADDS     r1,r1,#9
000114  4308              ORRS     r0,r0,r1
000116  4914              LDR      r1,|L1.360|
000118  6048              STR      r0,[r1,#4]
;;;106    	AM_SPI1->FCR |= 0x444;               //enable FIFO,Tx Trigger level=4, Rx Trigger level=4
00011a  4608              MOV      r0,r1
00011c  6980              LDR      r0,[r0,#0x18]
00011e  4921              LDR      r1,|L1.420|
000120  4308              ORRS     r0,r0,r1
000122  4911              LDR      r1,|L1.360|
000124  6188              STR      r0,[r1,#0x18]
;;;107    	
;;;108    //enable SPI and DMA request
;;;109    	AM_SPI1->CR0 |= 7;
000126  4608              MOV      r0,r1
000128  6800              LDR      r0,[r0,#0]
00012a  2107              MOVS     r1,#7
00012c  4308              ORRS     r0,r0,r1
00012e  490e              LDR      r1,|L1.360|
000130  6008              STR      r0,[r1,#0]
;;;110    	AM_SPI0->CR0 |= 0xF;
000132  480c              LDR      r0,|L1.356|
000134  6800              LDR      r0,[r0,#0]
000136  210f              MOVS     r1,#0xf
000138  4308              ORRS     r0,r0,r1
00013a  490a              LDR      r1,|L1.356|
00013c  6008              STR      r0,[r1,#0]
;;;111    
;;;112    // Wait for transmission completed
;;;113    //	while((AM_PDMACH4->CTSR & 0xFFFF0000) != 0);
;;;114    //	while((AM_PDMACH6->CTSR & 0xFFFF0000) != 0);
;;;115    //	while((AM_PDMACH7->CTSR & 0xFFFF0000) != 0);
;;;116    //	while((AM_PDMACH7->CTSR & 0xFFFF0000) != 0);
;;;117    	
;;;118    
;;;119    /*	
;;;120    	for (i=0;i<256;i++)
;;;121    	{
;;;122    		if (SPI1_Tx_buffer[i] != SPI0_Rx_buffer[i])
;;;123    		{
;;;124    			fail();
;;;125    			while(1);
;;;126    		}
;;;127    	} 
;;;128    */
;;;129    }
00013e  bd70              POP      {r4-r6,pc}
;;;130    
                          ENDP

                  dma6_spi0tx_spi1rx_dma7_ok PROC
;;;131    FLAG_PASS_FAIL dma6_spi0tx_spi1rx_dma7_ok(void)
000140  2100              MOVS     r1,#0
;;;132    {
;;;133    	u32 i;
;;;134    	
;;;135    	for (i=0;i<256;i++)
000142  e008              B        |L1.342|
                  |L1.324|
;;;136    	{
;;;137    		if (SPI0_Tx_buffer[i] != SPI1_Rx_buffer[i])
000144  480f              LDR      r0,|L1.388|
000146  5c40              LDRB     r0,[r0,r1]
000148  4a11              LDR      r2,|L1.400|
00014a  5c52              LDRB     r2,[r2,r1]
00014c  4290              CMP      r0,r2
00014e  d001              BEQ      |L1.340|
;;;138    		{
;;;139    			return FLAG_FAIL;
000150  2001              MOVS     r0,#1
                  |L1.338|
;;;140    		}
;;;141    	}	
;;;142    	return FLAG_PASS;
;;;143    }
000152  4770              BX       lr
                  |L1.340|
000154  1c49              ADDS     r1,r1,#1              ;135
                  |L1.342|
000156  29ff              CMP      r1,#0xff              ;135
000158  d9f4              BLS      |L1.324|
00015a  2000              MOVS     r0,#0                 ;142
00015c  e7f9              B        |L1.338|
                          ENDP

00015e  0000              DCW      0x0000
                  |L1.352|
                          DCD      0x40090000
                  |L1.356|
                          DCD      0x40004000
                  |L1.360|
                          DCD      0x40005000
                  |L1.364|
                          DCD      State
                  |L1.368|
                          DCD      0x40088000
                  |L1.372|
                          DCD      0x40088100
                  |L1.376|
                          DCD      0x003fe8f5
                  |L1.380|
                          DCD      0x0107c513
                  |L1.384|
                          DCD      0xff07077f
                  |L1.388|
                          DCD      SPI0_Tx_buffer
                  |L1.392|
                          DCD      0x00020421
                  |L1.396|
                          DCD      0x00290781
                  |L1.400|
                          DCD      SPI1_Rx_buffer
                  |L1.404|
                          DCD      0x00400004
                  |L1.408|
                          DCD      0x40090100
                  |L1.412|
                          DCD      0xe000e100
                  |L1.416|
                          DCD      0x00006108
                  |L1.420|
                          DCD      0x00000444

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  SPI0_Tx_buffer
                          %        256
                  SPI1_Rx_buffer
                          %        256

;*** Start embedded assembler ***

#line 1 "src\\dma_spi0tx_spi1rx_dma.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___23_dma_spi0tx_spi1rx_dma_c_b364bfe5____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___23_dma_spi0tx_spi1rx_dma_c_b364bfe5____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___23_dma_spi0tx_spi1rx_dma_c_b364bfe5____REVSH|
#line 128
|__asm___23_dma_spi0tx_spi1rx_dma_c_b364bfe5____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
