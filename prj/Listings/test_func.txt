; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\test_func.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\test_func.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\test_func.crf User\2.4G\Test_Func.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SPI_Bank1_Write_Reg PROC
;;;14     **************************************************/        
;;;15     void SPI_Bank1_Write_Reg(UINT8 reg, UINT8 *pBuf)    
000000  b570              PUSH     {r4-r6,lr}
;;;16     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;17     	SwitchCFG(1);
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       SwitchCFG
;;;18     	SPI_Write_Buf(reg,pBuf,4);
00000c  2204              MOVS     r2,#4
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       SPI_Write_Buf
;;;19     	SwitchCFG(0);
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       SwitchCFG
;;;20     }
00001c  bd70              POP      {r4-r6,pc}
;;;21     
                          ENDP

                  SPI_Bank1_Read_Reg PROC
;;;27     **************************************************/ 
;;;28     void SPI_Bank1_Read_Reg(UINT8 reg, UINT8 *pBuf)
00001e  b570              PUSH     {r4-r6,lr}
;;;29     {
000020  4604              MOV      r4,r0
000022  460d              MOV      r5,r1
;;;30     	SwitchCFG(1);
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       SwitchCFG
;;;31     	SPI_Read_Buf(reg,pBuf,4);
00002a  2204              MOVS     r2,#4
00002c  4629              MOV      r1,r5
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       SPI_Read_Buf
;;;32     	SwitchCFG(0);
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       SwitchCFG
;;;33     }
00003a  bd70              POP      {r4-r6,pc}
;;;34     
                          ENDP

                  Carrier_Test PROC
;;;47     **************************************************/
;;;48     void Carrier_Test(UINT8 b_enable)
00003c  b538              PUSH     {r3-r5,lr}
;;;49     {
00003e  4605              MOV      r5,r0
;;;50     	UINT8 j;
;;;51     	UINT8 WriteArr[4];
;;;52     
;;;53     	SwitchToTxMode();
000040  f7fffffe          BL       SwitchToTxMode
;;;54     
;;;55     	for(j=0;j<4;j++)
000044  2400              MOVS     r4,#0
000046  e007              B        |L1.88|
                  |L1.72|
;;;56     		WriteArr[j]=(Bank1_Reg0_13[0]>>(8*(j) ) )&0xff;
000048  48c3              LDR      r0,|L1.856|
00004a  6800              LDR      r0,[r0,#0]  ; Bank1_Reg0_13
00004c  00e1              LSLS     r1,r4,#3
00004e  40c8              LSRS     r0,r0,r1
000050  4669              MOV      r1,sp
000052  5508              STRB     r0,[r1,r4]
000054  1c60              ADDS     r0,r4,#1              ;55
000056  b2c4              UXTB     r4,r0                 ;55
                  |L1.88|
000058  2c04              CMP      r4,#4                 ;55
00005a  dbf5              BLT      |L1.72|
;;;57     
;;;58     	if(b_enable)
00005c  2d00              CMP      r5,#0
00005e  d038              BEQ      |L1.210|
;;;59     	{
;;;60     		if(WriteArr[3]&0x02 ) //bit 1
000060  4668              MOV      r0,sp
000062  78c0              LDRB     r0,[r0,#3]
000064  2102              MOVS     r1,#2
000066  4008              ANDS     r0,r0,r1
000068  2800              CMP      r0,#0
00006a  d006              BEQ      |L1.122|
;;;61     		{
;;;62     			WriteArr[3]=WriteArr[3]&0xfd;
00006c  4669              MOV      r1,sp
00006e  78c8              LDRB     r0,[r1,#3]
000070  21fd              MOVS     r1,#0xfd
000072  4008              ANDS     r0,r0,r1
000074  4669              MOV      r1,sp
000076  70c8              STRB     r0,[r1,#3]
000078  e005              B        |L1.134|
                  |L1.122|
;;;63     		}
;;;64     		else
;;;65     		{
;;;66     			WriteArr[3]=WriteArr[3]|0x02;
00007a  4669              MOV      r1,sp
00007c  78c8              LDRB     r0,[r1,#3]
00007e  2102              MOVS     r1,#2
000080  4308              ORRS     r0,r0,r1
000082  4669              MOV      r1,sp
000084  70c8              STRB     r0,[r1,#3]
                  |L1.134|
;;;67     		}
;;;68     
;;;69     		if(WriteArr[3]&0x08 ) //bit 3
000086  4668              MOV      r0,sp
000088  78c0              LDRB     r0,[r0,#3]
00008a  2108              MOVS     r1,#8
00008c  4008              ANDS     r0,r0,r1
00008e  2800              CMP      r0,#0
000090  d006              BEQ      |L1.160|
;;;70     		{
;;;71     			WriteArr[3]=WriteArr[3]&0xf7;
000092  4669              MOV      r1,sp
000094  78c8              LDRB     r0,[r1,#3]
000096  21f7              MOVS     r1,#0xf7
000098  4008              ANDS     r0,r0,r1
00009a  4669              MOV      r1,sp
00009c  70c8              STRB     r0,[r1,#3]
00009e  e005              B        |L1.172|
                  |L1.160|
;;;72     		}
;;;73     		else
;;;74     		{
;;;75     			WriteArr[3]=WriteArr[3]|0x08;
0000a0  4669              MOV      r1,sp
0000a2  78c8              LDRB     r0,[r1,#3]
0000a4  2108              MOVS     r1,#8
0000a6  4308              ORRS     r0,r0,r1
0000a8  4669              MOV      r1,sp
0000aa  70c8              STRB     r0,[r1,#3]
                  |L1.172|
;;;76     		}
;;;77     
;;;78     		if(WriteArr[3]&0x20 ) //bit 5
0000ac  4668              MOV      r0,sp
0000ae  78c0              LDRB     r0,[r0,#3]
0000b0  2120              MOVS     r1,#0x20
0000b2  4008              ANDS     r0,r0,r1
0000b4  2800              CMP      r0,#0
0000b6  d006              BEQ      |L1.198|
;;;79     		{
;;;80     			WriteArr[3]=WriteArr[3]&0xdf;
0000b8  4669              MOV      r1,sp
0000ba  78c8              LDRB     r0,[r1,#3]
0000bc  21df              MOVS     r1,#0xdf
0000be  4008              ANDS     r0,r0,r1
0000c0  4669              MOV      r1,sp
0000c2  70c8              STRB     r0,[r1,#3]
0000c4  e005              B        |L1.210|
                  |L1.198|
;;;81     		}
;;;82     		else
;;;83     		{
;;;84     			WriteArr[3]=WriteArr[3]|0x20;
0000c6  4669              MOV      r1,sp
0000c8  78c8              LDRB     r0,[r1,#3]
0000ca  2120              MOVS     r1,#0x20
0000cc  4308              ORRS     r0,r0,r1
0000ce  4669              MOV      r1,sp
0000d0  70c8              STRB     r0,[r1,#3]
                  |L1.210|
;;;85     		}
;;;86     
;;;87     	}
;;;88     
;;;89     //write REG4
;;;90     	SPI_Bank1_Write_Reg((WRITE_REG|4),WriteArr);
0000d2  4669              MOV      r1,sp
0000d4  2024              MOVS     r0,#0x24
0000d6  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;91     
;;;92     }
0000da  bd38              POP      {r3-r5,pc}
;;;93     
                          ENDP

                  BER_Test PROC
;;;109    **************************************************/
;;;110    void BER_Test(UINT16 ms,UINT32* received_total_bits,UINT32* received_error_bits)
0000dc  b57c              PUSH     {r2-r6,lr}
;;;111    {
0000de  4606              MOV      r6,r0
0000e0  460c              MOV      r4,r1
0000e2  4615              MOV      r5,r2
;;;112    	UINT8 WriteArr[5];
;;;113    
;;;114    ////////////////////////////////////////////////////////
;;;115    //change pipe0 address
;;;116    ////////////////////////////////////////////////////////
;;;117    	WriteArr[4]=0x02;
0000e4  2102              MOVS     r1,#2
0000e6  4668              MOV      r0,sp
0000e8  7101              STRB     r1,[r0,#4]
;;;118    	WriteArr[3]=0x95;
0000ea  2195              MOVS     r1,#0x95
0000ec  70c1              STRB     r1,[r0,#3]
;;;119    	WriteArr[2]=0xe5;
0000ee  21e5              MOVS     r1,#0xe5
0000f0  7081              STRB     r1,[r0,#2]
;;;120    	WriteArr[1]=0xdc;
0000f2  21dc              MOVS     r1,#0xdc
0000f4  7041              STRB     r1,[r0,#1]
;;;121    	WriteArr[0]=0x0e;
0000f6  210e              MOVS     r1,#0xe
0000f8  7001              STRB     r1,[r0,#0]
;;;122    
;;;123    	SPI_Write_Buf((WRITE_REG|10),WriteArr,5);//change RX0 address for BER test
0000fa  2205              MOVS     r2,#5
0000fc  4669              MOV      r1,sp
0000fe  202a              MOVS     r0,#0x2a
000100  f7fffffe          BL       SPI_Write_Buf
;;;124    
;;;125    	SwitchToRxMode();
000104  f7fffffe          BL       SwitchToRxMode
;;;126    
;;;127    ////////////////////////////////////////////////////////
;;;128    //start BER receive,set REG12<5>=1 start
;;;129    ////////////////////////////////////////////////////////
;;;130    	SPI_Bank1_Read_Reg(12,&(WriteArr[0]));
000108  4669              MOV      r1,sp
00010a  200c              MOVS     r0,#0xc
00010c  f7fffffe          BL       SPI_Bank1_Read_Reg
;;;131    	WriteArr[0]=WriteArr[0]|0x20;
000110  4668              MOV      r0,sp
000112  7801              LDRB     r1,[r0,#0]
000114  2020              MOVS     r0,#0x20
000116  4301              ORRS     r1,r1,r0
000118  4668              MOV      r0,sp
00011a  7001              STRB     r1,[r0,#0]
;;;132    	SPI_Bank1_Write_Reg((WRITE_REG|12),&(WriteArr[0]));
00011c  4669              MOV      r1,sp
00011e  202c              MOVS     r0,#0x2c
000120  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;133    
;;;134    	DelayMs(ms);//delay ms for hardware receive
000124  4630              MOV      r0,r6
000126  f7fffffe          BL       DelayMs
;;;135    
;;;136    ////////////////////////////////////////////////////////
;;;137    //Hold BER value for read,set REG12<6>=1, 
;;;138    ////////////////////////////////////////////////////////
;;;139    	SPI_Bank1_Read_Reg(12,&(WriteArr[0]));
00012a  4669              MOV      r1,sp
00012c  200c              MOVS     r0,#0xc
00012e  f7fffffe          BL       SPI_Bank1_Read_Reg
;;;140    	WriteArr[0]=WriteArr[0]|0x40;
000132  4668              MOV      r0,sp
000134  7801              LDRB     r1,[r0,#0]
000136  2040              MOVS     r0,#0x40
000138  4301              ORRS     r1,r1,r0
00013a  4668              MOV      r0,sp
00013c  7001              STRB     r1,[r0,#0]
;;;141    	SPI_Bank1_Write_Reg((WRITE_REG|12),&(WriteArr[0]));
00013e  4669              MOV      r1,sp
000140  202c              MOVS     r0,#0x2c
000142  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;142    
;;;143    //read BER
;;;144    	SPI_Bank1_Read_Reg(0,&(WriteArr[0]));//read REG0
000146  4669              MOV      r1,sp
000148  2000              MOVS     r0,#0
00014a  f7fffffe          BL       SPI_Bank1_Read_Reg
;;;145    	
;;;146    	(*received_total_bits)=WriteArr[3];
00014e  4668              MOV      r0,sp
000150  78c0              LDRB     r0,[r0,#3]
000152  6020              STR      r0,[r4,#0]
;;;147    	(*received_total_bits)=	(*received_total_bits)<<8;
000154  6820              LDR      r0,[r4,#0]
000156  0200              LSLS     r0,r0,#8
000158  6020              STR      r0,[r4,#0]
;;;148    	(*received_total_bits)|=WriteArr[2];
00015a  4668              MOV      r0,sp
00015c  7880              LDRB     r0,[r0,#2]
00015e  6821              LDR      r1,[r4,#0]
000160  4301              ORRS     r1,r1,r0
000162  6021              STR      r1,[r4,#0]
;;;149    	(*received_total_bits)=	(*received_total_bits)<<8;
000164  6820              LDR      r0,[r4,#0]
000166  0200              LSLS     r0,r0,#8
000168  6020              STR      r0,[r4,#0]
;;;150    	(*received_total_bits)|=WriteArr[1];
00016a  4668              MOV      r0,sp
00016c  7840              LDRB     r0,[r0,#1]
00016e  6821              LDR      r1,[r4,#0]
000170  4301              ORRS     r1,r1,r0
000172  6021              STR      r1,[r4,#0]
;;;151    	(*received_total_bits)=	(*received_total_bits)<<8;
000174  6820              LDR      r0,[r4,#0]
000176  0200              LSLS     r0,r0,#8
000178  6020              STR      r0,[r4,#0]
;;;152    	(*received_total_bits)|=WriteArr[0];
00017a  4668              MOV      r0,sp
00017c  7800              LDRB     r0,[r0,#0]
00017e  6821              LDR      r1,[r4,#0]
000180  4301              ORRS     r1,r1,r0
000182  6021              STR      r1,[r4,#0]
;;;153    
;;;154    	SPI_Bank1_Read_Reg(1,&(WriteArr[0]));//read REG1
000184  4669              MOV      r1,sp
000186  2001              MOVS     r0,#1
000188  f7fffffe          BL       SPI_Bank1_Read_Reg
;;;155    	(*received_error_bits)=WriteArr[3];
00018c  4668              MOV      r0,sp
00018e  78c0              LDRB     r0,[r0,#3]
000190  6028              STR      r0,[r5,#0]
;;;156    	(*received_error_bits)=	(*received_error_bits)<<8;
000192  6828              LDR      r0,[r5,#0]
000194  0200              LSLS     r0,r0,#8
000196  6028              STR      r0,[r5,#0]
;;;157    	(*received_error_bits)|=WriteArr[2];
000198  4668              MOV      r0,sp
00019a  7880              LDRB     r0,[r0,#2]
00019c  6829              LDR      r1,[r5,#0]
00019e  4301              ORRS     r1,r1,r0
0001a0  6029              STR      r1,[r5,#0]
;;;158    	(*received_error_bits)=	(*received_error_bits)<<8;
0001a2  6828              LDR      r0,[r5,#0]
0001a4  0200              LSLS     r0,r0,#8
0001a6  6028              STR      r0,[r5,#0]
;;;159    	(*received_error_bits)|=WriteArr[1];
0001a8  4668              MOV      r0,sp
0001aa  7840              LDRB     r0,[r0,#1]
0001ac  6829              LDR      r1,[r5,#0]
0001ae  4301              ORRS     r1,r1,r0
0001b0  6029              STR      r1,[r5,#0]
;;;160    	(*received_error_bits)=	(*received_error_bits)<<8;
0001b2  6828              LDR      r0,[r5,#0]
0001b4  0200              LSLS     r0,r0,#8
0001b6  6028              STR      r0,[r5,#0]
;;;161    	(*received_error_bits)|=WriteArr[0];
0001b8  4668              MOV      r0,sp
0001ba  7800              LDRB     r0,[r0,#0]
0001bc  6829              LDR      r1,[r5,#0]
0001be  4301              ORRS     r1,r1,r0
0001c0  6029              STR      r1,[r5,#0]
;;;162    
;;;163    ////////////////////////////////////////////////////////
;;;164    //stop BER receive,,clear REG12<5>=0 stop
;;;165    ////////////////////////////////////////////////////////
;;;166    	SPI_Bank1_Read_Reg(12,&(WriteArr[0]));
0001c2  4669              MOV      r1,sp
0001c4  200c              MOVS     r0,#0xc
0001c6  f7fffffe          BL       SPI_Bank1_Read_Reg
;;;167    	WriteArr[0]=WriteArr[0]&0xdf;
0001ca  4668              MOV      r0,sp
0001cc  7801              LDRB     r1,[r0,#0]
0001ce  20df              MOVS     r0,#0xdf
0001d0  4001              ANDS     r1,r1,r0
0001d2  4668              MOV      r0,sp
0001d4  7001              STRB     r1,[r0,#0]
;;;168    	SPI_Bank1_Write_Reg((WRITE_REG|12),&(WriteArr[0]));
0001d6  4669              MOV      r1,sp
0001d8  202c              MOVS     r0,#0x2c
0001da  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;169    
;;;170    ////////////////////////////////////////////////////////
;;;171    //not Hold BER value,set REG12<6>=0
;;;172    ////////////////////////////////////////////////////////
;;;173    	SPI_Bank1_Read_Reg(12,&(WriteArr[0]));
0001de  4669              MOV      r1,sp
0001e0  200c              MOVS     r0,#0xc
0001e2  f7fffffe          BL       SPI_Bank1_Read_Reg
;;;174    	WriteArr[0]=WriteArr[0]&0xbf;
0001e6  4668              MOV      r0,sp
0001e8  7800              LDRB     r0,[r0,#0]
0001ea  21bf              MOVS     r1,#0xbf
0001ec  4008              ANDS     r0,r0,r1
0001ee  4669              MOV      r1,sp
0001f0  7008              STRB     r0,[r1,#0]
;;;175    	SPI_Bank1_Write_Reg((WRITE_REG|12),&(WriteArr[0]));
0001f2  202c              MOVS     r0,#0x2c
0001f4  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;176    
;;;177    //restore RX0 address
;;;178    	SPI_Write_Buf((WRITE_REG|10),RX0_Address,5);//restore RX0 address
0001f8  2205              MOVS     r2,#5
0001fa  4958              LDR      r1,|L1.860|
0001fc  202a              MOVS     r0,#0x2a
0001fe  f7fffffe          BL       SPI_Write_Buf
;;;179    
;;;180    }
000202  bd7c              POP      {r2-r6,pc}
;;;181    
                          ENDP

                  Set_LowPower_Mode PROC
;;;188    **************************************************/
;;;189    void Set_LowPower_Mode()
000204  b538              PUSH     {r3-r5,lr}
;;;190    {
;;;191    
;;;192    	UINT8 j;
;;;193    	UINT8 WriteArr[4];
;;;194    	for(j=0;j<4;j++)
000206  2400              MOVS     r4,#0
000208  e007              B        |L1.538|
                  |L1.522|
;;;195    		WriteArr[j]=(Bank1_Reg0_13[0]>>(8*(j) ) )&0xff;
00020a  4853              LDR      r0,|L1.856|
00020c  6800              LDR      r0,[r0,#0]  ; Bank1_Reg0_13
00020e  00e1              LSLS     r1,r4,#3
000210  40c8              LSRS     r0,r0,r1
000212  4669              MOV      r1,sp
000214  5508              STRB     r0,[r1,r4]
000216  1c60              ADDS     r0,r4,#1              ;194
000218  b2c4              UXTB     r4,r0                 ;194
                  |L1.538|
00021a  2c04              CMP      r4,#4                 ;194
00021c  dbf5              BLT      |L1.522|
;;;196    
;;;197    	WriteArr[1]=WriteArr[1]&0xef;  //REG4<20>
00021e  4669              MOV      r1,sp
000220  7848              LDRB     r0,[r1,#1]
000222  21ef              MOVS     r1,#0xef
000224  4008              ANDS     r0,r0,r1
000226  4669              MOV      r1,sp
000228  7048              STRB     r0,[r1,#1]
;;;198    
;;;199    //write REG4
;;;200    	SPI_Bank1_Write_Reg(WRITE_REG|0x04,WriteArr);
00022a  2024              MOVS     r0,#0x24
00022c  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;201    }
000230  bd38              POP      {r3-r5,pc}
;;;202    
                          ENDP

                  Set_Sen_Mode PROC
;;;212    **************************************************/
;;;213    void Set_Sen_Mode(UINT8 b_enable)
000232  b538              PUSH     {r3-r5,lr}
;;;214    {
000234  4605              MOV      r5,r0
;;;215    
;;;216    	UINT8 j;
;;;217    	UINT8 WriteArr[4];
;;;218    	for(j=0;j<4;j++)
000236  2400              MOVS     r4,#0
000238  e007              B        |L1.586|
                  |L1.570|
;;;219    		WriteArr[j]=(Bank1_Reg0_13[0]>>(8*(j) ) )&0xff;
00023a  4847              LDR      r0,|L1.856|
00023c  6800              LDR      r0,[r0,#0]  ; Bank1_Reg0_13
00023e  00e1              LSLS     r1,r4,#3
000240  40c8              LSRS     r0,r0,r1
000242  4669              MOV      r1,sp
000244  5508              STRB     r0,[r1,r4]
000246  1c60              ADDS     r0,r4,#1              ;218
000248  b2c4              UXTB     r4,r0                 ;218
                  |L1.586|
00024a  2c04              CMP      r4,#4                 ;218
00024c  dbf5              BLT      |L1.570|
;;;220    
;;;221    	if (b_enable)
00024e  2d00              CMP      r5,#0
000250  d006              BEQ      |L1.608|
;;;222    		WriteArr[1]=WriteArr[1]|0x20;  //REG4<21>
000252  4669              MOV      r1,sp
000254  7848              LDRB     r0,[r1,#1]
000256  2120              MOVS     r1,#0x20
000258  4308              ORRS     r0,r0,r1
00025a  4669              MOV      r1,sp
00025c  7048              STRB     r0,[r1,#1]
00025e  e005              B        |L1.620|
                  |L1.608|
;;;223    	else
;;;224    		WriteArr[1]=WriteArr[1]&0xdf;  //REG4<21>
000260  4669              MOV      r1,sp
000262  7848              LDRB     r0,[r1,#1]
000264  21df              MOVS     r1,#0xdf
000266  4008              ANDS     r0,r0,r1
000268  4669              MOV      r1,sp
00026a  7048              STRB     r0,[r1,#1]
                  |L1.620|
;;;225    
;;;226    //write REG4
;;;227    	SPI_Bank1_Write_Reg(WRITE_REG|0x04,WriteArr);
00026c  4669              MOV      r1,sp
00026e  2024              MOVS     r0,#0x24
000270  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;228    }
000274  bd38              POP      {r3-r5,pc}
;;;229    /**************************************************
                          ENDP

                  Close_CD_Detect PROC
;;;234    **************************************************/
;;;235    void Close_CD_Detect()
000276  b538              PUSH     {r3-r5,lr}
;;;236    {
;;;237    	UINT8 j;
;;;238    	UINT8 WriteArr[4];
;;;239    
;;;240    	for(j=0;j<4;j++)
000278  2400              MOVS     r4,#0
00027a  e007              B        |L1.652|
                  |L1.636|
;;;241    		WriteArr[j]=(Bank1_Reg0_13[1]>>(8*(j) ) )&0xff;
00027c  4836              LDR      r0,|L1.856|
00027e  6840              LDR      r0,[r0,#4]  ; Bank1_Reg0_13
000280  00e1              LSLS     r1,r4,#3
000282  40c8              LSRS     r0,r0,r1
000284  4669              MOV      r1,sp
000286  5508              STRB     r0,[r1,r4]
000288  1c60              ADDS     r0,r4,#1              ;240
00028a  b2c4              UXTB     r4,r0                 ;240
                  |L1.652|
00028c  2c04              CMP      r4,#4                 ;240
00028e  dbf5              BLT      |L1.636|
;;;242    
;;;243    	WriteArr[1]=WriteArr[1]|0x04; //REG5<18>
000290  4669              MOV      r1,sp
000292  7848              LDRB     r0,[r1,#1]
000294  2104              MOVS     r1,#4
000296  4308              ORRS     r0,r0,r1
000298  4669              MOV      r1,sp
00029a  7048              STRB     r0,[r1,#1]
;;;244    
;;;245    //write REG5
;;;246    	SPI_Bank1_Write_Reg(WRITE_REG|0x05,WriteArr);
00029c  2025              MOVS     r0,#0x25
00029e  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;247    }
0002a2  bd38              POP      {r3-r5,pc}
;;;248    
                          ENDP

                  PN9_TX PROC
;;;257    **************************************************/
;;;258    void PN9_TX(UINT8 b_enable)
0002a4  b538              PUSH     {r3-r5,lr}
;;;259    {
0002a6  4604              MOV      r4,r0
;;;260    	UINT8 WriteArr[4];
;;;261    	
;;;262    	if (b_enable)//start send PN9
0002a8  2c00              CMP      r4,#0
0002aa  d026              BEQ      |L1.762|
;;;263    	{
;;;264    		WriteArr[0] = 0x0C;
0002ac  210c              MOVS     r1,#0xc
0002ae  4668              MOV      r0,sp
0002b0  7001              STRB     r1,[r0,#0]
;;;265    		WriteArr[1] = 0x4B;	
0002b2  214b              MOVS     r1,#0x4b
0002b4  7041              STRB     r1,[r0,#1]
;;;266    		WriteArr[2] = 0x00;
0002b6  2100              MOVS     r1,#0
0002b8  7081              STRB     r1,[r0,#2]
;;;267    		WriteArr[3] = 0x00;
0002ba  70c1              STRB     r1,[r0,#3]
;;;268    		SPI_Bank1_Write_Reg(WRITE_REG|0x01,WriteArr); //write bank1_reg1
0002bc  4669              MOV      r1,sp
0002be  2021              MOVS     r0,#0x21
0002c0  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;269    		
;;;270    		WriteArr[0] = 0xA0;
0002c4  21a0              MOVS     r1,#0xa0
0002c6  4668              MOV      r0,sp
0002c8  7001              STRB     r1,[r0,#0]
;;;271    		WriteArr[1] = 0xFC;	
0002ca  21fc              MOVS     r1,#0xfc
0002cc  7041              STRB     r1,[r0,#1]
;;;272    		WriteArr[2] = 0x8C;
0002ce  218c              MOVS     r1,#0x8c
0002d0  7081              STRB     r1,[r0,#2]
;;;273    		WriteArr[3] = 0x02;
0002d2  2102              MOVS     r1,#2
0002d4  70c1              STRB     r1,[r0,#3]
;;;274    		SPI_Bank1_Write_Reg(WRITE_REG|0x02,WriteArr); //write bank1_reg2
0002d6  4669              MOV      r1,sp
0002d8  2022              MOVS     r0,#0x22
0002da  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;275    		
;;;276    		WriteArr[0] = 0x10;
0002de  2110              MOVS     r1,#0x10
0002e0  4668              MOV      r0,sp
0002e2  7001              STRB     r1,[r0,#0]
;;;277    		WriteArr[1] = 0x12;	
0002e4  2112              MOVS     r1,#0x12
0002e6  7041              STRB     r1,[r0,#1]
;;;278    		WriteArr[2] = 0x73;
0002e8  2173              MOVS     r1,#0x73
0002ea  7081              STRB     r1,[r0,#2]
;;;279    		WriteArr[3] = 0x00;
0002ec  2100              MOVS     r1,#0
0002ee  70c1              STRB     r1,[r0,#3]
;;;280    		SPI_Bank1_Write_Reg(WRITE_REG|0x0C,WriteArr); //write bank1_reg12
0002f0  4669              MOV      r1,sp
0002f2  202c              MOVS     r0,#0x2c
0002f4  f7fffffe          BL       SPI_Bank1_Write_Reg
0002f8  e025              B        |L1.838|
                  |L1.762|
;;;281    	}
;;;282    	else//stop send PN9
;;;283    	{
;;;284    		WriteArr[0] = 0xC0;
0002fa  21c0              MOVS     r1,#0xc0
0002fc  4668              MOV      r0,sp
0002fe  7001              STRB     r1,[r0,#0]
;;;285    		WriteArr[1] = 0x4B;	
000300  214b              MOVS     r1,#0x4b
000302  7041              STRB     r1,[r0,#1]
;;;286    		WriteArr[2] = 0x00;
000304  2100              MOVS     r1,#0
000306  7081              STRB     r1,[r0,#2]
;;;287    		WriteArr[3] = 0x00;
000308  70c1              STRB     r1,[r0,#3]
;;;288    		SPI_Bank1_Write_Reg(WRITE_REG|0x01,WriteArr); //write bank1_reg1
00030a  4669              MOV      r1,sp
00030c  2021              MOVS     r0,#0x21
00030e  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;289    		
;;;290    		WriteArr[0] = 0xD0;
000312  21d0              MOVS     r1,#0xd0
000314  4668              MOV      r0,sp
000316  7001              STRB     r1,[r0,#0]
;;;291    		WriteArr[1] = 0xFC;	
000318  21fc              MOVS     r1,#0xfc
00031a  7041              STRB     r1,[r0,#1]
;;;292    		WriteArr[2] = 0x8C;
00031c  218c              MOVS     r1,#0x8c
00031e  7081              STRB     r1,[r0,#2]
;;;293    		WriteArr[3] = 0x02;
000320  2102              MOVS     r1,#2
000322  70c1              STRB     r1,[r0,#3]
;;;294    		SPI_Bank1_Write_Reg(WRITE_REG|0x02,WriteArr); //write bank1_reg2
000324  4669              MOV      r1,sp
000326  2022              MOVS     r0,#0x22
000328  f7fffffe          BL       SPI_Bank1_Write_Reg
;;;295    		
;;;296    		WriteArr[0] = 0x00;
00032c  2100              MOVS     r1,#0
00032e  4668              MOV      r0,sp
000330  7001              STRB     r1,[r0,#0]
;;;297    		WriteArr[1] = 0x12;	
000332  2112              MOVS     r1,#0x12
000334  7041              STRB     r1,[r0,#1]
;;;298    		WriteArr[2] = 0x73;
000336  2173              MOVS     r1,#0x73
000338  7081              STRB     r1,[r0,#2]
;;;299    		WriteArr[3] = 0x00;
00033a  2100              MOVS     r1,#0
00033c  70c1              STRB     r1,[r0,#3]
;;;300    		SPI_Bank1_Write_Reg(WRITE_REG|0x0C,WriteArr); //write bank1_reg12		
00033e  4669              MOV      r1,sp
000340  202c              MOVS     r0,#0x2c
000342  f7fffffe          BL       SPI_Bank1_Write_Reg
                  |L1.838|
;;;301    	}
;;;302    	
;;;303    }
000346  bd38              POP      {r3-r5,pc}
;;;304    
                          ENDP

                  Get_Chip_ID PROC
;;;311    **************************************************/
;;;312    UINT8 Get_Chip_ID(void)
000348  b508              PUSH     {r3,lr}
;;;313    {
;;;314    	UINT8 ReadArr[4];
;;;315    	SPI_Bank1_Read_Reg(0x08,ReadArr);
00034a  4669              MOV      r1,sp
00034c  2008              MOVS     r0,#8
00034e  f7fffffe          BL       SPI_Bank1_Read_Reg
;;;316    	return ReadArr[0];
000352  4668              MOV      r0,sp
000354  7800              LDRB     r0,[r0,#0]
;;;317    }
000356  bd08              POP      {r3,pc}
;;;318    
                          ENDP

                  |L1.856|
                          DCD      Bank1_Reg0_13
                  |L1.860|
                          DCD      RX0_Address

;*** Start embedded assembler ***

#line 1 "User\\2.4G\\Test_Func.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_Test_Func_c_a6fb8314____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___11_Test_Func_c_a6fb8314____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_Test_Func_c_a6fb8314____REVSH|
#line 128
|__asm___11_Test_Func_c_a6fb8314____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
