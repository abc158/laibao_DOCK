; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\bk2425_txrx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\bk2425_txrx.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\bk2425_txrx.crf User\2.4G\BK2425_TxRx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  Send_Packet PROC
;;;13     **************************************************/
;;;14     void Send_Packet(UINT8 type,UINT8* pbuf,UINT8 len)
000000  b5f8              PUSH     {r3-r7,lr}
;;;15     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;16     	UINT8 fifo_sta;
;;;17     
;;;18     	fifo_sta=SPI_Read_Reg(FIFO_STATUS);	// read register FIFO_STATUS's value
000008  2017              MOVS     r0,#0x17
00000a  f7fffffe          BL       SPI_Read_Reg
00000e  4607              MOV      r7,r0
;;;19     
;;;20     	if((fifo_sta&FIFO_STATUS_TX_FULL)==0)//if not full, send data  
000010  2020              MOVS     r0,#0x20
000012  4038              ANDS     r0,r0,r7
000014  2800              CMP      r0,#0
000016  d104              BNE      |L1.34|
;;;21     	  	SPI_Write_Buf(type, pbuf, len); // Writes data to buffer  A0,B0,A8
000018  4632              MOV      r2,r6
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SPI_Write_Buf
                  |L1.34|
;;;22     	  	 	
;;;23     }
000022  bdf8              POP      {r3-r7,pc}
;;;24     
                          ENDP

                  Receive_Packet PROC
;;;33     **************************************************/
;;;34     void Receive_Packet()
000024  b5f0              PUSH     {r4-r7,lr}
;;;35     {
000026  b089              SUB      sp,sp,#0x24
;;;36     	UINT8 len,sta,fifo_sta,i;
;;;37     	UINT8 rx_buf[MAX_PACKET_LEN];
;;;38     
;;;39     	sta=SPI_Read_Reg(STATUS);	// read register STATUS's value
000028  2007              MOVS     r0,#7
00002a  f7fffffe          BL       SPI_Read_Reg
00002e  4607              MOV      r7,r0
;;;40     	if(STATUS_RX_DR)				// if receive data ready (RX_DR) interrupt
;;;41     	{
;;;42     		do
000030  bf00              NOP      
                  |L1.50|
;;;43     		{
;;;44     			len=SPI_Read_Reg(R_RX_PL_WID_CMD);	// read len
000032  2060              MOVS     r0,#0x60
000034  f7fffffe          BL       SPI_Read_Reg
000038  4604              MOV      r4,r0
;;;45     
;;;46     			if(len<=MAX_PACKET_LEN)
00003a  2c20              CMP      r4,#0x20
00003c  dc13              BGT      |L1.102|
;;;47     			{
;;;48     				SPI_Read_Buf(RD_RX_PLOAD,rx_buf,len);// read receive payload from RX_FIFO buffer
00003e  4622              MOV      r2,r4
000040  a901              ADD      r1,sp,#4
000042  2061              MOVS     r0,#0x61
000044  f7fffffe          BL       SPI_Read_Buf
;;;49     				printf("\r\nPacket:");
000048  a010              ADR      r0,|L1.140|
00004a  f7fffffe          BL       __2printf
;;;50     				for(i=0;i<len;i++)
00004e  2600              MOVS     r6,#0
000050  e006              B        |L1.96|
                  |L1.82|
;;;51     				{
;;;52     					printf("%x;",(int)rx_buf[i]);
000052  a801              ADD      r0,sp,#4
000054  5d81              LDRB     r1,[r0,r6]
000056  a010              ADR      r0,|L1.152|
000058  f7fffffe          BL       __2printf
00005c  1c70              ADDS     r0,r6,#1              ;50
00005e  b2c6              UXTB     r6,r0                 ;50
                  |L1.96|
000060  42a6              CMP      r6,r4                 ;50
000062  dbf6              BLT      |L1.82|
000064  e003              B        |L1.110|
                  |L1.102|
;;;53     				}
;;;54     			}
;;;55     			else
;;;56     			{
;;;57     				SPI_Write_Reg(FLUSH_RX,0);//flush Rx
000066  2100              MOVS     r1,#0
000068  20e2              MOVS     r0,#0xe2
00006a  f7fffffe          BL       SPI_Write_Reg
                  |L1.110|
;;;58     			}
;;;59     
;;;60     			fifo_sta=SPI_Read_Reg(FIFO_STATUS);	// read register FIFO_STATUS's value
00006e  2017              MOVS     r0,#0x17
000070  f7fffffe          BL       SPI_Read_Reg
000074  4605              MOV      r5,r0
;;;61     						
;;;62     		}while((fifo_sta&FIFO_STATUS_RX_EMPTY)==0); //while not empty
000076  07e8              LSLS     r0,r5,#31
000078  0fc0              LSRS     r0,r0,#31
00007a  2800              CMP      r0,#0
00007c  d0d9              BEQ      |L1.50|
;;;63     	}
;;;64     
;;;65     	SPI_Write_Reg(WRITE_REG|STATUS,sta);// clear RX_DR or TX_DS or MAX_RT interrupt flag
00007e  4639              MOV      r1,r7
000080  2027              MOVS     r0,#0x27
000082  f7fffffe          BL       SPI_Write_Reg
;;;66     	
;;;67     }
000086  b009              ADD      sp,sp,#0x24
000088  bdf0              POP      {r4-r7,pc}
;;;68     
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
00008c  0d0a5061          DCB      "\r\nPacket:",0
000090  636b6574
000094  3a00    
000096  00                DCB      0
000097  00                DCB      0
                  |L1.152|
000098  25783b00          DCB      "%x;",0

;*** Start embedded assembler ***

#line 1 "User\\2.4G\\BK2425_TxRx.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_BK2425_TxRx_c_22a7a835____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___13_BK2425_TxRx_c_22a7a835____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_BK2425_TxRx_c_22a7a835____REVSH|
#line 128
|__asm___13_BK2425_TxRx_c_22a7a835____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
