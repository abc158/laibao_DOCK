; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\can_cpu.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\can_cpu.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\inc -I..\driver\inc -IF:\mcu\ForCustomer\Driver\prj\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=513 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\can_cpu.crf src\can_cpu.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  can_start PROC
;;;10     
;;;11     int can_start(void)
000000  b570              PUSH     {r4-r6,lr}
;;;12     {
;;;13     	int i,j;
;;;14     	unsigned char data[13];
;;;15     	//static unsigned int CHIPID;
;;;16     	cpu_delay(10);
000002  200a              MOVS     r0,#0xa
000004  f7fffffe          BL       cpu_delay
;;;17     	State[MdlCan] = State_StartFinish;
000008  2002              MOVS     r0,#2
00000a  4950              LDR      r1,|L1.332|
00000c  70c8              STRB     r0,[r1,#3]
;;;18     	
;;;19     	AFIO_GPCConfig(AFIO_PIN_14|AFIO_PIN_15,AFIO_MODE_12);
00000e  210c              MOVS     r1,#0xc
000010  0308              LSLS     r0,r1,#12
000012  f7fffffe          BL       AFIO_GPCConfig
;;;20     //	AM_AFIO->GPCCFGR[1] = 0xCC000000;   //AFIO12,PC14-15
;;;21     	AM_CAN->OCR = 3;                    //2-Normal output, 3-clock output
000016  2003              MOVS     r0,#3
000018  494d              LDR      r1,|L1.336|
00001a  6208              STR      r0,[r1,#0x20]
;;;22     	AM_CAN->MOD |= 0x0C;                //Single filter, Self-Test Mode
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]
000020  210c              MOVS     r1,#0xc
000022  4308              ORRS     r0,r0,r1
000024  494a              LDR      r1,|L1.336|
000026  6008              STR      r0,[r1,#0]
;;;23     	AM_CAN->TRFDI_ACAMR[0] = 0xAA;      //ID.28-21
000028  20aa              MOVS     r0,#0xaa
00002a  4949              LDR      r1,|L1.336|
00002c  3140              ADDS     r1,r1,#0x40
00002e  6008              STR      r0,[r1,#0]
;;;24     	AM_CAN->TRFDI_ACAMR[1] = 0x40;      //ID.20-18=010;RTR=0, data frame
000030  2140              MOVS     r1,#0x40
000032  4847              LDR      r0,|L1.336|
000034  6441              STR      r1,[r0,#0x44]
;;;25     	                                    //SFF,TRFDI_ACAMR[3:2] don't care
;;;26     	AM_CAN->TRFDI_ACAMR[4] = 0x00;      //All match
000036  2100              MOVS     r1,#0
000038  6501              STR      r1,[r0,#0x50]
;;;27     	AM_CAN->TRFDI_ACAMR[5] = 0x00;      //All match
00003a  6541              STR      r1,[r0,#0x54]
;;;28     	AM_CAN->TRFDI_ACAMR[6] = 0xFF;      //Data byte don't care
00003c  21ff              MOVS     r1,#0xff
00003e  6581              STR      r1,[r0,#0x58]
;;;29     	AM_CAN->TRFDI_ACAMR[7] = 0xFF;      //Data byte don't care
000040  65c1              STR      r1,[r0,#0x5c]
;;;30     	
;;;31     	AM_CAN->BTR0 = 0x41;                //SJW=2; TQ=2*2/24M ??
000042  2041              MOVS     r0,#0x41
000044  4942              LDR      r1,|L1.336|
000046  6188              STR      r0,[r1,#0x18]
;;;32     	AM_CAN->BTR1 = 0x36;                //Sample once; TSEG1=7, TSEG2=4, Bit Time=12TQ=48/24M
000048  2036              MOVS     r0,#0x36
00004a  61c8              STR      r0,[r1,#0x1c]
;;;33     	
;;;34     	AM_CAN->MOD &= 0xFE;                //Release Reset mode
00004c  4608              MOV      r0,r1
00004e  6800              LDR      r0,[r0,#0]
000050  21fe              MOVS     r1,#0xfe
000052  4008              ANDS     r0,r0,r1
000054  493e              LDR      r1,|L1.336|
000056  6008              STR      r0,[r1,#0]
;;;35     	
;;;36     	
;;;37     	while((AM_CAN->SR & 0x04) == 0);    //0-Transmit buffer locked
000058  bf00              NOP      
                  |L1.90|
00005a  483d              LDR      r0,|L1.336|
00005c  6880              LDR      r0,[r0,#8]
00005e  2104              MOVS     r1,#4
000060  4008              ANDS     r0,r0,r1
000062  2800              CMP      r0,#0
000064  d0f9              BEQ      |L1.90|
;;;38     	AM_CAN->TRFDI_ACAMR[0] = 0x08;      //FF=0, Standard frame; RTR=0, data frame; Data length=8
000066  2008              MOVS     r0,#8
000068  4939              LDR      r1,|L1.336|
00006a  3140              ADDS     r1,r1,#0x40
00006c  6008              STR      r0,[r1,#0]
;;;39     	AM_CAN->TRFDI_ACAMR[1] = 0xAA;      //ID.28-21
00006e  21aa              MOVS     r1,#0xaa
000070  4837              LDR      r0,|L1.336|
000072  6441              STR      r1,[r0,#0x44]
;;;40     	AM_CAN->TRFDI_ACAMR[2] = 0x40;      //ID.20-18=010;RTR=0
000074  2140              MOVS     r1,#0x40
000076  6481              STR      r1,[r0,#0x48]
;;;41     	
;;;42     	for(j=0;j<5;j++)
000078  2500              MOVS     r5,#0
00007a  e01a              B        |L1.178|
                  |L1.124|
;;;43     	{	
;;;44         while((AM_CAN->SR & 0x04) == 0);    //0-Transmit buffer locked		
00007c  bf00              NOP      
                  |L1.126|
00007e  4834              LDR      r0,|L1.336|
000080  6880              LDR      r0,[r0,#8]
000082  2104              MOVS     r1,#4
000084  4008              ANDS     r0,r0,r1
000086  2800              CMP      r0,#0
000088  d0f9              BEQ      |L1.126|
;;;45     		for(i=0;i<8;i++)
00008a  2400              MOVS     r4,#0
00008c  e008              B        |L1.160|
                  |L1.142|
;;;46     		{
;;;47     			AM_CAN->TRFDI_ACAMR[3+i] = (i<<4)+i+j; //data
00008e  0120              LSLS     r0,r4,#4
000090  1900              ADDS     r0,r0,r4
000092  1942              ADDS     r2,r0,r5
000094  482e              LDR      r0,|L1.336|
000096  3040              ADDS     r0,r0,#0x40
000098  1ce1              ADDS     r1,r4,#3
00009a  0089              LSLS     r1,r1,#2
00009c  5042              STR      r2,[r0,r1]
00009e  1c64              ADDS     r4,r4,#1              ;45
                  |L1.160|
0000a0  2c08              CMP      r4,#8                 ;45
0000a2  dbf4              BLT      |L1.142|
;;;48     		}
;;;49     		
;;;50     		AM_CAN->CMR |= 0x10;                //Issue Self-Reception CMD
0000a4  482a              LDR      r0,|L1.336|
0000a6  6840              LDR      r0,[r0,#4]
0000a8  2110              MOVS     r1,#0x10
0000aa  4308              ORRS     r0,r0,r1
0000ac  4928              LDR      r1,|L1.336|
0000ae  6048              STR      r0,[r1,#4]
0000b0  1c6d              ADDS     r5,r5,#1              ;42
                  |L1.178|
0000b2  2d05              CMP      r5,#5                 ;42
0000b4  dbe2              BLT      |L1.124|
;;;51       }
;;;52     	
;;;53     	while((AM_CAN->SR & 0x08) == 0);    //Wait for transmit completed
0000b6  bf00              NOP      
                  |L1.184|
0000b8  4825              LDR      r0,|L1.336|
0000ba  6880              LDR      r0,[r0,#8]
0000bc  2108              MOVS     r1,#8
0000be  4008              ANDS     r0,r0,r1
0000c0  2800              CMP      r0,#0
0000c2  d0f9              BEQ      |L1.184|
;;;54     }
0000c4  bd70              POP      {r4-r6,pc}
;;;55     
                          ENDP

                  can_ok PROC
;;;56     FLAG_PASS_FAIL can_ok(void)
0000c6  b57f              PUSH     {r0-r6,lr}
;;;57     {
;;;58     	int i,j;
;;;59     	unsigned char data[13];
;;;60     	
;;;61     	while((AM_CAN->SR & 0x01) == 0);
0000c8  bf00              NOP      
                  |L1.202|
0000ca  4821              LDR      r0,|L1.336|
0000cc  6880              LDR      r0,[r0,#8]
0000ce  07c0              LSLS     r0,r0,#31
0000d0  0fc0              LSRS     r0,r0,#31
0000d2  2800              CMP      r0,#0
0000d4  d0f9              BEQ      |L1.202|
;;;62     	j = 0;
0000d6  2500              MOVS     r5,#0
;;;63     	while((AM_CAN->SR & 0x01) != 0)
0000d8  e030              B        |L1.316|
                  |L1.218|
;;;64     	{
;;;65     		for(i=0;i<11;i++)
0000da  2400              MOVS     r4,#0
0000dc  e025              B        |L1.298|
                  |L1.222|
;;;66     		{
;;;67     			if(i<3)
0000de  2c03              CMP      r4,#3
0000e0  da10              BGE      |L1.260|
;;;68     			{
;;;69     				data[i] = AM_CAN->TRFDI_ACAMR[i];
0000e2  481b              LDR      r0,|L1.336|
0000e4  3040              ADDS     r0,r0,#0x40
0000e6  00a1              LSLS     r1,r4,#2
0000e8  5840              LDR      r0,[r0,r1]
0000ea  4669              MOV      r1,sp
0000ec  5508              STRB     r0,[r1,r4]
;;;70     				if(data[i] != AM_CAN->TXBUF[i])
0000ee  4819              LDR      r0,|L1.340|
0000f0  00a1              LSLS     r1,r4,#2
0000f2  5840              LDR      r0,[r0,r1]
0000f4  4669              MOV      r1,sp
0000f6  5d09              LDRB     r1,[r1,r4]
0000f8  4288              CMP      r0,r1
0000fa  d015              BEQ      |L1.296|
;;;71     				{
;;;72     					fail();
0000fc  f7fffffe          BL       fail
;;;73     					while(1);
000100  bf00              NOP      
                  |L1.258|
000102  e7fe              B        |L1.258|
                  |L1.260|
;;;74     				}
;;;75     			}
;;;76     			else
;;;77     			{
;;;78     				data[i] = AM_CAN->TRFDI_ACAMR[i];
000104  4812              LDR      r0,|L1.336|
000106  3040              ADDS     r0,r0,#0x40
000108  00a1              LSLS     r1,r4,#2
00010a  5840              LDR      r0,[r0,r1]
00010c  4669              MOV      r1,sp
00010e  5508              STRB     r0,[r1,r4]
;;;79     				if(data[i] != (((i-3)<<4)+(i-3)+j))
000110  1ee0              SUBS     r0,r4,#3
000112  0101              LSLS     r1,r0,#4
000114  1808              ADDS     r0,r1,r0
000116  1940              ADDS     r0,r0,r5
000118  4669              MOV      r1,sp
00011a  5d09              LDRB     r1,[r1,r4]
00011c  4288              CMP      r0,r1
00011e  d003              BEQ      |L1.296|
;;;80     				{
;;;81     					fail();
000120  f7fffffe          BL       fail
;;;82     					while(1);
000124  bf00              NOP      
                  |L1.294|
000126  e7fe              B        |L1.294|
                  |L1.296|
000128  1c64              ADDS     r4,r4,#1              ;65
                  |L1.298|
00012a  2c0b              CMP      r4,#0xb               ;65
00012c  dbd7              BLT      |L1.222|
;;;83     				}				
;;;84     			}
;;;85     		}
;;;86     		AM_CAN->CMR |= 4;                   //Release reveive buffer
00012e  4808              LDR      r0,|L1.336|
000130  6840              LDR      r0,[r0,#4]
000132  2104              MOVS     r1,#4
000134  4308              ORRS     r0,r0,r1
000136  4906              LDR      r1,|L1.336|
000138  6048              STR      r0,[r1,#4]
;;;87     	  j++;
00013a  1c6d              ADDS     r5,r5,#1
                  |L1.316|
00013c  4804              LDR      r0,|L1.336|
00013e  6880              LDR      r0,[r0,#8]            ;63
000140  07c0              LSLS     r0,r0,#31             ;63
000142  0fc0              LSRS     r0,r0,#31             ;63
000144  2800              CMP      r0,#0                 ;63
000146  d1c8              BNE      |L1.218|
;;;88       }
;;;89     	
;;;90     }
000148  b004              ADD      sp,sp,#0x10
00014a  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.332|
                          DCD      State
                  |L1.336|
                          DCD      0x40098000
                  |L1.340|
                          DCD      0x40098180

;*** Start embedded assembler ***

#line 1 "src\\can_cpu.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_can_cpu_c_e0ac26e2____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___9_can_cpu_c_e0ac26e2____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_can_cpu_c_e0ac26e2____REVSH|
#line 128
|__asm___9_can_cpu_c_e0ac26e2____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
