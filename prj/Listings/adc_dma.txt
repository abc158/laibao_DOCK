; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\adc_dma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\adc_dma.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\inc -I..\driver\inc -IF:\mcu\ForCustomer\Driver\prj\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=513 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\adc_dma.crf src\adc_dma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  adc_dma1_gptm0_interrupt_req PROC
;;;23     
;;;24     void adc_dma1_gptm0_interrupt_req(void)
000000  b510              PUSH     {r4,lr}
;;;25     {
;;;26     	u16 i;
;;;27     	
;;;28     	if( FLAG_SET == dma_get_status(TRAN_CPLT_INT,DMA_CH1) )
000002  2101              MOVS     r1,#1
000004  2003              MOVS     r0,#3
000006  f7fffffe          BL       dma_get_status
00000a  2801              CMP      r0,#1
00000c  d112              BNE      |L1.52|
;;;29     	{
;;;30     /*		for(i=0;i<17;i++)
;;;31     		{
;;;32     			BufAdcDataAll[17*Cnt1+i] = BufAdcData[i];
;;;33     		}
;;;34     		Cnt1++;
;;;35     		if(Cnt1 == 8)*/
;;;36     		{
;;;37     			FlagAdcDmaFinish1 = SET;
00000e  494d              LDR      r1,|L1.324|
000010  8008              STRH     r0,[r1,#0]
;;;38     			DMA_EnaCmd(DMA_CH1,DISABLE);
000012  2100              MOVS     r1,#0
000014  f7fffffe          BL       DMA_EnaCmd
;;;39     			GPTM_DeInit(AM_GPTM0);
000018  484b              LDR      r0,|L1.328|
00001a  f7fffffe          BL       GPTM_DeInit
;;;40     			ADC_DeInit();
00001e  f7fffffe          BL       ADC_DeInit
;;;41     			deinit_dma(DMA_CH1);
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       deinit_dma
;;;42     			Cnt1 = 0;
000028  2000              MOVS     r0,#0
00002a  4948              LDR      r1,|L1.332|
00002c  8008              STRH     r0,[r1,#0]
;;;43     			State[MdlAdc] = State_StartFinish;
00002e  2002              MOVS     r0,#2
000030  4947              LDR      r1,|L1.336|
000032  7008              STRB     r0,[r1,#0]
                  |L1.52|
;;;44     		}
;;;45     
;;;46     	}
;;;47     	dma_clear_status(TRAN_CPLT_INT,DMA_CH1);
000034  2101              MOVS     r1,#1
000036  2003              MOVS     r0,#3
000038  f7fffffe          BL       dma_clear_status
;;;48     	GPTM_ClearFlag(AM_GPTM0,GPTM_FLAG_UEV);
00003c  21ff              MOVS     r1,#0xff
00003e  3101              ADDS     r1,#1
000040  4841              LDR      r0,|L1.328|
000042  f7fffffe          BL       GPTM_ClearFlag
;;;49     }
000046  bd10              POP      {r4,pc}
;;;50     
                          ENDP

                  adc_dma1_gptm0_start PROC
;;;51     void adc_dma1_gptm0_start(void)
000048  b510              PUSH     {r4,lr}
;;;52     {
00004a  b08e              SUB      sp,sp,#0x38
;;;53     	GPTM_TimeBaseInitTypeDef TimeBaseInit;
;;;54     	uint32_t tmp1,i;
;;;55     	DMA_InitTypeDef DmaInitStruct;
;;;56     	u8 ListAdcChn[18] = {ADC_CH_17, ADC_CH_16, \
00004c  2214              MOVS     r2,#0x14
00004e  a141              ADR      r1,|L1.340|
000050  4668              MOV      r0,sp
000052  f7fffffe          BL       __aeabi_memcpy4
;;;57     		ADC_CH_15, ADC_CH_14, ADC_CH_13, ADC_CH_12, ADC_CH_11, ADC_CH_10, ADC_CH_9, ADC_CH_8, \
;;;58     		ADC_CH_7, ADC_CH_6, ADC_CH_5, ADC_CH_4, ADC_CH_3, ADC_CH_2, ADC_CH_1, ADC_CH_0};	
;;;59     	GPTM_OutputInitTypeDef OutInit;
;;;60     	u16 ValAdc[3][18],ValTmp, ValTmp1;
;;;61     	s16 j;
;;;62     
;;;63     	AFIO_GPAConfig(AFIO_PIN_0|AFIO_PIN_1|AFIO_PIN_2|AFIO_PIN_3|AFIO_PIN_4|AFIO_PIN_5|AFIO_PIN_6|AFIO_PIN_7|AFIO_PIN_8|AFIO_PIN_9|AFIO_PIN_10|AFIO_PIN_11|AFIO_PIN_12|AFIO_PIN_15,AFIO_MODE_2);		
000056  2102              MOVS     r1,#2
000058  4843              LDR      r0,|L1.360|
00005a  f7fffffe          BL       AFIO_GPAConfig
;;;64     		
;;;65     		
;;;66     	State[MdlAdc] = State_Continue;
00005e  2001              MOVS     r0,#1
000060  493b              LDR      r1,|L1.336|
000062  7008              STRB     r0,[r1,#0]
;;;67     		
;;;68     	ADC_Reset();
000064  f7fffffe          BL       ADC_Reset
;;;69     	ADC_AlignConfig(AlignRight);
000068  2000              MOVS     r0,#0
00006a  f7fffffe          BL       ADC_AlignConfig
;;;70     	ADC_RegularGroupConfig(ONE_SHOT_MODE,18,0);		
00006e  2200              MOVS     r2,#0
000070  2112              MOVS     r1,#0x12
000072  4610              MOV      r0,r2
000074  f7fffffe          BL       ADC_RegularGroupConfig
;;;71     	for(i=0;i<18;i++)
000078  2400              MOVS     r4,#0
00007a  e006              B        |L1.138|
                  |L1.124|
;;;72     	{
;;;73     		ADC_RegularChannelConfig(ListAdcChn[i],i,0);
00007c  b2e1              UXTB     r1,r4
00007e  466a              MOV      r2,sp
000080  5d10              LDRB     r0,[r2,r4]
000082  2200              MOVS     r2,#0
000084  f7fffffe          BL       ADC_RegularChannelConfig
000088  1c64              ADDS     r4,r4,#1              ;71
                  |L1.138|
00008a  2c12              CMP      r4,#0x12              ;71
00008c  d3f6              BCC      |L1.124|
;;;74     	}
;;;75     	ADC_RegularTrigConfig(ADC_TRIG_GPTM0_MTO);	
00008e  2001              MOVS     r0,#1
000090  0780              LSLS     r0,r0,#30
000092  f7fffffe          BL       ADC_RegularTrigConfig
;;;76     	ADC_PDMAConfig(ADC_PDMA_REGULAR_CYCLE,ENABLE);
000096  2101              MOVS     r1,#1
000098  2004              MOVS     r0,#4
00009a  f7fffffe          BL       ADC_PDMAConfig
;;;77     	
;;;78     // dma1 configure
;;;79     	deinit_dma(DMA_CH1);
00009e  2001              MOVS     r0,#1
0000a0  f7fffffe          BL       deinit_dma
;;;80     	DmaInitStruct.HardTrigSrc = DMA_HARDTRIG_SRC_ADC;
0000a4  2100              MOVS     r1,#0
0000a6  4668              MOV      r0,sp
0000a8  7501              STRB     r1,[r0,#0x14]
;;;81     	DmaInitStruct.AutoReload = ENABLE;
0000aa  2101              MOVS     r1,#1
0000ac  7541              STRB     r1,[r0,#0x15]
;;;82     	DmaInitStruct.DataWidth = DATA_WIDTH_32BIT;
0000ae  2102              MOVS     r1,#2
0000b0  7701              STRB     r1,[r0,#0x1c]
;;;83     	DmaInitStruct.AddrFix = DISABLE;
0000b2  2100              MOVS     r1,#0
0000b4  7581              STRB     r1,[r0,#0x16]
;;;84     	DmaInitStruct.SrcAddrMode = LINEAR;
0000b6  7601              STRB     r1,[r0,#0x18]
;;;85     	DmaInitStruct.SrcAddrIncrement = ADDR_INC;
0000b8  7641              STRB     r1,[r0,#0x19]
;;;86     	DmaInitStruct.DestAddrMode = LINEAR;
0000ba  7681              STRB     r1,[r0,#0x1a]
;;;87     	DmaInitStruct.DestAddrIncrement = ADDR_INC;
0000bc  76c1              STRB     r1,[r0,#0x1b]
;;;88     	DmaInitStruct.AddrSrc = (uint32_t)(AM_ADC->DR);;
0000be  482b              LDR      r0,|L1.364|
0000c0  9008              STR      r0,[sp,#0x20]
;;;89     	DmaInitStruct.AddrDest = (uint32_t)BufAdcData;
0000c2  482b              LDR      r0,|L1.368|
0000c4  9009              STR      r0,[sp,#0x24]
;;;90     	DmaInitStruct.ChnPriority = CHANNEL_PRI_HIGH;
0000c6  2102              MOVS     r1,#2
0000c8  4668              MOV      r0,sp
0000ca  75c1              STRB     r1,[r0,#0x17]
;;;91     	DmaInitStruct.BlockLength = 18;
0000cc  2112              MOVS     r1,#0x12
0000ce  8541              STRH     r1,[r0,#0x2a]
;;;92     	DmaInitStruct.BlockCnt = 1;
0000d0  2101              MOVS     r1,#1
0000d2  8501              STRH     r1,[r0,#0x28]
;;;93     	init_dma(&DmaInitStruct,DMA_CH1);		
0000d4  a805              ADD      r0,sp,#0x14
0000d6  f7fffffe          BL       init_dma
;;;94     	dma_int_enable(TRAN_CPLT_INT,DMA_CH1);
0000da  2101              MOVS     r1,#1
0000dc  2003              MOVS     r0,#3
0000de  f7fffffe          BL       dma_int_enable
;;;95     	dma_int_enable(GLOBAL_INT,DMA_CH1);
0000e2  2101              MOVS     r1,#1
0000e4  2000              MOVS     r0,#0
0000e6  f7fffffe          BL       dma_int_enable
;;;96     	DMA_EnaCmd(DMA_CH1,ENABLE);	
0000ea  2101              MOVS     r1,#1
0000ec  4608              MOV      r0,r1
0000ee  f7fffffe          BL       DMA_EnaCmd
;;;97     	NVIC_EnableIRQ(PDMACH1_IRQn);
0000f2  2019              MOVS     r0,#0x19
0000f4  2101              MOVS     r1,#1
0000f6  4081              LSLS     r1,r1,r0
0000f8  4a1e              LDR      r2,|L1.372|
0000fa  6011              STR      r1,[r2,#0]
0000fc  bf00              NOP      
;;;98     	
;;;99     // gptm0 configure 
;;;100    	TimeBaseInit.CounterMode = GPTM_CNT_MODE_UP;
0000fe  2000              MOVS     r0,#0
000100  900c              STR      r0,[sp,#0x30]
;;;101    	TimeBaseInit.CounterReload = COUNTER_UP_VAL;
000102  491d              LDR      r1,|L1.376|
000104  4668              MOV      r0,sp
000106  8581              STRH     r1,[r0,#0x2c]
;;;102    	TimeBaseInit.Prescaler = 3;
000108  2103              MOVS     r1,#3
00010a  85c1              STRH     r1,[r0,#0x2e]
;;;103    	TimeBaseInit.PSCReloadTime = GPTM_PSC_RLD_IMMEDIATE;
00010c  21ff              MOVS     r1,#0xff
00010e  3101              ADDS     r1,#1
000110  8681              STRH     r1,[r0,#0x34]
;;;104    	GPTM_TimeBaseInit(AM_GPTM0, &TimeBaseInit);
000112  a90b              ADD      r1,sp,#0x2c
000114  480c              LDR      r0,|L1.328|
000116  f7fffffe          BL       GPTM_TimeBaseInit
;;;105    	/* MTO 																																																		*/	
;;;106    	GPTM_MMSELConfig(AM_GPTM0,GPTM_MMSEL_UPDATE);
00011a  2101              MOVS     r1,#1
00011c  0449              LSLS     r1,r1,#17
00011e  480a              LDR      r0,|L1.328|
000120  f7fffffe          BL       GPTM_MMSELConfig
;;;107    		
;;;108      //start gptm
;;;109    	GPTM_Cmd(AM_GPTM0, ENABLE);	
000124  2101              MOVS     r1,#1
000126  4808              LDR      r0,|L1.328|
000128  f7fffffe          BL       GPTM_Cmd
;;;110    
;;;111    /*
;;;112    	i = 0;
;;;113    	while(i<1)
;;;114    	{
;;;115    		while( ADC_GetConversionData(17,&ValTmp) == RESET );
;;;116    		ValAdc[i][17] = ValTmp;		
;;;117    		for(j=16;j>=0;j--)
;;;118    		{
;;;119    			ADC_GetConversionData(j,&ValTmp);
;;;120    			ValAdc[i][j] = ValTmp;			
;;;121    		}
;;;122    		i++;
;;;123    	}*/
;;;124    }
00012c  b00e              ADD      sp,sp,#0x38
00012e  bd10              POP      {r4,pc}
;;;125    
                          ENDP

                  adc_dma1_gptm0_ok PROC
;;;126    FLAG_PASS_FAIL adc_dma1_gptm0_ok(void)
000130  bf00              NOP      
                  |L1.306|
;;;127    {
;;;128    	u16 i;
;;;129    	
;;;130    	while(FlagAdcDmaFinish1 == RESET);
000132  4804              LDR      r0,|L1.324|
000134  8800              LDRH     r0,[r0,#0]  ; FlagAdcDmaFinish1
000136  2800              CMP      r0,#0
000138  d0fb              BEQ      |L1.306|
;;;131    	FlagAdcDmaFinish1 = RESET;
00013a  2000              MOVS     r0,#0
00013c  4901              LDR      r1,|L1.324|
00013e  8008              STRH     r0,[r1,#0]
;;;132    	/*
;;;133    	for(i=0;i<8*18;i++)
;;;134    	{
;;;135    		if(BufAdcDataAll[i] != 2*(1+i)+0x80000000)
;;;136    			return FLAG_FAIL;
;;;137    	}*/
;;;138    	return FLAG_PASS;	
;;;139    }
000140  4770              BX       lr
;;;140    
                          ENDP

000142  0000              DCW      0x0000
                  |L1.324|
                          DCD      FlagAdcDmaFinish1
                  |L1.328|
                          DCD      0x4006e000
                  |L1.332|
                          DCD      Cnt1
                  |L1.336|
                          DCD      State
                  |L1.340|
000154  11100f0e          DCB      17,16,15,14,"\r\f\v\n\t\b\a",6,5,4,3,2,1,0
000158  0d0c0b0a
00015c  09080706
000160  05040302
000164  0100    
000166  00                DCB      0
000167  00                DCB      0
                  |L1.360|
                          DCD      0x00009fff
                  |L1.364|
                          DCD      0x40010024
                  |L1.368|
                          DCD      BufAdcData
                  |L1.372|
                          DCD      0xe000e100
                  |L1.376|
                          DCD      0x00001770

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BufAdcData
                          %        72
                  BufAdcDataAll
                          %        576

                          AREA ||.data||, DATA, ALIGN=1

                  Cnt1
000000  0000              DCW      0x0000
                  FlagAdcDmaFinish1
000002  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "src\\adc_dma.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_adc_dma_c_Cnt1____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___9_adc_dma_c_Cnt1____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_adc_dma_c_Cnt1____REVSH|
#line 128
|__asm___9_adc_dma_c_Cnt1____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
