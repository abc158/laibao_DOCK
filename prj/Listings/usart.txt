; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\usart.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usart.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\usart.crf ..\driver\src\usart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USART_DeInit PROC
;;;81      ************************************************************************************************************/
;;;82     void USART_DeInit(AM_USART_TypeDef* USARTx)
000000  b510              PUSH     {r4,lr}
;;;83     {
000002  4604              MOV      r4,r0
;;;84       if (USARTx == AM_UART0)
000004  2001              MOVS     r0,#1
000006  0780              LSLS     r0,r0,#30
000008  4284              CMP      r4,r0
00000a  d104              BNE      |L1.22|
;;;85         RSTCU_APBPerip0Reset(RSTCU_APBRST0_UART0, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  1580              ASRS     r0,r0,#22
000010  f7fffffe          BL       RSTCU_APBPerip0Reset
000014  e026              B        |L1.100|
                  |L1.22|
;;;86       else if (USARTx == AM_UART2)
000016  48f2              LDR      r0,|L1.992|
000018  4284              CMP      r4,r0
00001a  d104              BNE      |L1.38|
;;;87         RSTCU_APBPerip0Reset(RSTCU_APBRST0_UART2, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  1500              ASRS     r0,r0,#20
000020  f7fffffe          BL       RSTCU_APBPerip0Reset
000024  e01e              B        |L1.100|
                  |L1.38|
;;;88       else if (USARTx == AM_UART4)
000026  48ef              LDR      r0,|L1.996|
000028  4284              CMP      r4,r0
00002a  d104              BNE      |L1.54|
;;;89         RSTCU_APBPerip0Reset(RSTCU_APBRST0_UART4, ENABLE);
00002c  2101              MOVS     r1,#1
00002e  1480              ASRS     r0,r0,#18
000030  f7fffffe          BL       RSTCU_APBPerip0Reset
000034  e016              B        |L1.100|
                  |L1.54|
;;;90       else if (USARTx == AM_UART5)
000036  48ec              LDR      r0,|L1.1000|
000038  4284              CMP      r4,r0
00003a  d104              BNE      |L1.70|
;;;91         RSTCU_APBPerip0Reset(RSTCU_APBRST0_UART5, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  1440              ASRS     r0,r0,#17
000040  f7fffffe          BL       RSTCU_APBPerip0Reset
000044  e00e              B        |L1.100|
                  |L1.70|
;;;92     	else if (USARTx == AM_UART1)
000046  48e9              LDR      r0,|L1.1004|
000048  4284              CMP      r4,r0
00004a  d104              BNE      |L1.86|
;;;93         RSTCU_APBPerip1Reset(RSTCU_APBRST1_UART1, ENABLE);
00004c  2101              MOVS     r1,#1
00004e  2004              MOVS     r0,#4
000050  f7fffffe          BL       RSTCU_APBPerip1Reset
000054  e006              B        |L1.100|
                  |L1.86|
;;;94     	else if (USARTx == AM_UART3)
000056  48e6              LDR      r0,|L1.1008|
000058  4284              CMP      r4,r0
00005a  d103              BNE      |L1.100|
;;;95         RSTCU_APBPerip1Reset(RSTCU_APBRST1_UART3, ENABLE);
00005c  2101              MOVS     r1,#1
00005e  2008              MOVS     r0,#8
000060  f7fffffe          BL       RSTCU_APBPerip1Reset
                  |L1.100|
;;;96     }
000064  bd10              POP      {r4,pc}
;;;97     
                          ENDP

                  USART_Init PROC
;;;104     ************************************************************************************************************/
;;;105    void USART_Init(AM_USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000066  b570              PUSH     {r4-r6,lr}
;;;106    {
000068  4604              MOV      r4,r0
00006a  460d              MOV      r5,r1
;;;107      USARTx->LCR = (USARTx->LCR & LCR_CLEAR_Mask) | USART_InitStruct->USART_StopBits | 
00006c  6920              LDR      r0,[r4,#0x10]
00006e  0940              LSRS     r0,r0,#5
000070  0140              LSLS     r0,r0,#5
000072  88e9              LDRH     r1,[r5,#6]
000074  4308              ORRS     r0,r0,r1
000076  88a9              LDRH     r1,[r5,#4]
000078  4308              ORRS     r0,r0,r1
00007a  8929              LDRH     r1,[r5,#8]
00007c  4308              ORRS     r0,r0,r1
00007e  6120              STR      r0,[r4,#0x10]
;;;108                     USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity;
;;;109    
;;;110      USARTx->MDR = (USARTx->MDR & MDR_CLEAR_Mask) | USART_InitStruct->USART_Mode;
000080  6a60              LDR      r0,[r4,#0x24]
000082  0880              LSRS     r0,r0,#2
000084  0080              LSLS     r0,r0,#2
000086  8969              LDRH     r1,[r5,#0xa]
000088  4308              ORRS     r0,r0,r1
00008a  6260              STR      r0,[r4,#0x24]
;;;111    
;;;112      USARTx->DLR = CKCU_GetUSARTClockFreq() / (u32)USART_InitStruct->USART_BaudRate;
00008c  f7fffffe          BL       CKCU_GetUSARTClockFreq
000090  4606              MOV      r6,r0
000092  6829              LDR      r1,[r5,#0]
000094  f7fffffe          BL       __aeabi_uidivmod
000098  63a0              STR      r0,[r4,#0x38]
;;;113    }
00009a  bd70              POP      {r4-r6,pc}
;;;114    
                          ENDP

                  USART_StructInit PROC
;;;119     ************************************************************************************************************/
;;;120    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
00009c  214b              MOVS     r1,#0x4b
;;;121    {
;;;122      /* USART_InitStruct members default value */
;;;123      USART_InitStruct->USART_BaudRate = 9600;
00009e  01c9              LSLS     r1,r1,#7
0000a0  6001              STR      r1,[r0,#0]
;;;124      USART_InitStruct->USART_WordLength = USART_WORDLENGTH_8B;
0000a2  2101              MOVS     r1,#1
0000a4  8081              STRH     r1,[r0,#4]
;;;125      USART_InitStruct->USART_StopBits = USART_STOPBITS_1;
0000a6  2100              MOVS     r1,#0
0000a8  80c1              STRH     r1,[r0,#6]
;;;126      USART_InitStruct->USART_Parity = USART_PARITY_NO;
0000aa  8101              STRH     r1,[r0,#8]
;;;127      USART_InitStruct->USART_Mode = USART_MODE_NORMAL;
0000ac  8141              STRH     r1,[r0,#0xa]
;;;128    }
0000ae  4770              BX       lr
;;;129    
                          ENDP

                  USART_SynClockInit PROC
;;;137     ************************************************************************************************************/
;;;138    void USART_SynClockInit(AM_USART_TypeDef* USARTx, USART_SynClock_InitTypeDef* USART_SynClock_InitStruct)
0000b0  880a              LDRH     r2,[r1,#0]
;;;139    {
;;;140      USARTx->SCR = USART_SynClock_InitStruct->USART_ClockEnable | USART_SynClock_InitStruct->USART_ClockPhase |
0000b2  884b              LDRH     r3,[r1,#2]
0000b4  431a              ORRS     r2,r2,r3
0000b6  888b              LDRH     r3,[r1,#4]
0000b8  431a              ORRS     r2,r2,r3
0000ba  6302              STR      r2,[r0,#0x30]
;;;141                    USART_SynClock_InitStruct->USART_ClockPolarity;
;;;142    
;;;143      USARTx->MDR = (USARTx->MDR & TRSM_CLEAR_Mask) | USART_SynClock_InitStruct->USART_TransferSelectMode;
0000bc  6a42              LDR      r2,[r0,#0x24]
0000be  2304              MOVS     r3,#4
0000c0  439a              BICS     r2,r2,r3
0000c2  88cb              LDRH     r3,[r1,#6]
0000c4  431a              ORRS     r2,r2,r3
0000c6  6242              STR      r2,[r0,#0x24]
;;;144    }
0000c8  4770              BX       lr
;;;145    
                          ENDP

                  USART_SynClockStructInit PROC
;;;150     ************************************************************************************************************/
;;;151    void USART_SynClockStructInit(USART_SynClock_InitTypeDef* USART_SynClock_InitStruct)
0000ca  2100              MOVS     r1,#0
;;;152    {
;;;153      /* USART_ClockInitStruct members default value */
;;;154      USART_SynClock_InitStruct->USART_ClockEnable =  USART_SYN_CLOCK_DISABLE;
0000cc  8001              STRH     r1,[r0,#0]
;;;155      USART_SynClock_InitStruct->USART_ClockPhase = USART_SYN_CLOCK_PHASE_FIRST;
0000ce  8041              STRH     r1,[r0,#2]
;;;156      USART_SynClock_InitStruct->USART_ClockPolarity = USART_SYN_CLOCK_POLARITY_LOW;
0000d0  8081              STRH     r1,[r0,#4]
;;;157      USART_SynClock_InitStruct->USART_TransferSelectMode = USART_LSB_FIRST;
0000d2  80c1              STRH     r1,[r0,#6]
;;;158    }
0000d4  4770              BX       lr
;;;159    
                          ENDP

                  USART_SendData PROC
;;;165     ************************************************************************************************************/
;;;166    void USART_SendData(AM_USART_TypeDef* USARTx, u16 Data)
0000d6  6001              STR      r1,[r0,#0]
;;;167    {
;;;168      USARTx->RBR = Data;
;;;169    }
0000d8  4770              BX       lr
;;;170    
                          ENDP

                  USART_ReceiveData PROC
;;;175     ************************************************************************************************************/
;;;176    u16 USART_ReceiveData(AM_USART_TypeDef* USARTx)
0000da  4601              MOV      r1,r0
;;;177    {
;;;178      return (u16)(USARTx->RBR);
0000dc  6808              LDR      r0,[r1,#0]
0000de  b280              UXTH     r0,r0
;;;179    }
0000e0  4770              BX       lr
;;;180    
                          ENDP

                  USART_SetGuardTime PROC
;;;186     ************************************************************************************************************/
;;;187    void USART_SetGuardTime(AM_USART_TypeDef* USARTx, u32 USART_GuardTime)
0000e2  6a02              LDR      r2,[r0,#0x20]
;;;188    {
;;;189      USARTx->TPR = (USARTx->TPR & TPR_TG_Mask) | (USART_GuardTime << 0x08);
0000e4  23ff              MOVS     r3,#0xff
0000e6  021b              LSLS     r3,r3,#8
0000e8  439a              BICS     r2,r2,r3
0000ea  020b              LSLS     r3,r1,#8
0000ec  431a              ORRS     r2,r2,r3
0000ee  6202              STR      r2,[r0,#0x20]
;;;190    }
0000f0  4770              BX       lr
;;;191    
                          ENDP

                  USART_GetLineStatus PROC
;;;208     ************************************************************************************************************/
;;;209    FlagStatus USART_GetLineStatus(AM_USART_TypeDef* USARTx, u32 USART_FLAG)
0000f2  4602              MOV      r2,r0
;;;210    {
;;;211      if ((USARTx->LSR & USART_FLAG) != (u32)RESET)
0000f4  6990              LDR      r0,[r2,#0x18]
0000f6  4008              ANDS     r0,r0,r1
0000f8  2800              CMP      r0,#0
0000fa  d001              BEQ      |L1.256|
;;;212      {
;;;213        return (SET);
0000fc  2001              MOVS     r0,#1
                  |L1.254|
;;;214      }
;;;215      else
;;;216      {
;;;217        return (RESET);
;;;218      }
;;;219    }
0000fe  4770              BX       lr
                  |L1.256|
000100  2000              MOVS     r0,#0                 ;217
000102  e7fc              B        |L1.254|
;;;220    
                          ENDP

                  USART_GetFIFOStatus PROC
;;;229     ************************************************************************************************************/
;;;230    u8 USART_GetFIFOStatus(AM_USART_TypeDef* USARTx, u32 USART_FIFODirection)
000104  4602              MOV      r2,r0
;;;231    {
;;;232      if (USART_FIFODirection == USART_FIFO_TX)
000106  2904              CMP      r1,#4
000108  d103              BNE      |L1.274|
;;;233      {
;;;234        return (u8)(USARTx->FSR & 0x1f);
00010a  6b50              LDR      r0,[r2,#0x34]
00010c  06c0              LSLS     r0,r0,#27
00010e  0ec0              LSRS     r0,r0,#27
                  |L1.272|
;;;235      }
;;;236      else
;;;237      {
;;;238        return (u8)((USARTx->FSR & 0x1f00) >> 8);
;;;239      }
;;;240    }
000110  4770              BX       lr
                  |L1.274|
000112  6b50              LDR      r0,[r2,#0x34]         ;238
000114  231f              MOVS     r3,#0x1f              ;238
000116  021b              LSLS     r3,r3,#8              ;238
000118  4018              ANDS     r0,r0,r3              ;238
00011a  0a00              LSRS     r0,r0,#8              ;238
00011c  e7f8              B        |L1.272|
;;;241    
                          ENDP

                  USART_GetModemStatus PROC
;;;246     ************************************************************************************************************/
;;;247    u8 USART_GetModemStatus(AM_USART_TypeDef* USARTx)
00011e  4601              MOV      r1,r0
;;;248    {
;;;249      return (u8)(USARTx->MSR);
000120  69c8              LDR      r0,[r1,#0x1c]
000122  b2c0              UXTB     r0,r0
;;;250    }
000124  4770              BX       lr
;;;251    
                          ENDP

                  USART_ForceModemPinState PROC
;;;264     ************************************************************************************************************/
;;;265    void USART_ForceModemPinState(AM_USART_TypeDef* USARTx, u32 USART_ModemPin, u32 USART_ModemState)
000126  b510              PUSH     {r4,lr}
;;;266    {
;;;267      if (USART_ModemState != USART_MODEMSTATE_HIGH)
000128  2a00              CMP      r2,#0
00012a  d005              BEQ      |L1.312|
;;;268      {
;;;269        USARTx->MCR |= USART_MODEMSTATE_LOW << USART_ModemPin;
00012c  6943              LDR      r3,[r0,#0x14]
00012e  2401              MOVS     r4,#1
000130  408c              LSLS     r4,r4,r1
000132  4323              ORRS     r3,r3,r4
000134  6143              STR      r3,[r0,#0x14]
000136  e004              B        |L1.322|
                  |L1.312|
;;;270      }
;;;271      else
;;;272      {
;;;273        USARTx->MCR &= ~(USART_MODEMSTATE_HIGH << USART_ModemPin);
000138  6943              LDR      r3,[r0,#0x14]
00013a  2400              MOVS     r4,#0
00013c  408c              LSLS     r4,r4,r1
00013e  43a3              BICS     r3,r3,r4
000140  6143              STR      r3,[r0,#0x14]
                  |L1.322|
;;;274      }
;;;275    }
000142  bd10              POP      {r4,pc}
;;;276    
                          ENDP

                  USART_IrDACmd PROC
;;;282     ************************************************************************************************************/
;;;283    void USART_IrDACmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
000144  2900              CMP      r1,#0
;;;284    {
;;;285      if (NewState != DISABLE)
000146  d004              BEQ      |L1.338|
;;;286      {
;;;287        USARTx->ICR |= USART_IRDA_ON;
000148  6a82              LDR      r2,[r0,#0x28]
00014a  2301              MOVS     r3,#1
00014c  431a              ORRS     r2,r2,r3
00014e  6282              STR      r2,[r0,#0x28]
000150  e003              B        |L1.346|
                  |L1.338|
;;;288      }
;;;289      else
;;;290      {
;;;291        USARTx->ICR &= USART_IRDA_OFF;
000152  6a82              LDR      r2,[r0,#0x28]
000154  0852              LSRS     r2,r2,#1
000156  0052              LSLS     r2,r2,#1
000158  6282              STR      r2,[r0,#0x28]
                  |L1.346|
;;;292      }
;;;293    }
00015a  4770              BX       lr
;;;294    
                          ENDP

                  USART_IrDAConfig PROC
;;;303     ************************************************************************************************************/
;;;304    void USART_IrDAConfig(AM_USART_TypeDef* USARTx, u32 USART_IrDAMode)
00015c  1cca              ADDS     r2,r1,#3
;;;305    {
;;;306      if (USART_IrDAMode != USART_IRDA_NORMAL)
00015e  2a00              CMP      r2,#0
000160  d004              BEQ      |L1.364|
;;;307      {
;;;308        USARTx->ICR |= USART_IRDA_LOWPOWER;
000162  6a82              LDR      r2,[r0,#0x28]
000164  2302              MOVS     r3,#2
000166  431a              ORRS     r2,r2,r3
000168  6282              STR      r2,[r0,#0x28]
00016a  e003              B        |L1.372|
                  |L1.364|
;;;309      }
;;;310      else
;;;311      {
;;;312        USARTx->ICR &= USART_IRDA_NORMAL;
00016c  6a82              LDR      r2,[r0,#0x28]
00016e  2302              MOVS     r3,#2
000170  439a              BICS     r2,r2,r3
000172  6282              STR      r2,[r0,#0x28]
                  |L1.372|
;;;313      }
;;;314    }
000174  4770              BX       lr
;;;315    
                          ENDP

                  USART_SetIrDAPrescaler PROC
;;;321     ************************************************************************************************************/
;;;322    void USART_SetIrDAPrescaler(AM_USART_TypeDef* USARTx, u32 USART_IrDAPrescaler)
000176  6a82              LDR      r2,[r0,#0x28]
;;;323    {
;;;324      USARTx->ICR = (USARTx->ICR & RCR_ILPDVSR_Mask) | (USART_IrDAPrescaler << 0x08);
000178  23ff              MOVS     r3,#0xff
00017a  021b              LSLS     r3,r3,#8
00017c  439a              BICS     r2,r2,r3
00017e  020b              LSLS     r3,r1,#8
000180  431a              ORRS     r2,r2,r3
000182  6282              STR      r2,[r0,#0x28]
;;;325    }
000184  4770              BX       lr
;;;326    
                          ENDP

                  USART_IrDADirectionConfig PROC
;;;335     ************************************************************************************************************/
;;;336    void USART_IrDADirectionConfig(AM_USART_TypeDef* USARTx, u32 USART_IrDADirection)
000186  1d4a              ADDS     r2,r1,#5
;;;337    {
;;;338      if (USART_IrDADirection != USART_IRDA_RX)
000188  2a00              CMP      r2,#0
00018a  d004              BEQ      |L1.406|
;;;339      {
;;;340        USARTx->ICR |= USART_IRDA_TX;
00018c  6a82              LDR      r2,[r0,#0x28]
00018e  2304              MOVS     r3,#4
000190  431a              ORRS     r2,r2,r3
000192  6282              STR      r2,[r0,#0x28]
000194  e003              B        |L1.414|
                  |L1.406|
;;;341      }
;;;342      else
;;;343      {
;;;344        USARTx->ICR &= USART_IRDA_RX;
000196  6a82              LDR      r2,[r0,#0x28]
000198  2304              MOVS     r3,#4
00019a  439a              BICS     r2,r2,r3
00019c  6282              STR      r2,[r0,#0x28]
                  |L1.414|
;;;345      }
;;;346    }
00019e  4770              BX       lr
;;;347    
                          ENDP

                  USART_RS485TxEnablePolarityConfig PROC
;;;356     ************************************************************************************************************/
;;;357    void USART_RS485TxEnablePolarityConfig(AM_USART_TypeDef* USARTx, u32 USART_RS485Polarity)
0001a0  1c8a              ADDS     r2,r1,#2
;;;358    {
;;;359      if (USART_RS485Polarity != USART_RS485POLARITY_HIGH)
0001a2  2a00              CMP      r2,#0
0001a4  d004              BEQ      |L1.432|
;;;360      {
;;;361        USARTx->RCR |= USART_RS485POLARITY_LOW;
0001a6  6ac2              LDR      r2,[r0,#0x2c]
0001a8  2301              MOVS     r3,#1
0001aa  431a              ORRS     r2,r2,r3
0001ac  62c2              STR      r2,[r0,#0x2c]
0001ae  e003              B        |L1.440|
                  |L1.432|
;;;362      }
;;;363      else
;;;364      {
;;;365        USARTx->RCR &= USART_RS485POLARITY_HIGH;
0001b0  6ac2              LDR      r2,[r0,#0x2c]
0001b2  0852              LSRS     r2,r2,#1
0001b4  0052              LSLS     r2,r2,#1
0001b6  62c2              STR      r2,[r0,#0x2c]
                  |L1.440|
;;;366      }
;;;367    }
0001b8  4770              BX       lr
;;;368    
                          ENDP

                  USART_ForceBreakCmd PROC
;;;374     ************************************************************************************************************/
;;;375    void USART_ForceBreakCmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
0001ba  2900              CMP      r1,#0
;;;376    {
;;;377      if (NewState != DISABLE)
0001bc  d004              BEQ      |L1.456|
;;;378      {
;;;379        USARTx->LCR |= USART_BREAK_ON;
0001be  6902              LDR      r2,[r0,#0x10]
0001c0  2340              MOVS     r3,#0x40
0001c2  431a              ORRS     r2,r2,r3
0001c4  6102              STR      r2,[r0,#0x10]
0001c6  e003              B        |L1.464|
                  |L1.456|
;;;380      }
;;;381      else
;;;382      {
;;;383        USARTx->LCR &= USART_BREAK_OFF;
0001c8  6902              LDR      r2,[r0,#0x10]
0001ca  2340              MOVS     r3,#0x40
0001cc  439a              BICS     r2,r2,r3
0001ce  6102              STR      r2,[r0,#0x10]
                  |L1.464|
;;;384      }
;;;385    }
0001d0  4770              BX       lr
;;;386    
                          ENDP

                  USART_IntConfig PROC
;;;399     ************************************************************************************************************/
;;;400    void USART_IntConfig(AM_USART_TypeDef* USARTx, u32 USART_IER, ControlStatus NewState)
0001d2  2a00              CMP      r2,#0
;;;401    {
;;;402      if (NewState != DISABLE)
0001d4  d003              BEQ      |L1.478|
;;;403      {
;;;404        USARTx->IER |= USART_IER;
0001d6  6843              LDR      r3,[r0,#4]
0001d8  430b              ORRS     r3,r3,r1
0001da  6043              STR      r3,[r0,#4]
0001dc  e002              B        |L1.484|
                  |L1.478|
;;;405      }
;;;406      else
;;;407      {
;;;408        USARTx->IER &= ~USART_IER;
0001de  6843              LDR      r3,[r0,#4]
0001e0  438b              BICS     r3,r3,r1
0001e2  6043              STR      r3,[r0,#4]
                  |L1.484|
;;;409      }
;;;410    }
0001e4  4770              BX       lr
;;;411    
                          ENDP

                  USART_GetIntID PROC
;;;422     ************************************************************************************************************/
;;;423    u8 USART_GetIntID(AM_USART_TypeDef* USARTx)
0001e6  4601              MOV      r1,r0
;;;424    {
;;;425      return (u8)(USARTx->IIR);
0001e8  6888              LDR      r0,[r1,#8]
0001ea  b2c0              UXTB     r0,r0
;;;426    }
0001ec  4770              BX       lr
;;;427    
                          ENDP

                  USART_RFITLConfig PROC
;;;438     ************************************************************************************************************/
;;;439    void USART_RFITLConfig(AM_USART_TypeDef* USARTx, u32 USART_RFITL)
0001ee  68c2              LDR      r2,[r0,#0xc]
;;;440    {
;;;441      USARTx->FCR = (USARTx->FCR & FCR_RFITL_CLEAR_Mask) | USART_RFITL;
0001f0  23c0              MOVS     r3,#0xc0
0001f2  439a              BICS     r2,r2,r3
0001f4  430a              ORRS     r2,r2,r1
0001f6  60c2              STR      r2,[r0,#0xc]
;;;442    }
0001f8  4770              BX       lr
;;;443    
                          ENDP

                  USART_TFITLConfig PROC
;;;454     ************************************************************************************************************/
;;;455    void USART_TFITLConfig(AM_USART_TypeDef* USARTx, u32 USART_TFITL)
0001fa  68c2              LDR      r2,[r0,#0xc]
;;;456    {
;;;457      USARTx->FCR = (USARTx->FCR & FCR_TFITL_CLEAR_Mask) | USART_TFITL;
0001fc  2330              MOVS     r3,#0x30
0001fe  439a              BICS     r2,r2,r3
000200  430a              ORRS     r2,r2,r1
000202  60c2              STR      r2,[r0,#0xc]
;;;458    }
000204  4770              BX       lr
;;;459    
                          ENDP

                  USART_TimeOutIntConfig PROC
;;;465     ************************************************************************************************************/
;;;466    void USART_TimeOutIntConfig(AM_USART_TypeDef* USARTx, ControlStatus NewState)
000206  2900              CMP      r1,#0
;;;467    {
;;;468      if (NewState != DISABLE)
000208  d004              BEQ      |L1.532|
;;;469      {
;;;470        USARTx->TPR |= USART_TIMEOUT_ON;
00020a  6a02              LDR      r2,[r0,#0x20]
00020c  2380              MOVS     r3,#0x80
00020e  431a              ORRS     r2,r2,r3
000210  6202              STR      r2,[r0,#0x20]
000212  e003              B        |L1.540|
                  |L1.532|
;;;471      }
;;;472      else
;;;473      {
;;;474        USARTx->TPR &= USART_TIMEOUT_OFF;
000214  6a02              LDR      r2,[r0,#0x20]
000216  2380              MOVS     r3,#0x80
000218  439a              BICS     r2,r2,r3
00021a  6202              STR      r2,[r0,#0x20]
                  |L1.540|
;;;475      }
;;;476    }
00021c  4770              BX       lr
;;;477    
                          ENDP

                  USART_SetTimeOutValue PROC
;;;483     ************************************************************************************************************/
;;;484    void USART_SetTimeOutValue(AM_USART_TypeDef* USARTx, u32 USART_TimeOut)
00021e  6a02              LDR      r2,[r0,#0x20]
;;;485    {
;;;486      USARTx->TPR = (USARTx->TPR & RCR_ILPDVSR_Mask) | USART_TimeOut;
000220  23ff              MOVS     r3,#0xff
000222  021b              LSLS     r3,r3,#8
000224  439a              BICS     r2,r2,r3
000226  430a              ORRS     r2,r2,r1
000228  6202              STR      r2,[r0,#0x20]
;;;487    }
00022a  4770              BX       lr
;;;488    
                          ENDP

                  USART_FIFOReset PROC
;;;497     ************************************************************************************************************/
;;;498    void USART_FIFOReset(AM_USART_TypeDef* USARTx, u32 USART_FIFODirection)
00022c  68c2              LDR      r2,[r0,#0xc]
;;;499    {
;;;500      USARTx->FCR |= USART_FIFODirection;
00022e  430a              ORRS     r2,r2,r1
000230  60c2              STR      r2,[r0,#0xc]
;;;501    }
000232  4770              BX       lr
;;;502    
                          ENDP

                  USART_StickParityCmd PROC
;;;508     ************************************************************************************************************/
;;;509    void USART_StickParityCmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
000234  2900              CMP      r1,#0
;;;510    {
;;;511      if (NewState != DISABLE)
000236  d004              BEQ      |L1.578|
;;;512      {
;;;513        USARTx->LCR |= USART_SPE_ON;
000238  6902              LDR      r2,[r0,#0x10]
00023a  2320              MOVS     r3,#0x20
00023c  431a              ORRS     r2,r2,r3
00023e  6102              STR      r2,[r0,#0x10]
000240  e003              B        |L1.586|
                  |L1.578|
;;;514      }
;;;515      else
;;;516      {
;;;517        USARTx->LCR &= USART_SPE_OFF;
000242  6902              LDR      r2,[r0,#0x10]
000244  2320              MOVS     r3,#0x20
000246  439a              BICS     r2,r2,r3
000248  6102              STR      r2,[r0,#0x10]
                  |L1.586|
;;;518      }
;;;519    }
00024a  4770              BX       lr
;;;520    
                          ENDP

                  USART_StickParityConfig PROC
;;;529     ************************************************************************************************************/
;;;530    void USART_StickParityConfig(AM_USART_TypeDef * USARTx, u32 USART_StickParity)
00024c  460a              MOV      r2,r1
;;;531    {
;;;532      if (USART_StickParity != USART_STICK_HIGH)
00024e  3211              ADDS     r2,r2,#0x11
000250  2a00              CMP      r2,#0
000252  d004              BEQ      |L1.606|
;;;533      {
;;;534        USARTx->LCR |= USART_STICK_LOW;
000254  6902              LDR      r2,[r0,#0x10]
000256  2310              MOVS     r3,#0x10
000258  431a              ORRS     r2,r2,r3
00025a  6102              STR      r2,[r0,#0x10]
00025c  e003              B        |L1.614|
                  |L1.606|
;;;535      }
;;;536      else
;;;537      {
;;;538        USARTx->LCR &= USART_STICK_HIGH;
00025e  6902              LDR      r2,[r0,#0x10]
000260  2310              MOVS     r3,#0x10
000262  439a              BICS     r2,r2,r3
000264  6102              STR      r2,[r0,#0x10]
                  |L1.614|
;;;539      }
;;;540    }
000266  4770              BX       lr
;;;541    
                          ENDP

                  USART_TxCmd PROC
;;;547     ************************************************************************************************************/
;;;548    void USART_TxCmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
000268  2900              CMP      r1,#0
;;;549    {
;;;550      if (NewState != DISABLE)
00026a  d005              BEQ      |L1.632|
;;;551      {
;;;552        USARTx->FCR |= USART_TXEN_ON;
00026c  68c2              LDR      r2,[r0,#0xc]
00026e  23ff              MOVS     r3,#0xff
000270  3301              ADDS     r3,#1
000272  431a              ORRS     r2,r2,r3
000274  60c2              STR      r2,[r0,#0xc]
000276  e004              B        |L1.642|
                  |L1.632|
;;;553      }
;;;554      else
;;;555      {
;;;556        USARTx->FCR &= USART_TXEN_OFF;
000278  68c2              LDR      r2,[r0,#0xc]
00027a  23ff              MOVS     r3,#0xff
00027c  3301              ADDS     r3,#1
00027e  439a              BICS     r2,r2,r3
000280  60c2              STR      r2,[r0,#0xc]
                  |L1.642|
;;;557      }
;;;558    }
000282  4770              BX       lr
;;;559    
                          ENDP

                  USART_RxCmd PROC
;;;565     ************************************************************************************************************/
;;;566    void USART_RxCmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
000284  2900              CMP      r1,#0
;;;567    {
;;;568      if (NewState != DISABLE)
000286  d005              BEQ      |L1.660|
;;;569      {
;;;570        USARTx->FCR |= USART_RXEN_ON;
000288  68c2              LDR      r2,[r0,#0xc]
00028a  2301              MOVS     r3,#1
00028c  025b              LSLS     r3,r3,#9
00028e  431a              ORRS     r2,r2,r3
000290  60c2              STR      r2,[r0,#0xc]
000292  e004              B        |L1.670|
                  |L1.660|
;;;571      }
;;;572      else
;;;573      {
;;;574        USARTx->FCR &= USART_RXEN_OFF;
000294  68c2              LDR      r2,[r0,#0xc]
000296  2301              MOVS     r3,#1
000298  025b              LSLS     r3,r3,#9
00029a  439a              BICS     r2,r2,r3
00029c  60c2              STR      r2,[r0,#0xc]
                  |L1.670|
;;;575      }
;;;576    }
00029e  4770              BX       lr
;;;577    
                          ENDP

                  USART_IrDAInvtOutputCmd PROC
;;;583     ************************************************************************************************************/
;;;584    void USART_IrDAInvtOutputCmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
0002a0  2900              CMP      r1,#0
;;;585    {
;;;586      if (NewState != DISABLE)
0002a2  d004              BEQ      |L1.686|
;;;587      {
;;;588        USARTx->ICR |= USART_TXINV_ON;
0002a4  6a82              LDR      r2,[r0,#0x28]
0002a6  2310              MOVS     r3,#0x10
0002a8  431a              ORRS     r2,r2,r3
0002aa  6282              STR      r2,[r0,#0x28]
0002ac  e003              B        |L1.694|
                  |L1.686|
;;;589      }
;;;590      else
;;;591      {
;;;592        USARTx->ICR &= USART_TXINV_OFF;
0002ae  6a82              LDR      r2,[r0,#0x28]
0002b0  2310              MOVS     r3,#0x10
0002b2  439a              BICS     r2,r2,r3
0002b4  6282              STR      r2,[r0,#0x28]
                  |L1.694|
;;;593      }
;;;594    }
0002b6  4770              BX       lr
;;;595    
                          ENDP

                  USART_IrDAInvtInputCmd PROC
;;;601     ************************************************************************************************************/
;;;602    void USART_IrDAInvtInputCmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
0002b8  2900              CMP      r1,#0
;;;603    {
;;;604      if (NewState != DISABLE)
0002ba  d004              BEQ      |L1.710|
;;;605      {
;;;606        USARTx->ICR |= USART_RXINV_ON;
0002bc  6a82              LDR      r2,[r0,#0x28]
0002be  2320              MOVS     r3,#0x20
0002c0  431a              ORRS     r2,r2,r3
0002c2  6282              STR      r2,[r0,#0x28]
0002c4  e003              B        |L1.718|
                  |L1.710|
;;;607      }
;;;608      else
;;;609      {
;;;610        USARTx->ICR &= USART_RXINV_OFF;
0002c6  6a82              LDR      r2,[r0,#0x28]
0002c8  2320              MOVS     r3,#0x20
0002ca  439a              BICS     r2,r2,r3
0002cc  6282              STR      r2,[r0,#0x28]
                  |L1.718|
;;;611      }
;;;612    }
0002ce  4770              BX       lr
;;;613    
                          ENDP

                  USART_HardwareFlowControlCmd PROC
;;;619     ************************************************************************************************************/
;;;620    void USART_HardwareFlowControlCmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
0002d0  2900              CMP      r1,#0
;;;621    {
;;;622      if (NewState != DISABLE)
0002d2  d004              BEQ      |L1.734|
;;;623      {
;;;624        USARTx->MCR |= USART_HFCEN_ON;
0002d4  6942              LDR      r2,[r0,#0x14]
0002d6  2304              MOVS     r3,#4
0002d8  431a              ORRS     r2,r2,r3
0002da  6142              STR      r2,[r0,#0x14]
0002dc  e003              B        |L1.742|
                  |L1.734|
;;;625      }
;;;626      else
;;;627      {
;;;628        USARTx->MCR &= USART_HFCEN_OFF;
0002de  6942              LDR      r2,[r0,#0x14]
0002e0  2304              MOVS     r3,#4
0002e2  439a              BICS     r2,r2,r3
0002e4  6142              STR      r2,[r0,#0x14]
                  |L1.742|
;;;629      }
;;;630    }
0002e6  4770              BX       lr
;;;631    
                          ENDP

                  USART_TxPDMACmd PROC
;;;637     ************************************************************************************************************/
;;;638    void USART_TxPDMACmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
0002e8  2900              CMP      r1,#0
;;;639    {
;;;640      if (NewState != DISABLE)
0002ea  d004              BEQ      |L1.758|
;;;641      {
;;;642        USARTx->MDR |= USART_TxPDMA_ON;
0002ec  6a42              LDR      r2,[r0,#0x24]
0002ee  2310              MOVS     r3,#0x10
0002f0  431a              ORRS     r2,r2,r3
0002f2  6242              STR      r2,[r0,#0x24]
0002f4  e003              B        |L1.766|
                  |L1.758|
;;;643      }
;;;644      else
;;;645      {
;;;646        USARTx->MDR &= USART_TxPDMA_OFF;
0002f6  6a42              LDR      r2,[r0,#0x24]
0002f8  2310              MOVS     r3,#0x10
0002fa  439a              BICS     r2,r2,r3
0002fc  6242              STR      r2,[r0,#0x24]
                  |L1.766|
;;;647      }
;;;648    }
0002fe  4770              BX       lr
;;;649    
                          ENDP

                  USART_RxPDMACmd PROC
;;;655     ************************************************************************************************************/
;;;656    void USART_RxPDMACmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
000300  2900              CMP      r1,#0
;;;657    {
;;;658      if (NewState != DISABLE)
000302  d004              BEQ      |L1.782|
;;;659      {
;;;660        USARTx->MDR |= USART_RxPDMA_ON;
000304  6a42              LDR      r2,[r0,#0x24]
000306  2320              MOVS     r3,#0x20
000308  431a              ORRS     r2,r2,r3
00030a  6242              STR      r2,[r0,#0x24]
00030c  e003              B        |L1.790|
                  |L1.782|
;;;661      }
;;;662      else
;;;663      {
;;;664        USARTx->MDR &= USART_RxPDMA_OFF;
00030e  6a42              LDR      r2,[r0,#0x24]
000310  2320              MOVS     r3,#0x20
000312  439a              BICS     r2,r2,r3
000314  6242              STR      r2,[r0,#0x24]
                  |L1.790|
;;;665      }
;;;666    }
000316  4770              BX       lr
;;;667    
                          ENDP

                  USART_RS485NMMCmd PROC
;;;673     ************************************************************************************************************/
;;;674    void USART_RS485NMMCmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
000318  2900              CMP      r1,#0
;;;675    {
;;;676      if (NewState != DISABLE)
00031a  d004              BEQ      |L1.806|
;;;677      {
;;;678        USARTx->RCR |= USART_RS485NMM_ON;
00031c  6ac2              LDR      r2,[r0,#0x2c]
00031e  2302              MOVS     r3,#2
000320  431a              ORRS     r2,r2,r3
000322  62c2              STR      r2,[r0,#0x2c]
000324  e003              B        |L1.814|
                  |L1.806|
;;;679      }
;;;680      else
;;;681      {
;;;682        USARTx->RCR &= USART_RS485NMM_OFF;
000326  6ac2              LDR      r2,[r0,#0x2c]
000328  2302              MOVS     r3,#2
00032a  439a              BICS     r2,r2,r3
00032c  62c2              STR      r2,[r0,#0x2c]
                  |L1.814|
;;;683      }
;;;684    }
00032e  4770              BX       lr
;;;685    
                          ENDP

                  USART_RS485AADCmd PROC
;;;691     ************************************************************************************************************/
;;;692    void USART_RS485AADCmd(AM_USART_TypeDef* USARTx, ControlStatus NewState)
000330  2900              CMP      r1,#0
;;;693    {
;;;694      if (NewState != DISABLE)
000332  d004              BEQ      |L1.830|
;;;695      {
;;;696        USARTx->RCR |= USART_RS485AAD_ON;
000334  6ac2              LDR      r2,[r0,#0x2c]
000336  2304              MOVS     r3,#4
000338  431a              ORRS     r2,r2,r3
00033a  62c2              STR      r2,[r0,#0x2c]
00033c  e003              B        |L1.838|
                  |L1.830|
;;;697      }
;;;698      else
;;;699      {
;;;700        USARTx->RCR &= USART_RS485AAD_OFF;
00033e  6ac2              LDR      r2,[r0,#0x2c]
000340  2304              MOVS     r3,#4
000342  439a              BICS     r2,r2,r3
000344  62c2              STR      r2,[r0,#0x2c]
                  |L1.838|
;;;701      }
;;;702    }
000346  4770              BX       lr
;;;703    
                          ENDP

                  USART_SetAddressMatchValue PROC
;;;709     ************************************************************************************************************/
;;;710    void USART_SetAddressMatchValue(AM_USART_TypeDef* USARTx, u32 USART_AddressMatchValue)
000348  6ac2              LDR      r2,[r0,#0x2c]
;;;711    {
;;;712      USARTx->RCR = (USARTx->RCR & RS485CR_ADDM_Mask) | (u32)(USART_AddressMatchValue<<0x08);
00034a  23ff              MOVS     r3,#0xff
00034c  021b              LSLS     r3,r3,#8
00034e  439a              BICS     r2,r2,r3
000350  020b              LSLS     r3,r1,#8
000352  431a              ORRS     r2,r2,r3
000354  62c2              STR      r2,[r0,#0x2c]
;;;713    }
000356  4770              BX       lr
;;;714    
                          ENDP

                  USART_LINCmd PROC
;;;720     ************************************************************************************************************/
;;;721    void USART_LINCmd(ControlStatus NewState)
000358  2101              MOVS     r1,#1
;;;722    {
;;;723      AM_UART0->LCR = (AM_UART0->LCR & (~(1<<8))) | NewState;
00035a  0789              LSLS     r1,r1,#30
00035c  6909              LDR      r1,[r1,#0x10]
00035e  22ff              MOVS     r2,#0xff
000360  3201              ADDS     r2,#1
000362  4391              BICS     r1,r1,r2
000364  4301              ORRS     r1,r1,r0
000366  0592              LSLS     r2,r2,#22
000368  6111              STR      r1,[r2,#0x10]
;;;724    }
00036a  4770              BX       lr
;;;725    
                          ENDP

                  USART_LINModeSet PROC
;;;730     ************************************************************************************************************/
;;;731    void USART_LINModeSet(u16 Mode)
00036c  2101              MOVS     r1,#1
;;;732    {
;;;733      AM_UART0->LCR = (AM_UART0->LCR & (~(1<<9))) | Mode;
00036e  0789              LSLS     r1,r1,#30
000370  6909              LDR      r1,[r1,#0x10]
000372  2201              MOVS     r2,#1
000374  0252              LSLS     r2,r2,#9
000376  4391              BICS     r1,r1,r2
000378  4301              ORRS     r1,r1,r0
00037a  0552              LSLS     r2,r2,#21
00037c  6111              STR      r1,[r2,#0x10]
;;;734    }
00037e  4770              BX       lr
;;;735    
                          ENDP

                  USART_LINBreakDetectLenSet PROC
;;;743     ************************************************************************************************************/
;;;744    void USART_LINBreakDetectLenSet(uint16_t Len)
000380  2101              MOVS     r1,#1
;;;745    {
;;;746      AM_UART0->LCR = (AM_UART0->LCR & (~(1<<12))) | Len;
000382  0789              LSLS     r1,r1,#30
000384  6909              LDR      r1,[r1,#0x10]
000386  2201              MOVS     r2,#1
000388  0312              LSLS     r2,r2,#12
00038a  4391              BICS     r1,r1,r2
00038c  4301              ORRS     r1,r1,r0
00038e  0492              LSLS     r2,r2,#18
000390  6111              STR      r1,[r2,#0x10]
;;;747    }
000392  4770              BX       lr
;;;748    
                          ENDP

                  USART_LINSendBreak PROC
;;;753     ************************************************************************************************************/
;;;754    void USART_LINSendBreak(void)
000394  2001              MOVS     r0,#1
;;;755    {
;;;756      AM_UART0->LCR |= USART_LIN_SBK_SET;
000396  0780              LSLS     r0,r0,#30
000398  6900              LDR      r0,[r0,#0x10]
00039a  2101              MOVS     r1,#1
00039c  02c9              LSLS     r1,r1,#11
00039e  4308              ORRS     r0,r0,r1
0003a0  04c9              LSLS     r1,r1,#19
0003a2  6108              STR      r0,[r1,#0x10]
;;;757    }
0003a4  4770              BX       lr
;;;758    
                          ENDP

                  USART_LINIntConfig PROC
;;;767     ************************************************************************************************************/
;;;768    void USART_LINIntConfig(u32 USART_INT, ControlStatus NewState)
0003a6  2900              CMP      r1,#0
;;;769    {
;;;770      if (NewState != DISABLE)
0003a8  d007              BEQ      |L1.954|
;;;771      {
;;;772        AM_UART0->IER |= USART_INT;
0003aa  2201              MOVS     r2,#1
0003ac  0792              LSLS     r2,r2,#30
0003ae  6852              LDR      r2,[r2,#4]
0003b0  4302              ORRS     r2,r2,r0
0003b2  2301              MOVS     r3,#1
0003b4  079b              LSLS     r3,r3,#30
0003b6  605a              STR      r2,[r3,#4]
0003b8  e006              B        |L1.968|
                  |L1.954|
;;;773      }
;;;774      else
;;;775      {
;;;776        AM_UART0->IER &= ~USART_INT;
0003ba  2201              MOVS     r2,#1
0003bc  0792              LSLS     r2,r2,#30
0003be  6852              LDR      r2,[r2,#4]
0003c0  4382              BICS     r2,r2,r0
0003c2  2301              MOVS     r3,#1
0003c4  079b              LSLS     r3,r3,#30
0003c6  605a              STR      r2,[r3,#4]
                  |L1.968|
;;;777      }
;;;778    }
0003c8  4770              BX       lr
;;;779    
                          ENDP

                  USART_LINIntStatusClear PROC
;;;787     ************************************************************************************************************/
;;;788    void USART_LINIntStatusClear(u32 USART_INT)
0003ca  2101              MOVS     r1,#1
;;;789    {
;;;790      AM_UART0->IIR = USART_INT;
0003cc  0789              LSLS     r1,r1,#30
0003ce  6088              STR      r0,[r1,#8]
;;;791    }
0003d0  4770              BX       lr
;;;792    
                          ENDP

                  USART_LINIntStatusGet PROC
;;;802     ************************************************************************************************************/
;;;803    u16 USART_LINIntStatusGet(u32 USART_STA)
0003d2  4601              MOV      r1,r0
;;;804    {
;;;805    	return (AM_UART0->IIR & USART_STA);
0003d4  2001              MOVS     r0,#1
0003d6  0780              LSLS     r0,r0,#30
0003d8  6880              LDR      r0,[r0,#8]
0003da  4008              ANDS     r0,r0,r1
0003dc  b280              UXTH     r0,r0
;;;806    }
0003de  4770              BX       lr
;;;807    
                          ENDP

                  |L1.992|
                          DCD      0x40001000
                  |L1.996|
                          DCD      0x40002000
                  |L1.1000|
                          DCD      0x40003000
                  |L1.1004|
                          DCD      0x40040000
                  |L1.1008|
                          DCD      0x40041000

;*** Start embedded assembler ***

#line 1 "..\\driver\\src\\usart.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9565154b____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___7_usart_c_9565154b____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9565154b____REVSH|
#line 128
|__asm___7_usart_c_9565154b____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
