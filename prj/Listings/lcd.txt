; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\lcd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\lcd.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\lcd.crf ..\driver\src\lcd.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_DeInit PROC
;;;17      ************************************************************************************************************/
;;;18     void LCD_DeInit(void)
000000  2023              MOVS     r0,#0x23
;;;19     {
;;;20       /* Reset system clock */
;;;21       AM_LCD->LCD_CTRL = 0x00230000;                                              
000002  0400              LSLS     r0,r0,#16
000004  4962              LDR      r1,|L1.400|
000006  6048              STR      r0,[r1,#4]
;;;22       AM_LCD->LCD_DATA0 = 0x0;                                                 
000008  2000              MOVS     r0,#0
00000a  6088              STR      r0,[r1,#8]
;;;23       AM_LCD->LCD_DATA1 = 0x0;   
00000c  60c8              STR      r0,[r1,#0xc]
;;;24       AM_LCD->LCD_DATA2 = 0x0;                                              
00000e  6108              STR      r0,[r1,#0x10]
;;;25       AM_LCD->LCD_DATA3 = 0x0;                                                 
000010  6148              STR      r0,[r1,#0x14]
;;;26       AM_LCD->LCD_DATA4 = 0x0;   
000012  6188              STR      r0,[r1,#0x18]
;;;27       AM_LCD->LCD_DATA5 = 0x0;                                              
000014  61c8              STR      r0,[r1,#0x1c]
;;;28       AM_LCD->LCD_DATA6 = 0x0;                                                 
000016  6208              STR      r0,[r1,#0x20]
;;;29       AM_LCD->LCD_DATA7 = 0x0;   	
000018  6248              STR      r0,[r1,#0x24]
;;;30     	AM_LCD->PWM_CNT = 0x80003000;                                                 
00001a  485e              LDR      r0,|L1.404|
00001c  6288              STR      r0,[r1,#0x28]
;;;31       AM_LCD->LCD_ANALOGE = 0x00000010;   	
00001e  2010              MOVS     r0,#0x10
000020  62c8              STR      r0,[r1,#0x2c]
;;;32     }
000022  4770              BX       lr
;;;33     
                          ENDP

                  LED_Init PROC
;;;41      ************************************************************************************************************/
;;;42     void LED_Init(LED_COM_MODE Mode, u32 Led_Comx)
000024  4a5a              LDR      r2,|L1.400|
;;;43     {
;;;44     	AM_LCD->LCD_CTRL |= (1<<30);				// led mode select
000026  6852              LDR      r2,[r2,#4]
000028  2301              MOVS     r3,#1
00002a  079b              LSLS     r3,r3,#30
00002c  431a              ORRS     r2,r2,r3
00002e  4b58              LDR      r3,|L1.400|
000030  605a              STR      r2,[r3,#4]
;;;45     	AM_LCD->LCD_CTRL = (AM_LCD->LCD_CTRL & (~(1<<24))) | (Mode<<24);		// led common anode or cathode
000032  461a              MOV      r2,r3
000034  6852              LDR      r2,[r2,#4]
000036  2301              MOVS     r3,#1
000038  061b              LSLS     r3,r3,#24
00003a  439a              BICS     r2,r2,r3
00003c  0603              LSLS     r3,r0,#24
00003e  431a              ORRS     r2,r2,r3
000040  4b53              LDR      r3,|L1.400|
000042  605a              STR      r2,[r3,#4]
;;;46     	AM_LCD->LCD_CTRL = (AM_LCD->LCD_CTRL & (~(0xff))) | Led_Comx; // led oomx (x=0~7) enable
000044  461a              MOV      r2,r3
000046  6852              LDR      r2,[r2,#4]
000048  0a12              LSRS     r2,r2,#8
00004a  0212              LSLS     r2,r2,#8
00004c  430a              ORRS     r2,r2,r1
00004e  605a              STR      r2,[r3,#4]
;;;47     }
000050  4770              BX       lr
;;;48     
                          ENDP

                  LED_Seg_Data PROC
;;;54      ************************************************************************************************************/
;;;55     void LED_Seg_Data(u8 SegData, u32 Led_Comx)
000052  b530              PUSH     {r4,r5,lr}
;;;56     {
000054  4602              MOV      r2,r0
;;;57     	u8 i;
;;;58     	for(i=0;i<6;i++)
000056  2000              MOVS     r0,#0
000058  e008              B        |L1.108|
                  |L1.90|
;;;59     	{
;;;60     		if( ((Led_Comx>>i)&0x01) != 0 )
00005a  460b              MOV      r3,r1
00005c  40c3              LSRS     r3,r3,r0
00005e  07db              LSLS     r3,r3,#31
000060  0fdb              LSRS     r3,r3,#31
000062  2b00              CMP      r3,#0
000064  d000              BEQ      |L1.104|
;;;61     			break;
000066  e003              B        |L1.112|
                  |L1.104|
000068  1c43              ADDS     r3,r0,#1              ;58
00006a  b2d8              UXTB     r0,r3                 ;58
                  |L1.108|
00006c  2806              CMP      r0,#6                 ;58
00006e  dbf4              BLT      |L1.90|
                  |L1.112|
000070  bf00              NOP      
;;;62     	}
;;;63     	if(i<6)
000072  2806              CMP      r0,#6
000074  da1c              BGE      |L1.176|
;;;64     	{
;;;65     		if(i<4)
000076  2804              CMP      r0,#4
000078  da0c              BGE      |L1.148|
;;;66     		{
;;;67     			AM_LCD->LCD_DATA0 = (AM_LCD->LCD_DATA0 & (~(0xff<<(i*8)))) | (SegData<<(i*8));
00007a  4b45              LDR      r3,|L1.400|
00007c  689b              LDR      r3,[r3,#8]
00007e  00c5              LSLS     r5,r0,#3
000080  24ff              MOVS     r4,#0xff
000082  40ac              LSLS     r4,r4,r5
000084  43a3              BICS     r3,r3,r4
000086  00c5              LSLS     r5,r0,#3
000088  4614              MOV      r4,r2
00008a  40ac              LSLS     r4,r4,r5
00008c  4323              ORRS     r3,r3,r4
00008e  4c40              LDR      r4,|L1.400|
000090  60a3              STR      r3,[r4,#8]
000092  e00d              B        |L1.176|
                  |L1.148|
;;;68     		}
;;;69     		else
;;;70     		{
;;;71     			AM_LCD->LCD_DATA1 = (AM_LCD->LCD_DATA1 & (~(0xff<<((i-4)*8)))) | (SegData<<((i-4)*8));
000094  4b3e              LDR      r3,|L1.400|
000096  68db              LDR      r3,[r3,#0xc]
000098  1f04              SUBS     r4,r0,#4
00009a  00e5              LSLS     r5,r4,#3
00009c  24ff              MOVS     r4,#0xff
00009e  40ac              LSLS     r4,r4,r5
0000a0  43a3              BICS     r3,r3,r4
0000a2  1f04              SUBS     r4,r0,#4
0000a4  00e5              LSLS     r5,r4,#3
0000a6  4614              MOV      r4,r2
0000a8  40ac              LSLS     r4,r4,r5
0000aa  4323              ORRS     r3,r3,r4
0000ac  4c38              LDR      r4,|L1.400|
0000ae  60e3              STR      r3,[r4,#0xc]
                  |L1.176|
;;;72     		}
;;;73     	}
;;;74     }
0000b0  bd30              POP      {r4,r5,pc}
;;;75     /*********************************************************************************************************//**
                          ENDP

                  LED_Updata PROC
;;;79      ************************************************************************************************************/
;;;80     void LED_Updata(void)
0000b2  4837              LDR      r0,|L1.400|
;;;81     {
;;;82     	AM_LCD->LCD_CTRL |= ((u32)1<<31);
0000b4  6840              LDR      r0,[r0,#4]
0000b6  2101              MOVS     r1,#1
0000b8  07c9              LSLS     r1,r1,#31
0000ba  4308              ORRS     r0,r0,r1
0000bc  4934              LDR      r1,|L1.400|
0000be  6048              STR      r0,[r1,#4]
;;;83     }
0000c0  4770              BX       lr
;;;84      
                          ENDP

                  LED_Updata_Status PROC
;;;89      ************************************************************************************************************/
;;;90     FlagStatus LED_Updata_Status(void)
0000c2  4833              LDR      r0,|L1.400|
;;;91     {
;;;92     	if( (AM_LCD->LCD_CTRL &= ((u32)1<<31)) == 0 )
0000c4  6840              LDR      r0,[r0,#4]
0000c6  0fc0              LSRS     r0,r0,#31
0000c8  07c0              LSLS     r0,r0,#31
0000ca  4931              LDR      r1,|L1.400|
0000cc  6048              STR      r0,[r1,#4]
0000ce  2800              CMP      r0,#0
0000d0  d100              BNE      |L1.212|
                  |L1.210|
;;;93     		return RESET;			//not update yet
;;;94     	else 
;;;95     		return SET;				//update completely
;;;96     }
0000d2  4770              BX       lr
                  |L1.212|
0000d4  2001              MOVS     r0,#1                 ;95
0000d6  e7fc              B        |L1.210|
;;;97     
                          ENDP

                  LED_Config PROC
;;;102     ************************************************************************************************************/
;;;103    void LED_Config(ControlStatus Cmd)
0000d8  492d              LDR      r1,|L1.400|
;;;104    {
;;;105    	AM_LCD->LCD_ENABLE = (AM_LCD->LCD_ENABLE & (~(0x01))) | Cmd;
0000da  6809              LDR      r1,[r1,#0]
0000dc  0849              LSRS     r1,r1,#1
0000de  0049              LSLS     r1,r1,#1
0000e0  4301              ORRS     r1,r1,r0
0000e2  4a2b              LDR      r2,|L1.400|
0000e4  6011              STR      r1,[r2,#0]
;;;106    }
0000e6  4770              BX       lr
;;;107    
                          ENDP

                  LCD_PWM_CNT PROC
;;;116     ************************************************************************************************************/
;;;117    void LCD_PWM_CNT(EventStatus Cmd,u16 PWM_CNT)
0000e8  4a29              LDR      r2,|L1.400|
;;;118    {
;;;119     	AM_LCD->PWM_CNT &= ~((u32)1<<31|0XFFFF);
0000ea  6a92              LDR      r2,[r2,#0x28]
0000ec  4b2a              LDR      r3,|L1.408|
0000ee  401a              ANDS     r2,r2,r3
0000f0  4b27              LDR      r3,|L1.400|
0000f2  629a              STR      r2,[r3,#0x28]
;;;120    	AM_LCD->PWM_CNT |= Cmd<<31|PWM_CNT;
0000f4  461a              MOV      r2,r3
0000f6  6a92              LDR      r2,[r2,#0x28]
0000f8  07c3              LSLS     r3,r0,#31
0000fa  430b              ORRS     r3,r3,r1
0000fc  431a              ORRS     r2,r2,r3
0000fe  4b24              LDR      r3,|L1.400|
000100  629a              STR      r2,[r3,#0x28]
;;;121    }
000102  4770              BX       lr
;;;122    
                          ENDP

                  LCD_Init PROC
;;;131     ************************************************************************************************************/
;;;132    void LCD_Init(LCD_MOD Mode, LCD_BIAS Bias, LCD_DUTY Duty)
000104  b510              PUSH     {r4,lr}
;;;133    {
000106  460b              MOV      r3,r1
;;;134    	AM_LCD->LCD_CTRL &= (~(1<<30));				// lCd mode select
000108  4921              LDR      r1,|L1.400|
00010a  6849              LDR      r1,[r1,#4]
00010c  2401              MOVS     r4,#1
00010e  07a4              LSLS     r4,r4,#30
000110  43a1              BICS     r1,r1,r4
000112  4c1f              LDR      r4,|L1.400|
000114  6061              STR      r1,[r4,#4]
;;;135    	AM_LCD->LCD_CTRL = (AM_LCD->LCD_CTRL & (~(1<<24))) | (Mode<<24);		// lcd row-invert or frame-invert. 
000116  4621              MOV      r1,r4
000118  6849              LDR      r1,[r1,#4]
00011a  2401              MOVS     r4,#1
00011c  0624              LSLS     r4,r4,#24
00011e  43a1              BICS     r1,r1,r4
000120  0604              LSLS     r4,r0,#24
000122  4321              ORRS     r1,r1,r4
000124  4c1a              LDR      r4,|L1.400|
000126  6061              STR      r1,[r4,#4]
;;;136    	AM_LCD->LCD_CTRL = (AM_LCD->LCD_CTRL & (~(0xf<<16))) | (Duty<<16); // led oomx (x=0~7) enable
000128  4621              MOV      r1,r4
00012a  6849              LDR      r1,[r1,#4]
00012c  240f              MOVS     r4,#0xf
00012e  0424              LSLS     r4,r4,#16
000130  43a1              BICS     r1,r1,r4
000132  0414              LSLS     r4,r2,#16
000134  4321              ORRS     r1,r1,r4
000136  4c16              LDR      r4,|L1.400|
000138  6061              STR      r1,[r4,#4]
;;;137    }
00013a  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  LCD_Updata PROC
;;;143     ************************************************************************************************************/
;;;144    void LCD_Updata(void)
00013c  b500              PUSH     {lr}
;;;145    {
;;;146    	LED_Updata();
00013e  f7fffffe          BL       LED_Updata
;;;147    }
000142  bd00              POP      {pc}
;;;148    
                          ENDP

                  LCD_Updata_Status PROC
;;;153     ************************************************************************************************************/
;;;154    FlagStatus LCD_Updata_Status(void)
000144  b500              PUSH     {lr}
;;;155    {
;;;156    	return LED_Updata_Status();
000146  f7fffffe          BL       LED_Updata_Status
;;;157    }
00014a  bd00              POP      {pc}
;;;158    
                          ENDP

                  LCD_Config PROC
;;;163     ************************************************************************************************************/
;;;164    void LCD_Config(ControlStatus Cmd)
00014c  b500              PUSH     {lr}
;;;165    {
00014e  4603              MOV      r3,r0
;;;166    	LED_Config(Cmd);
000150  4618              MOV      r0,r3
000152  f7fffffe          BL       LED_Config
;;;167    }
000156  bd00              POP      {pc}
;;;168    
                          ENDP

                  LCD_Com_Data PROC
;;;174     ************************************************************************************************************/
;;;175    void LCD_Com_Data(u8 SegData, LCD_SEGX Segx)
000158  b5d0              PUSH     {r4,r6,r7,lr}
;;;176    {
;;;177    	u8 i, reg_off, reg_in_off;
;;;178    	volatile uint32_t *pt = &AM_LCD->LCD_DATA0;
00015a  4b0d              LDR      r3,|L1.400|
00015c  3308              ADDS     r3,r3,#8
;;;179    	
;;;180    	if(i<32)
00015e  2d20              CMP      r5,#0x20
000160  da14              BGE      |L1.396|
;;;181    	{
;;;182    		reg_off = Segx/4;
000162  460c              MOV      r4,r1
000164  17ce              ASRS     r6,r1,#31
000166  0fb6              LSRS     r6,r6,#30
000168  1936              ADDS     r6,r6,r4
00016a  05b6              LSLS     r6,r6,#22
00016c  0e30              LSRS     r0,r6,#24
;;;183    		reg_in_off = Segx&4;
00016e  2404              MOVS     r4,#4
000170  460a              MOV      r2,r1
000172  4022              ANDS     r2,r2,r4
;;;184    		
;;;185    		*(pt+reg_off) = (*(pt+reg_off) & (~(0xff<<(reg_in_off*8)))) | (Segx<<(reg_in_off*8));
000174  0084              LSLS     r4,r0,#2
000176  591c              LDR      r4,[r3,r4]
000178  00d7              LSLS     r7,r2,#3
00017a  26ff              MOVS     r6,#0xff
00017c  40be              LSLS     r6,r6,r7
00017e  43b4              BICS     r4,r4,r6
000180  00d6              LSLS     r6,r2,#3
000182  460f              MOV      r7,r1
000184  40b7              LSLS     r7,r7,r6
000186  433c              ORRS     r4,r4,r7
000188  0086              LSLS     r6,r0,#2
00018a  519c              STR      r4,[r3,r6]
                  |L1.396|
;;;186    	}
;;;187    }
00018c  bdd0              POP      {r4,r6,r7,pc}
;;;188    
                          ENDP

00018e  0000              DCW      0x0000
                  |L1.400|
                          DCD      0x4002c000
                  |L1.404|
                          DCD      0x80003000
                  |L1.408|
                          DCD      0x7fff0000

;*** Start embedded assembler ***

#line 1 "..\\driver\\src\\lcd.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_7a40c1c2____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___5_lcd_c_7a40c1c2____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_7a40c1c2____REVSH|
#line 128
|__asm___5_lcd_c_7a40c1c2____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
