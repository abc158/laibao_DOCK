; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\bk2425_initialization_141015.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\bk2425_initialization_141015.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\bk2425_initialization_141015.crf User\2.4G\BK2425_Initialization_141015.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SPI_RW PROC
;;;89     extern UINT8 SPI_RW_Byte(UINT8 byte);	
;;;90     UINT8 SPI_RW(UINT8 value)                                    
000000  b570              PUSH     {r4-r6,lr}
;;;91     {                                                           
000002  4604              MOV      r4,r0
;;;92     	UINT8 rec_data;
;;;93     //	for(bit_ctr=0;bit_ctr<8;bit_ctr++)   // output 8-bit
;;;94     //	{
;;;95     //		if(value & 0x80)
;;;96     //		{
;;;97     //			MOSI=1;
;;;98     //		}
;;;99     //		else
;;;100    //		{
;;;101    //			MOSI=0;		
;;;102    //		}
;;;103    
;;;104    //		value = (value << 1);           // shift next bit into MSB..
;;;105    //		SCK = 1;                      // Set SCK high..
;;;106    //		value |= MISO;       		  // capture current MISO bit
;;;107    //		SCK = 0;            		  // ..then set SCK low again
;;;108    //	}
;;;109    	rec_data=SPI_RW_Byte(value);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       SPI_RW_Byte
00000a  4605              MOV      r5,r0
;;;110    	return(rec_data);           		  // return read UINT8
00000c  4628              MOV      r0,r5
;;;111    }                                                           
00000e  bd70              POP      {r4-r6,pc}
;;;112    /**************************************************/        
                          ENDP

                  SPI_Write_Reg PROC
;;;119    **************************************************/        
;;;120    void SPI_Write_Reg(UINT8 reg, UINT8 value)                 
000010  b570              PUSH     {r4-r6,lr}
;;;121    {
000012  4605              MOV      r5,r0
000014  460c              MOV      r4,r1
;;;122    	SPI_FLASH_CS_LOW();                   // CSN low, init SPI transaction
000016  20ff              MOVS     r0,#0xff
000018  3001              ADDS     r0,#1
00001a  49b1              LDR      r1,|L1.736|
00001c  6288              STR      r0,[r1,#0x28]
;;;123    	op_status = SPI_RW(reg);      // select register
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       SPI_RW
000024  49af              LDR      r1,|L1.740|
000026  7008              STRB     r0,[r1,#0]
;;;124    	SPI_RW(value);             // ..and write value to it..
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       SPI_RW
;;;125    	SPI_FLASH_CS_HIGH();                   // CSN high again
00002e  20ff              MOVS     r0,#0xff
000030  3001              ADDS     r0,#1
000032  49ab              LDR      r1,|L1.736|
000034  6248              STR      r0,[r1,#0x24]
;;;126    }                                                           
000036  bd70              POP      {r4-r6,pc}
;;;127    /**************************************************/        
                          ENDP

                  SPI_Read_Reg PROC
;;;134    **************************************************/        
;;;135    UINT8 SPI_Read_Reg(UINT8 reg)                               
000038  b570              PUSH     {r4-r6,lr}
;;;136    {                                                           
00003a  4604              MOV      r4,r0
;;;137    	UINT8 value;
;;;138    	SPI_FLASH_CS_LOW();                // CSN low, initialize SPI communication...
00003c  20ff              MOVS     r0,#0xff
00003e  3001              ADDS     r0,#1
000040  49a7              LDR      r1,|L1.736|
000042  6288              STR      r0,[r1,#0x28]
;;;139    	op_status=SPI_RW(reg);            // Select register to read from..
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       SPI_RW
00004a  49a6              LDR      r1,|L1.740|
00004c  7008              STRB     r0,[r1,#0]
;;;140    	value = SPI_RW(0);    // ..then read register value
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       SPI_RW
000054  4605              MOV      r5,r0
;;;141    	SPI_FLASH_CS_HIGH();                // CSN high, terminate SPI communication
000056  20ff              MOVS     r0,#0xff
000058  3001              ADDS     r0,#1
00005a  49a1              LDR      r1,|L1.736|
00005c  6248              STR      r0,[r1,#0x24]
;;;142    	return(value);        // return register value
00005e  4628              MOV      r0,r5
;;;143    }                                                           
000060  bd70              POP      {r4-r6,pc}
;;;144    /**************************************************/        
                          ENDP

                  SPI_Read_Buf PROC
;;;151    **************************************************/        
;;;152    void SPI_Read_Buf(UINT8 reg, UINT8 *pBuf, UINT8 length)     
000062  b5f8              PUSH     {r3-r7,lr}
;;;153    {                                                           
000064  4607              MOV      r7,r0
000066  460d              MOV      r5,r1
000068  4616              MOV      r6,r2
;;;154    	UINT8 byte_ctr;                              
;;;155                                                                
;;;156    	SPI_FLASH_CS_LOW();                    		// Set CSN l
00006a  20ff              MOVS     r0,#0xff
00006c  3001              ADDS     r0,#1
00006e  499c              LDR      r1,|L1.736|
000070  6288              STR      r0,[r1,#0x28]
;;;157    	SPI_RW(reg);       		// Select register to write, and read status UINT8
000072  4638              MOV      r0,r7
000074  f7fffffe          BL       SPI_RW
;;;158                                                                
;;;159    	for(byte_ctr=0;byte_ctr<length;byte_ctr++)           
000078  2400              MOVS     r4,#0
00007a  e005              B        |L1.136|
                  |L1.124|
;;;160    		pBuf[byte_ctr] = SPI_RW(0);    // Perform SPI_RW to read UINT8 from BK2425
00007c  2000              MOVS     r0,#0
00007e  f7fffffe          BL       SPI_RW
000082  5528              STRB     r0,[r5,r4]
000084  1c60              ADDS     r0,r4,#1              ;159
000086  b2c4              UXTB     r4,r0                 ;159
                  |L1.136|
000088  42b4              CMP      r4,r6                 ;159
00008a  dbf7              BLT      |L1.124|
;;;161                                                                
;;;162    	SPI_FLASH_CS_HIGH();                           // Set CSN high again
00008c  20ff              MOVS     r0,#0xff
00008e  3001              ADDS     r0,#1
000090  4993              LDR      r1,|L1.736|
000092  6248              STR      r0,[r1,#0x24]
;;;163                   
;;;164    }                                                           
000094  bdf8              POP      {r3-r7,pc}
;;;165    /**************************************************/        
                          ENDP

                  SPI_Write_Buf PROC
;;;172    **************************************************/        
;;;173    void SPI_Write_Buf(UINT8 reg, UINT8 *pBuf, UINT8 length)    
000096  b5f8              PUSH     {r3-r7,lr}
;;;174    {                                                           
000098  4607              MOV      r7,r0
00009a  460c              MOV      r4,r1
00009c  4615              MOV      r5,r2
;;;175    	UINT8 byte_ctr;                              
;;;176                                                                
;;;177    	SPI_FLASH_CS_LOW();                   // Set CSN low, init SPI tranaction
00009e  20ff              MOVS     r0,#0xff
0000a0  3001              ADDS     r0,#1
0000a2  498f              LDR      r1,|L1.736|
0000a4  6288              STR      r0,[r1,#0x28]
;;;178    	op_status = SPI_RW(reg);    // Select register to write to and read status UINT8
0000a6  4638              MOV      r0,r7
0000a8  f7fffffe          BL       SPI_RW
0000ac  498d              LDR      r1,|L1.740|
0000ae  7008              STRB     r0,[r1,#0]
;;;179    	for(byte_ctr=0; byte_ctr<length; byte_ctr++) // then write all UINT8 in buffer(*pBuf) 
0000b0  2600              MOVS     r6,#0
0000b2  e005              B        |L1.192|
                  |L1.180|
;;;180    		SPI_RW(*pBuf++);                                    
0000b4  7820              LDRB     r0,[r4,#0]
0000b6  1c64              ADDS     r4,r4,#1
0000b8  f7fffffe          BL       SPI_RW
0000bc  1c70              ADDS     r0,r6,#1              ;179
0000be  b2c6              UXTB     r6,r0                 ;179
                  |L1.192|
0000c0  42ae              CMP      r6,r5                 ;179
0000c2  dbf7              BLT      |L1.180|
;;;181    	SPI_FLASH_CS_HIGH();                 // Set CSN high again      
0000c4  20ff              MOVS     r0,#0xff
0000c6  3001              ADDS     r0,#1
0000c8  4985              LDR      r1,|L1.736|
0000ca  6248              STR      r0,[r1,#0x24]
;;;182    
;;;183    }                                                           
0000cc  bdf8              POP      {r3-r7,pc}
;;;184    /**************************************************/        
                          ENDP

                  SwitchToRxMode PROC
;;;191    **************************************************/
;;;192    void SwitchToRxMode()
0000ce  b510              PUSH     {r4,lr}
;;;193    {
;;;194    	  UINT8 value;
;;;195    
;;;196    	SPI_Write_Reg(FLUSH_RX,0);//flush Rx
0000d0  2100              MOVS     r1,#0
0000d2  20e2              MOVS     r0,#0xe2
0000d4  f7fffffe          BL       SPI_Write_Reg
;;;197    
;;;198    	value=SPI_Read_Reg(STATUS);	// read register STATUS's value
0000d8  2007              MOVS     r0,#7
0000da  f7fffffe          BL       SPI_Read_Reg
0000de  4604              MOV      r4,r0
;;;199    	SPI_Write_Reg(WRITE_REG|STATUS,value);// clear RX_DR or TX_DS or MAX_RT interrupt flag
0000e0  4621              MOV      r1,r4
0000e2  2027              MOVS     r0,#0x27
0000e4  f7fffffe          BL       SPI_Write_Reg
;;;200    
;;;201    	SPI_WIRELESS_CE_LOW();
0000e8  2010              MOVS     r0,#0x10
0000ea  497d              LDR      r1,|L1.736|
0000ec  6288              STR      r0,[r1,#0x28]
;;;202    
;;;203    	value=SPI_Read_Reg(CONFIG);	// read register CONFIG's value
0000ee  2000              MOVS     r0,#0
0000f0  f7fffffe          BL       SPI_Read_Reg
0000f4  4604              MOV      r4,r0
;;;204    //PRX
;;;205    	value=value|0x01;//set bit 1
0000f6  2001              MOVS     r0,#1
0000f8  4304              ORRS     r4,r4,r0
;;;206      	SPI_Write_Reg(WRITE_REG | CONFIG, value); // Set PWR_UP bit, enable CRC(2 length) & Prim:RX. RX_DR enabled..
0000fa  4621              MOV      r1,r4
0000fc  2020              MOVS     r0,#0x20
0000fe  f7fffffe          BL       SPI_Write_Reg
;;;207    
;;;208    	SPI_WIRELESS_CE_HIGH();
000102  2010              MOVS     r0,#0x10
000104  4976              LDR      r1,|L1.736|
000106  6248              STR      r0,[r1,#0x24]
;;;209    }
000108  bd10              POP      {r4,pc}
;;;210    
                          ENDP

                  SwitchToTxMode PROC
;;;215    **************************************************/
;;;216    void SwitchToTxMode()
00010a  b510              PUSH     {r4,lr}
;;;217    {
;;;218    	  UINT8 value;
;;;219    	SPI_Write_Reg(FLUSH_TX,0);//flush Tx
00010c  2100              MOVS     r1,#0
00010e  20e1              MOVS     r0,#0xe1
000110  f7fffffe          BL       SPI_Write_Reg
;;;220    
;;;221    	SPI_WIRELESS_CE_LOW();
000114  2010              MOVS     r0,#0x10
000116  4972              LDR      r1,|L1.736|
000118  6288              STR      r0,[r1,#0x28]
;;;222    	value=SPI_Read_Reg(CONFIG);	// read register CONFIG's value
00011a  2000              MOVS     r0,#0
00011c  f7fffffe          BL       SPI_Read_Reg
000120  4604              MOV      r4,r0
;;;223    //PTX
;;;224    	value=value&0xfe;//set bit 1
000122  20fe              MOVS     r0,#0xfe
000124  4004              ANDS     r4,r4,r0
;;;225      	SPI_Write_Reg(WRITE_REG | CONFIG, value); // Set PWR_UP bit, enable CRC(2 length) & Prim:RX. RX_DR enabled.
000126  4621              MOV      r1,r4
000128  2020              MOVS     r0,#0x20
00012a  f7fffffe          BL       SPI_Write_Reg
;;;226    
;;;227    	SPI_WIRELESS_CE_HIGH();
00012e  2010              MOVS     r0,#0x10
000130  496b              LDR      r1,|L1.736|
000132  6248              STR      r0,[r1,#0x24]
;;;228    }
000134  bd10              POP      {r4,pc}
;;;229    
                          ENDP

                  SwitchCFG PROC
;;;242    UINT8 reg_temp;
;;;243    void SwitchCFG(char _cfg)//1:Bank1 0:Bank0
000136  b570              PUSH     {r4-r6,lr}
;;;244    {
000138  4604              MOV      r4,r0
;;;245    	UINT8 Tmp;
;;;246    
;;;247    	reg_temp=Tmp=SPI_Read_Reg(7);
00013a  2007              MOVS     r0,#7
00013c  f7fffffe          BL       SPI_Read_Reg
000140  4605              MOV      r5,r0
000142  4969              LDR      r1,|L1.744|
000144  7008              STRB     r0,[r1,#0]
;;;248    	Tmp=Tmp&0x80;
000146  2080              MOVS     r0,#0x80
000148  4005              ANDS     r5,r5,r0
;;;249    
;;;250    	if( ( (Tmp)&&(_cfg==0) )
00014a  2d00              CMP      r5,#0
00014c  d001              BEQ      |L1.338|
00014e  2c00              CMP      r4,#0
000150  d003              BEQ      |L1.346|
                  |L1.338|
;;;251    	||( ((Tmp)==0)&&(_cfg) ) )
000152  2d00              CMP      r5,#0
000154  d105              BNE      |L1.354|
000156  2c00              CMP      r4,#0
000158  d003              BEQ      |L1.354|
                  |L1.346|
;;;252    	{
;;;253    		SPI_Write_Reg(ACTIVATE_CMD,0x53);
00015a  2153              MOVS     r1,#0x53
00015c  2050              MOVS     r0,#0x50
00015e  f7fffffe          BL       SPI_Write_Reg
                  |L1.354|
;;;254    	}
;;;255    }
000162  bd70              POP      {r4-r6,pc}
;;;256    
                          ENDP

                  SetChannelNum PROC
;;;262    **************************************************/
;;;263    void SetChannelNum(UINT8 ch)
000164  b510              PUSH     {r4,lr}
;;;264    {
000166  4604              MOV      r4,r0
;;;265    	SPI_Write_Reg((UINT8)(WRITE_REG|5),(UINT8)(ch));
000168  4621              MOV      r1,r4
00016a  2025              MOVS     r0,#0x25
00016c  f7fffffe          BL       SPI_Write_Reg
;;;266    }
000170  bd10              POP      {r4,pc}
;;;267    
                          ENDP

                  DelayMs PROC
;;;360    extern void Delay_ms(UINT32 nTime);
;;;361    void DelayMs(UINT16 ms)
000172  b510              PUSH     {r4,lr}
;;;362    {
000174  4604              MOV      r4,r0
;;;363    Delay_ms(ms);
000176  4620              MOV      r0,r4
000178  f7fffffe          BL       Delay_ms
;;;364    
;;;365    }
00017c  bd10              POP      {r4,pc}
;;;366    
                          ENDP

                  BK2425_Initialize PROC
;;;278    **************************************************/   
;;;279    void BK2425_Initialize(void)
00017e  b538              PUSH     {r3-r5,lr}
;;;280    {
;;;281    	INT8 i,j;
;;;282     	UINT8 WriteArr[4];
;;;283    
;;;284    	DelayMs(100);//delay more than 50ms.
000180  2064              MOVS     r0,#0x64
000182  f7fffffe          BL       DelayMs
;;;285    	
;;;286    	SwitchCFG(0);
000186  2000              MOVS     r0,#0
000188  f7fffffe          BL       SwitchCFG
;;;287    
;;;288    //********************Write Bank0 register******************
;;;289    	for(i=20;i>=0;i--)
00018c  2414              MOVS     r4,#0x14
00018e  e00f              B        |L1.432|
                  |L1.400|
;;;290    	{
;;;291    		SPI_Write_Reg((WRITE_REG|Bank0_Reg[i][0]),Bank0_Reg[i][1]);
000190  0062              LSLS     r2,r4,#1
000192  4b56              LDR      r3,|L1.748|
000194  18d2              ADDS     r2,r2,r3
000196  7851              LDRB     r1,[r2,#1]
000198  0062              LSLS     r2,r4,#1
00019a  5c9a              LDRB     r2,[r3,r2]
00019c  2320              MOVS     r3,#0x20
00019e  431a              ORRS     r2,r2,r3
0001a0  4610              MOV      r0,r2
0001a2  f7fffffe          BL       SPI_Write_Reg
;;;292    		if(i==0)break;
0001a6  2c00              CMP      r4,#0
0001a8  d100              BNE      |L1.428|
0001aa  e003              B        |L1.436|
                  |L1.428|
0001ac  1e60              SUBS     r0,r4,#1              ;289
0001ae  b2c4              UXTB     r4,r0                 ;289
                  |L1.432|
0001b0  2c00              CMP      r4,#0                 ;289
0001b2  daed              BGE      |L1.400|
                  |L1.436|
0001b4  bf00              NOP      
;;;293    	}
;;;294    
;;;295    //reg 10 - Rx0 addr
;;;296    	SPI_Write_Buf((WRITE_REG|10),RX0_Address,5);
0001b6  2205              MOVS     r2,#5
0001b8  494d              LDR      r1,|L1.752|
0001ba  202a              MOVS     r0,#0x2a
0001bc  f7fffffe          BL       SPI_Write_Buf
;;;297    	
;;;298    //REG 11 - Rx1 addr
;;;299    	SPI_Write_Buf((WRITE_REG|11),RX1_Address,5);
0001c0  2205              MOVS     r2,#5
0001c2  494c              LDR      r1,|L1.756|
0001c4  202b              MOVS     r0,#0x2b
0001c6  f7fffffe          BL       SPI_Write_Buf
;;;300    
;;;301    //REG 16 - TX addr
;;;302    	SPI_Write_Buf((WRITE_REG|16),RX0_Address,5);
0001ca  2205              MOVS     r2,#5
0001cc  4948              LDR      r1,|L1.752|
0001ce  2030              MOVS     r0,#0x30
0001d0  f7fffffe          BL       SPI_Write_Buf
;;;303    //	printf("\nEnd Load Reg");
;;;304    
;;;305    	i=SPI_Read_Reg(29);
0001d4  201d              MOVS     r0,#0x1d
0001d6  f7fffffe          BL       SPI_Read_Reg
0001da  4604              MOV      r4,r0
;;;306    
;;;307    	if(i==0) // i!=0 showed that chip has been actived.so do not active again.
0001dc  2c00              CMP      r4,#0
0001de  d103              BNE      |L1.488|
;;;308    		SPI_Write_Reg(ACTIVATE_CMD,0x73);// Active
0001e0  2173              MOVS     r1,#0x73
0001e2  2050              MOVS     r0,#0x50
0001e4  f7fffffe          BL       SPI_Write_Reg
                  |L1.488|
;;;309    
;;;310    	for(i=22;i>=21;i--)
0001e8  2416              MOVS     r4,#0x16
0001ea  e00c              B        |L1.518|
                  |L1.492|
;;;311    		SPI_Write_Reg((WRITE_REG|Bank0_Reg[i][0]),Bank0_Reg[i][1]);
0001ec  0062              LSLS     r2,r4,#1
0001ee  4b3f              LDR      r3,|L1.748|
0001f0  18d2              ADDS     r2,r2,r3
0001f2  7851              LDRB     r1,[r2,#1]
0001f4  0062              LSLS     r2,r4,#1
0001f6  5c9a              LDRB     r2,[r3,r2]
0001f8  2320              MOVS     r3,#0x20
0001fa  431a              ORRS     r2,r2,r3
0001fc  4610              MOV      r0,r2
0001fe  f7fffffe          BL       SPI_Write_Reg
000202  1e60              SUBS     r0,r4,#1              ;310
000204  b2c4              UXTB     r4,r0                 ;310
                  |L1.518|
000206  2c15              CMP      r4,#0x15              ;310
000208  daf0              BGE      |L1.492|
;;;312    
;;;313    //********************Write Bank1 register******************
;;;314    	SwitchCFG(1);
00020a  2001              MOVS     r0,#1
00020c  f7fffffe          BL       SwitchCFG
;;;315    
;;;316    	for(i=0;i<=1;i++)//reverse
000210  2400              MOVS     r4,#0
000212  e016              B        |L1.578|
                  |L1.532|
;;;317    	{
;;;318    		for(j=0;j<4;j++)
000214  2500              MOVS     r5,#0
000216  e008              B        |L1.554|
                  |L1.536|
;;;319    			WriteArr[j]=(Bank1_Reg0_13[i]>>(8*(j) ) )&0xff;
000218  00a0              LSLS     r0,r4,#2
00021a  4937              LDR      r1,|L1.760|
00021c  5808              LDR      r0,[r1,r0]
00021e  00e9              LSLS     r1,r5,#3
000220  40c8              LSRS     r0,r0,r1
000222  4669              MOV      r1,sp
000224  5548              STRB     r0,[r1,r5]
000226  1c68              ADDS     r0,r5,#1              ;318
000228  b2c5              UXTB     r5,r0                 ;318
                  |L1.554|
00022a  2d04              CMP      r5,#4                 ;318
00022c  dbf4              BLT      |L1.536|
;;;320    
;;;321    		SPI_Write_Buf((WRITE_REG|(i+4)),&(WriteArr[0]),4);
00022e  1d21              ADDS     r1,r4,#4
000230  2220              MOVS     r2,#0x20
000232  4311              ORRS     r1,r1,r2
000234  b2c8              UXTB     r0,r1
000236  2204              MOVS     r2,#4
000238  4669              MOV      r1,sp
00023a  f7fffffe          BL       SPI_Write_Buf
00023e  1c60              ADDS     r0,r4,#1              ;316
000240  b2c4              UXTB     r4,r0                 ;316
                  |L1.578|
000242  2c01              CMP      r4,#1                 ;316
000244  dde6              BLE      |L1.532|
;;;322    	}
;;;323    
;;;324    	for(i=2;i<=3;i++)
000246  2402              MOVS     r4,#2
000248  e019              B        |L1.638|
                  |L1.586|
;;;325    	{
;;;326    		for(j=0;j<4;j++)
00024a  2500              MOVS     r5,#0
00024c  e00a              B        |L1.612|
                  |L1.590|
;;;327    			WriteArr[j]=(Bank1_Reg0_13[i]>>(8*(3-j) ) )&0xff;
00024e  00a0              LSLS     r0,r4,#2
000250  4929              LDR      r1,|L1.760|
000252  5808              LDR      r0,[r1,r0]
000254  2103              MOVS     r1,#3
000256  1b49              SUBS     r1,r1,r5
000258  00c9              LSLS     r1,r1,#3
00025a  40c8              LSRS     r0,r0,r1
00025c  4669              MOV      r1,sp
00025e  5548              STRB     r0,[r1,r5]
000260  1c68              ADDS     r0,r5,#1              ;326
000262  b2c5              UXTB     r5,r0                 ;326
                  |L1.612|
000264  2d04              CMP      r5,#4                 ;326
000266  dbf2              BLT      |L1.590|
;;;328    
;;;329    		SPI_Write_Buf((WRITE_REG|(i+10)),&(WriteArr[0]),4);
000268  4621              MOV      r1,r4
00026a  310a              ADDS     r1,r1,#0xa
00026c  2220              MOVS     r2,#0x20
00026e  4311              ORRS     r1,r1,r2
000270  b2c8              UXTB     r0,r1
000272  2204              MOVS     r2,#4
000274  4669              MOV      r1,sp
000276  f7fffffe          BL       SPI_Write_Buf
00027a  1c60              ADDS     r0,r4,#1              ;324
00027c  b2c4              UXTB     r4,r0                 ;324
                  |L1.638|
00027e  2c03              CMP      r4,#3                 ;324
000280  dde3              BLE      |L1.586|
;;;330    	}
;;;331    
;;;332    	SPI_Write_Buf((WRITE_REG|14),&(Bank1_Reg14[0]),11);
000282  220b              MOVS     r2,#0xb
000284  491d              LDR      r1,|L1.764|
000286  202e              MOVS     r0,#0x2e
000288  f7fffffe          BL       SPI_Write_Buf
;;;333    
;;;334    //toggle REG4<25,26>
;;;335    	for(j=0;j<4;j++)
00028c  2500              MOVS     r5,#0
00028e  e007              B        |L1.672|
                  |L1.656|
;;;336    		WriteArr[j]=(Bank1_Reg0_13[0]>>(8*(j) ) )&0xff;
000290  4819              LDR      r0,|L1.760|
000292  6800              LDR      r0,[r0,#0]  ; Bank1_Reg0_13
000294  00e9              LSLS     r1,r5,#3
000296  40c8              LSRS     r0,r0,r1
000298  4669              MOV      r1,sp
00029a  5548              STRB     r0,[r1,r5]
00029c  1c68              ADDS     r0,r5,#1              ;335
00029e  b2c5              UXTB     r5,r0                 ;335
                  |L1.672|
0002a0  2d04              CMP      r5,#4                 ;335
0002a2  dbf5              BLT      |L1.656|
;;;337    
;;;338    	WriteArr[0]=WriteArr[0]|0x06;
0002a4  4668              MOV      r0,sp
0002a6  7801              LDRB     r1,[r0,#0]
0002a8  2006              MOVS     r0,#6
0002aa  4301              ORRS     r1,r1,r0
0002ac  4668              MOV      r0,sp
0002ae  7001              STRB     r1,[r0,#0]
;;;339    	SPI_Write_Buf((WRITE_REG|4),&(WriteArr[0]),4);
0002b0  2204              MOVS     r2,#4
0002b2  4669              MOV      r1,sp
0002b4  2024              MOVS     r0,#0x24
0002b6  f7fffffe          BL       SPI_Write_Buf
;;;340    
;;;341    	WriteArr[0]=WriteArr[0]&0xf9;
0002ba  4668              MOV      r0,sp
0002bc  7800              LDRB     r0,[r0,#0]
0002be  21f9              MOVS     r1,#0xf9
0002c0  4008              ANDS     r0,r0,r1
0002c2  4669              MOV      r1,sp
0002c4  7008              STRB     r0,[r1,#0]
;;;342    	SPI_Write_Buf((WRITE_REG|4),&(WriteArr[0]),4);
0002c6  2204              MOVS     r2,#4
0002c8  2024              MOVS     r0,#0x24
0002ca  f7fffffe          BL       SPI_Write_Buf
;;;343    
;;;344    
;;;345    	DelayMs(10);
0002ce  200a              MOVS     r0,#0xa
0002d0  f7fffffe          BL       DelayMs
;;;346    	
;;;347    //********************switch back to Bank0 register access******************
;;;348    	SwitchCFG(0);
0002d4  2000              MOVS     r0,#0
0002d6  f7fffffe          BL       SwitchCFG
;;;349    
;;;350    	SwitchToTxMode();//switch to RX mode
0002da  f7fffffe          BL       SwitchToTxMode
;;;351    
;;;352    }
0002de  bd38              POP      {r3-r5,pc}
;;;353    
                          ENDP

                  |L1.736|
                          DCD      0x400b6000
                  |L1.740|
                          DCD      op_status
                  |L1.744|
                          DCD      reg_temp
                  |L1.748|
                          DCD      Bank0_Reg
                  |L1.752|
                          DCD      RX0_Address
                  |L1.756|
                          DCD      RX1_Address
                  |L1.760|
                          DCD      Bank1_Reg0_13
                  |L1.764|
                          DCD      Bank1_Reg14

                          AREA ||.data||, DATA, ALIGN=2

                  op_status
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  RF_TABLE
                          DCD      0x00000962
                          DCD      0x00000965
                          DCD      0x0000096d
                          DCD      0x0000096f
                          DCD      0x00000971
                          DCD      0x00000974
                          DCD      0x00000977
                          DCD      0x0000097c
                          DCD      0x00000980
                          DCD      0x00000983
                          DCD      0x00000986
                          DCD      0x00000988
                          DCD      0x0000098a
                          DCD      0x0000098e
                          DCD      0x00000999
                          DCD      0x0000099b
                  Bank1_Reg0_13
                          DCD      0x1b8296f9
                          DCD      0xa60f0624
                          DCD      0x00127300
                          DCD      0x36b48000
                  Bank1_Reg14
000054  41200804          DCB      0x41,0x20,0x08,0x04
000058  8120cff7          DCB      0x81,0x20,0xcf,0xf7
00005c  feffff            DCB      0xfe,0xff,0xff
                  Bank0_Reg
00005f  00                DCB      0x00
000060  0f013f02          DCB      0x0f,0x01,0x3f,0x02
000064  3f030304          DCB      0x3f,0x03,0x03,0x04
000068  ff051706          DCB      0xff,0x05,0x17,0x06
00006c  0f070708          DCB      0x0f,0x07,0x07,0x08
000070  0009000c          DCB      0x00,0x09,0x00,0x0c
000074  c30dc40e          DCB      0xc3,0x0d,0xc4,0x0e
000078  c50fc611          DCB      0xc5,0x0f,0xc6,0x11
00007c  20122013          DCB      0x20,0x12,0x20,0x13
000080  20142015          DCB      0x20,0x14,0x20,0x15
000084  20162017          DCB      0x20,0x16,0x20,0x17
000088  001c3f1d          DCB      0x00,0x1c,0x3f,0x1d
00008c  07                DCB      0x07
                  RX0_Address
00008d  155923            DCB      0x15,0x59,0x23
000090  c629              DCB      0xc6,0x29
                  RX1_Address
000092  1056              DCB      0x10,0x56
000094  24cd78            DCB      0x24,0xcd,0x78
                  reg_temp
000097  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "User\\2.4G\\BK2425_Initialization_141015.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___30_BK2425_Initialization_141015_c_RF_TABLE____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___30_BK2425_Initialization_141015_c_RF_TABLE____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___30_BK2425_Initialization_141015_c_RF_TABLE____REVSH|
#line 128
|__asm___30_BK2425_Initialization_141015_c_RF_TABLE____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
