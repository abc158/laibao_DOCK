; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\pdma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\pdma.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\pdma.crf ..\driver\src\pdma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_Init PROC
;;;19       ***********************************************************************************************************/
;;;20     void DMA_Init(DMA_InitTypeDef *pDmaInitStruct, uint8_t DmaChnx)
000000  b510              PUSH     {r4,lr}
;;;21     {
;;;22     	AM_PDMACH_TypeDef *pAM_PDMACH = (AM_PDMACH_TypeDef *)AM_PDMA;
000002  4a70              LDR      r2,|L1.452|
;;;23     	
;;;24     	(pAM_PDMACH + DmaChnx)->CR = (pDmaInitStruct->HardTrigSrc << 16) \
000004  7803              LDRB     r3,[r0,#0]
000006  041b              LSLS     r3,r3,#16
000008  7844              LDRB     r4,[r0,#1]
00000a  02e4              LSLS     r4,r4,#11
00000c  4323              ORRS     r3,r3,r4
00000e  7884              LDRB     r4,[r0,#2]
000010  02a4              LSLS     r4,r4,#10
000012  4323              ORRS     r3,r3,r4
000014  78c4              LDRB     r4,[r0,#3]
000016  0224              LSLS     r4,r4,#8
000018  4323              ORRS     r3,r3,r4
00001a  7904              LDRB     r4,[r0,#4]
00001c  01e4              LSLS     r4,r4,#7
00001e  4323              ORRS     r3,r3,r4
000020  7944              LDRB     r4,[r0,#5]
000022  01a4              LSLS     r4,r4,#6
000024  4323              ORRS     r3,r3,r4
000026  7984              LDRB     r4,[r0,#6]
000028  0164              LSLS     r4,r4,#5
00002a  4323              ORRS     r3,r3,r4
00002c  79c4              LDRB     r4,[r0,#7]
00002e  0124              LSLS     r4,r4,#4
000030  4323              ORRS     r3,r3,r4
000032  7a04              LDRB     r4,[r0,#8]
000034  00a4              LSLS     r4,r4,#2
000036  4323              ORRS     r3,r3,r4
000038  2418              MOVS     r4,#0x18
00003a  434c              MULS     r4,r1,r4
00003c  5113              STR      r3,[r2,r4]
;;;25     	| (pDmaInitStruct->AutoReload << 11) \
;;;26     	| (pDmaInitStruct->AddrFix << 10) \
;;;27     	| (pDmaInitStruct->ChnPriority << 8) \
;;;28     	| (pDmaInitStruct->SrcAddrMode << 7) \
;;;29     	| (pDmaInitStruct->SrcAddrIncrement << 6) \
;;;30     	| (pDmaInitStruct->DestAddrMode << 5) \
;;;31     	| (pDmaInitStruct->DestAddrIncrement << 4) \
;;;32     	| (pDmaInitStruct->DataWidth << 2);
;;;33     	
;;;34     	(pAM_PDMACH + DmaChnx)->SADR = pDmaInitStruct->AddrSrc;
00003e  2318              MOVS     r3,#0x18
000040  434b              MULS     r3,r1,r3
000042  189b              ADDS     r3,r3,r2
000044  68c4              LDR      r4,[r0,#0xc]
000046  605c              STR      r4,[r3,#4]
;;;35     	(pAM_PDMACH + DmaChnx)->DADR = pDmaInitStruct->AddrDest;
000048  2318              MOVS     r3,#0x18
00004a  434b              MULS     r3,r1,r3
00004c  189b              ADDS     r3,r3,r2
00004e  6904              LDR      r4,[r0,#0x10]
000050  609c              STR      r4,[r3,#8]
;;;36     	(pAM_PDMACH + DmaChnx)->TSR = (pDmaInitStruct->BlockCnt << 16) | (pDmaInitStruct->BlockLength << 0);
000052  8a83              LDRH     r3,[r0,#0x14]
000054  041b              LSLS     r3,r3,#16
000056  8ac4              LDRH     r4,[r0,#0x16]
000058  4323              ORRS     r3,r3,r4
00005a  2418              MOVS     r4,#0x18
00005c  434c              MULS     r4,r1,r4
00005e  18a4              ADDS     r4,r4,r2
000060  6123              STR      r3,[r4,#0x10]
;;;37     	
;;;38     //	(pAM_PDMACH + DmaChnx)->CR = (pAM_PDMACH + DmaChnx)->CR | (1<<0);
;;;39     }
000062  bd10              POP      {r4,pc}
;;;40     
                          ENDP

                  DMA_EnaCmd PROC
;;;46       ***********************************************************************************************************/
;;;47     void DMA_EnaCmd(u32 PDMA_Ch, ControlStatus NewState)
000064  b510              PUSH     {r4,lr}
;;;48     {
000066  4602              MOV      r2,r0
;;;49     	AM_PDMACH_TypeDef *PDMACHx = (AM_PDMACH_TypeDef *)(AM_PDMA_BASE + PDMA_Ch*6*4);
000068  2306              MOVS     r3,#6
00006a  4353              MULS     r3,r2,r3
00006c  009b              LSLS     r3,r3,#2
00006e  4c55              LDR      r4,|L1.452|
000070  1918              ADDS     r0,r3,r4
;;;50     
;;;51       if (NewState != DISABLE)
000072  2900              CMP      r1,#0
000074  d004              BEQ      |L1.128|
;;;52       {
;;;53         SetBit_BB((u32)(&PDMACHx->CR), 0);
000076  6803              LDR      r3,[r0,#0]
000078  2401              MOVS     r4,#1
00007a  4323              ORRS     r3,r3,r4
00007c  6003              STR      r3,[r0,#0]
00007e  e003              B        |L1.136|
                  |L1.128|
;;;54       }
;;;55       else
;;;56       {
;;;57         ResetBit_BB((u32)(&PDMACHx->CR), 0);
000080  6803              LDR      r3,[r0,#0]
000082  085b              LSRS     r3,r3,#1
000084  005b              LSLS     r3,r3,#1
000086  6003              STR      r3,[r0,#0]
                  |L1.136|
;;;58       }
;;;59     }
000088  bd10              POP      {r4,pc}
;;;60     /*********************************************************************************************************//**
                          ENDP

                  DMA_IntEnable PROC
;;;65       ***********************************************************************************************************/
;;;66     void DMA_IntEnable(uint8_t IntType, uint8_t DmaChnx)
00008a  b530              PUSH     {r4,r5,lr}
;;;67     {
00008c  4602              MOV      r2,r0
;;;68     	AM_PDMA_TypeDef *pAM_PDMA = AM_PDMA;
00008e  484d              LDR      r0,|L1.452|
;;;69     	
;;;70     	if(DmaChnx<6)
000090  2906              CMP      r1,#6
000092  da0c              BGE      |L1.174|
;;;71     	{
;;;72     		pAM_PDMA->IER0 |= (ENABLE<<(IntType+5*DmaChnx));
000094  23ff              MOVS     r3,#0xff
000096  3331              ADDS     r3,r3,#0x31
000098  581b              LDR      r3,[r3,r0]
00009a  008c              LSLS     r4,r1,#2
00009c  190c              ADDS     r4,r1,r4
00009e  18a5              ADDS     r5,r4,r2
0000a0  2401              MOVS     r4,#1
0000a2  40ac              LSLS     r4,r4,r5
0000a4  4323              ORRS     r3,r3,r4
0000a6  24ff              MOVS     r4,#0xff
0000a8  3431              ADDS     r4,r4,#0x31
0000aa  5023              STR      r3,[r4,r0]
0000ac  e00c              B        |L1.200|
                  |L1.174|
;;;73     	}
;;;74     	else
;;;75     	{
;;;76     		pAM_PDMA->IER1 |= (ENABLE<<(IntType+5*(DmaChnx-6)));
0000ae  23ff              MOVS     r3,#0xff
0000b0  3335              ADDS     r3,r3,#0x35
0000b2  581b              LDR      r3,[r3,r0]
0000b4  1f8c              SUBS     r4,r1,#6
0000b6  00a5              LSLS     r5,r4,#2
0000b8  1964              ADDS     r4,r4,r5
0000ba  18a5              ADDS     r5,r4,r2
0000bc  2401              MOVS     r4,#1
0000be  40ac              LSLS     r4,r4,r5
0000c0  4323              ORRS     r3,r3,r4
0000c2  24ff              MOVS     r4,#0xff
0000c4  3435              ADDS     r4,r4,#0x35
0000c6  5023              STR      r3,[r4,r0]
                  |L1.200|
;;;77     	}
;;;78     }
0000c8  bd30              POP      {r4,r5,pc}
;;;79     
                          ENDP

                  DMA_GetStatus PROC
;;;85       ***********************************************************************************************************/
;;;86     FLAG_STATUS DMA_GetStatus(uint8_t IntType,uint8_t DmaChnx)
0000ca  b570              PUSH     {r4-r6,lr}
;;;87     {
0000cc  4603              MOV      r3,r0
;;;88     	AM_PDMA_TypeDef *pAM_PDMA = AM_PDMA;
0000ce  4d3d              LDR      r5,|L1.452|
;;;89     	uint32_t reg_val,mask_val;
;;;90     
;;;91     	if(DmaChnx<6)
0000d0  2906              CMP      r1,#6
0000d2  da09              BGE      |L1.232|
;;;92     	{
;;;93     		mask_val = 1<<(IntType+5*DmaChnx);
0000d4  0088              LSLS     r0,r1,#2
0000d6  1808              ADDS     r0,r1,r0
0000d8  18c6              ADDS     r6,r0,r3
0000da  2201              MOVS     r2,#1
0000dc  40b2              LSLS     r2,r2,r6
;;;94     		reg_val = pAM_PDMA->ISR0 & mask_val;
0000de  20ff              MOVS     r0,#0xff
0000e0  3021              ADDS     r0,r0,#0x21
0000e2  5944              LDR      r4,[r0,r5]
0000e4  4014              ANDS     r4,r4,r2
0000e6  e009              B        |L1.252|
                  |L1.232|
;;;95     	}
;;;96     	else
;;;97     	{
;;;98     		mask_val = 1<<(IntType+5*(DmaChnx-6));
0000e8  1f88              SUBS     r0,r1,#6
0000ea  0086              LSLS     r6,r0,#2
0000ec  1980              ADDS     r0,r0,r6
0000ee  18c6              ADDS     r6,r0,r3
0000f0  2201              MOVS     r2,#1
0000f2  40b2              LSLS     r2,r2,r6
;;;99     		reg_val = pAM_PDMA->ISR1 & mask_val;
0000f4  20ff              MOVS     r0,#0xff
0000f6  3025              ADDS     r0,r0,#0x25
0000f8  5944              LDR      r4,[r0,r5]
0000fa  4014              ANDS     r4,r4,r2
                  |L1.252|
;;;100    	}
;;;101    	
;;;102    	if( reg_val == 0)
0000fc  2c00              CMP      r4,#0
0000fe  d101              BNE      |L1.260|
;;;103    		return FLAG_NOTSET;
000100  2000              MOVS     r0,#0
                  |L1.258|
;;;104    	else
;;;105    	{
;;;106    		return FLAG_SET;
;;;107    	}
;;;108    }
000102  bd70              POP      {r4-r6,pc}
                  |L1.260|
000104  2001              MOVS     r0,#1                 ;106
000106  e7fc              B        |L1.258|
;;;109    
                          ENDP

                  DMA_ClearStatus PROC
;;;115      ***********************************************************************************************************/
;;;116    FLAG_STATUS DMA_ClearStatus(uint8_t IntType,uint8_t DmaChnx)
000108  b570              PUSH     {r4-r6,lr}
;;;117    {
00010a  4604              MOV      r4,r0
00010c  460a              MOV      r2,r1
;;;118    	AM_PDMA_TypeDef *pAM_PDMA = AM_PDMA;
00010e  4b2d              LDR      r3,|L1.452|
;;;119    	uint32_t reg_val,mask_val;
;;;120    
;;;121    	if(DmaChnx<6)
000110  2a06              CMP      r2,#6
000112  da0c              BGE      |L1.302|
;;;122    	{
;;;123    		mask_val = 1<<(IntType+5*DmaChnx);
000114  0090              LSLS     r0,r2,#2
000116  1810              ADDS     r0,r2,r0
000118  1906              ADDS     r6,r0,r4
00011a  2101              MOVS     r1,#1
00011c  40b1              LSLS     r1,r1,r6
;;;124    		pAM_PDMA->ISCR0 = mask_val;
00011e  20ff              MOVS     r0,#0xff
000120  3029              ADDS     r0,r0,#0x29
000122  50c1              STR      r1,[r0,r3]
;;;125    		reg_val = pAM_PDMA->ISR0 & mask_val;
000124  20ff              MOVS     r0,#0xff
000126  3021              ADDS     r0,r0,#0x21
000128  58c5              LDR      r5,[r0,r3]
00012a  400d              ANDS     r5,r5,r1
00012c  e00c              B        |L1.328|
                  |L1.302|
;;;126    	}
;;;127    	else
;;;128    	{
;;;129    		mask_val = 1<<(IntType+5*(DmaChnx-6));
00012e  1f90              SUBS     r0,r2,#6
000130  0086              LSLS     r6,r0,#2
000132  1980              ADDS     r0,r0,r6
000134  1906              ADDS     r6,r0,r4
000136  2101              MOVS     r1,#1
000138  40b1              LSLS     r1,r1,r6
;;;130    		pAM_PDMA->ISCR1 = mask_val;
00013a  20ff              MOVS     r0,#0xff
00013c  302d              ADDS     r0,r0,#0x2d
00013e  50c1              STR      r1,[r0,r3]
;;;131    		reg_val = pAM_PDMA->ISR1 & mask_val;
000140  20ff              MOVS     r0,#0xff
000142  3025              ADDS     r0,r0,#0x25
000144  58c5              LDR      r5,[r0,r3]
000146  400d              ANDS     r5,r5,r1
                  |L1.328|
;;;132    	}
;;;133    	
;;;134    	if(reg_val == 0)
000148  2d00              CMP      r5,#0
00014a  d101              BNE      |L1.336|
;;;135    		return FLAG_NOTSET;
00014c  2000              MOVS     r0,#0
                  |L1.334|
;;;136    	else
;;;137    		return FLAG_SET;
;;;138    }
00014e  bd70              POP      {r4-r6,pc}
                  |L1.336|
000150  2001              MOVS     r0,#1                 ;137
000152  e7fc              B        |L1.334|
;;;139    
                          ENDP

                  DMA_DeInit PROC
;;;144      ***********************************************************************************************************/
;;;145    void DMA_DeInit(uint8_t DmaChnx)
000154  b530              PUSH     {r4,r5,lr}
;;;146    {
;;;147    	AM_PDMACH_TypeDef *pAM_PDMACH = (AM_PDMACH_TypeDef *)AM_PDMA;
000156  491b              LDR      r1,|L1.452|
;;;148    	AM_PDMA_TypeDef *pAM_PDMA = AM_PDMA;
000158  460a              MOV      r2,r1
;;;149    	
;;;150    	(pAM_PDMACH + DmaChnx)->CR = 0;
00015a  2400              MOVS     r4,#0
00015c  2318              MOVS     r3,#0x18
00015e  4343              MULS     r3,r0,r3
000160  50cc              STR      r4,[r1,r3]
;;;151    	(pAM_PDMACH + DmaChnx)->SADR = 0;
000162  2318              MOVS     r3,#0x18
000164  4343              MULS     r3,r0,r3
000166  185b              ADDS     r3,r3,r1
000168  605c              STR      r4,[r3,#4]
;;;152    	(pAM_PDMACH + DmaChnx)->DADR = 0;
00016a  2318              MOVS     r3,#0x18
00016c  4343              MULS     r3,r0,r3
00016e  185b              ADDS     r3,r3,r1
000170  609c              STR      r4,[r3,#8]
;;;153    	(pAM_PDMACH + DmaChnx)->TSR = 0;
000172  2318              MOVS     r3,#0x18
000174  4343              MULS     r3,r0,r3
000176  185b              ADDS     r3,r3,r1
000178  611c              STR      r4,[r3,#0x10]
;;;154    	if(DmaChnx<6)
00017a  2806              CMP      r0,#6
00017c  da0b              BGE      |L1.406|
;;;155    	{
;;;156    		pAM_PDMA->IER0 &= (~(0x1f<<(0+5*DmaChnx)));
00017e  23ff              MOVS     r3,#0xff
000180  3331              ADDS     r3,r3,#0x31
000182  589b              LDR      r3,[r3,r2]
000184  0084              LSLS     r4,r0,#2
000186  1905              ADDS     r5,r0,r4
000188  241f              MOVS     r4,#0x1f
00018a  40ac              LSLS     r4,r4,r5
00018c  43a3              BICS     r3,r3,r4
00018e  24ff              MOVS     r4,#0xff
000190  3431              ADDS     r4,r4,#0x31
000192  50a3              STR      r3,[r4,r2]
000194  e00b              B        |L1.430|
                  |L1.406|
;;;157    	}
;;;158    	else
;;;159    	{
;;;160    		pAM_PDMA->IER1 &= (~(0x1f<<(0+5*(DmaChnx-6))));
000196  23ff              MOVS     r3,#0xff
000198  3335              ADDS     r3,r3,#0x35
00019a  589b              LDR      r3,[r3,r2]
00019c  1f84              SUBS     r4,r0,#6
00019e  00a5              LSLS     r5,r4,#2
0001a0  1964              ADDS     r4,r4,r5
0001a2  251f              MOVS     r5,#0x1f
0001a4  40a5              LSLS     r5,r5,r4
0001a6  43ab              BICS     r3,r3,r5
0001a8  24ff              MOVS     r4,#0xff
0001aa  3435              ADDS     r4,r4,#0x35
0001ac  50a3              STR      r3,[r4,r2]
                  |L1.430|
;;;161    	}	
;;;162    }
0001ae  bd30              POP      {r4,r5,pc}
;;;163    
                          ENDP

                  DMA_SoftwareTrigEnable PROC
;;;168      ***********************************************************************************************************/
;;;169    void DMA_SoftwareTrigEnable(uint8_t DmaChnx)
0001b0  4904              LDR      r1,|L1.452|
;;;170    {
;;;171    	AM_PDMACH_TypeDef *pAM_PDMACH = (AM_PDMACH_TypeDef *)AM_PDMA;
;;;172    	
;;;173    	(pAM_PDMACH + DmaChnx)->CR |= (1<<1);
0001b2  2218              MOVS     r2,#0x18
0001b4  4342              MULS     r2,r0,r2
0001b6  588a              LDR      r2,[r1,r2]
0001b8  2302              MOVS     r3,#2
0001ba  431a              ORRS     r2,r2,r3
0001bc  2318              MOVS     r3,#0x18
0001be  4343              MULS     r3,r0,r3
0001c0  50ca              STR      r2,[r1,r3]
;;;174    }
0001c2  4770              BX       lr
;;;175    
                          ENDP

                  |L1.452|
                          DCD      0x40090000

;*** Start embedded assembler ***

#line 1 "..\\driver\\src\\pdma.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_DMA_Init____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___6_pdma_c_DMA_Init____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_DMA_Init____REVSH|
#line 128
|__asm___6_pdma_c_DMA_Init____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
