; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\i2c.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\i2c.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\driver\inc -I.\src -I.\User -I.\User\led -I.\User\usart -I.\User\timer -I.\User\ir -I.\User\2.4G -I.\User\spi0 -IF:\1708\dock\prj\RTE -I"D:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include" -I"D:\Program Files (x86)\Keil_v5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DARMCM0 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\i2c.crf ..\driver\src\i2c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  I2C_DeInit PROC
;;;52       ***********************************************************************************************************/
;;;53     void I2C_DeInit(AM_I2C_TypeDef* I2Cx)
000000  b510              PUSH     {r4,lr}
;;;54     {
000002  4604              MOV      r4,r0
;;;55       if (I2Cx == AM_I2C0)
000004  48c2              LDR      r0,|L1.784|
000006  4284              CMP      r4,r0
000008  d103              BNE      |L1.18|
;;;56       {
;;;57         RSTCU_APBPerip0Reset(RSTCU_APBRST1_I2C0, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       RSTCU_APBPerip0Reset
                  |L1.18|
;;;58       }
;;;59     }
000012  bd10              POP      {r4,pc}
;;;60     
                          ENDP

                  I2C_Cmd PROC
;;;124      ***********************************************************************************************************/
;;;125    void I2C_Cmd(AM_I2C_TypeDef* I2Cx, ControlStatus NewState)
000014  2900              CMP      r1,#0
;;;126    {
;;;127      if (NewState != DISABLE)
000016  d004              BEQ      |L1.34|
;;;128      {
;;;129        I2Cx->CR |= CR_ENI2C_SET;
000018  6802              LDR      r2,[r0,#0]
00001a  2308              MOVS     r3,#8
00001c  431a              ORRS     r2,r2,r3
00001e  6002              STR      r2,[r0,#0]
000020  e003              B        |L1.42|
                  |L1.34|
;;;130      }
;;;131      else
;;;132      {
;;;133        I2Cx->CR &= CR_ENI2C_RESET;
000022  6802              LDR      r2,[r0,#0]
000024  2308              MOVS     r3,#8
000026  439a              BICS     r2,r2,r3
000028  6002              STR      r2,[r0,#0]
                  |L1.42|
;;;134      }
;;;135    }
00002a  4770              BX       lr
;;;136    
                          ENDP

                  I2C_Init PROC
;;;67       ***********************************************************************************************************/
;;;68     void I2C_Init(AM_I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
00002c  b570              PUSH     {r4-r6,lr}
;;;69     {
00002e  4604              MOV      r4,r0
000030  460d              MOV      r5,r1
;;;70       u32 PCLK_Freq;
;;;71     
;;;72       /* Enable I2Cx peripheral */
;;;73       I2C_Cmd(I2Cx, ENABLE);
000032  2101              MOVS     r1,#1
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       I2C_Cmd
;;;74     
;;;75       I2Cx->CR = (I2Cx->CR & 0xFFFFFF7A) | I2C_InitStruct->I2C_GeneralCall |
00003a  6820              LDR      r0,[r4,#0]
00003c  2185              MOVS     r1,#0x85
00003e  4388              BICS     r0,r0,r1
000040  6829              LDR      r1,[r5,#0]
000042  4308              ORRS     r0,r0,r1
000044  6869              LDR      r1,[r5,#4]
000046  4308              ORRS     r0,r0,r1
000048  68a9              LDR      r1,[r5,#8]
00004a  4308              ORRS     r0,r0,r1
00004c  6020              STR      r0,[r4,#0]
;;;76                  I2C_InitStruct->I2C_AddressingMode | I2C_InitStruct->I2C_Acknowledge;
;;;77     
;;;78       I2Cx->ADDR = I2C_InitStruct->I2C_OwnAddress;
00004e  89a8              LDRH     r0,[r5,#0xc]
000050  60a0              STR      r0,[r4,#8]
;;;79     
;;;80       SystemCoreClockUpdate();
000052  f7fffffe          BL       SystemCoreClockUpdate
;;;81       PCLK_Freq = SystemCoreClock;
000056  4eaf              LDR      r6,|L1.788|
;;;82     
;;;83       switch(I2Cx->CR & 0xC000)
000058  6820              LDR      r0,[r4,#0]
00005a  2103              MOVS     r1,#3
00005c  0389              LSLS     r1,r1,#14
00005e  4008              ANDS     r0,r0,r1
000060  2800              CMP      r0,#0
000062  d006              BEQ      |L1.114|
000064  2101              MOVS     r1,#1
000066  0389              LSLS     r1,r1,#14
000068  1a40              SUBS     r0,r0,r1
00006a  d018              BEQ      |L1.158|
00006c  1a40              SUBS     r0,r0,r1
00006e  d142              BNE      |L1.246|
000070  e02b              B        |L1.202|
                  |L1.114|
;;;84       {
;;;85         case 0:
;;;86         I2Cx->SHPGR = (PCLK_Freq*9)/(I2C_InitStruct->I2C_Speed*20) - 6;
000072  2314              MOVS     r3,#0x14
000074  692a              LDR      r2,[r5,#0x10]
000076  435a              MULS     r2,r3,r2
000078  4611              MOV      r1,r2
00007a  00f2              LSLS     r2,r6,#3
00007c  18b0              ADDS     r0,r6,r2
00007e  f7fffffe          BL       __aeabi_uidivmod
000082  1f80              SUBS     r0,r0,#6
000084  6120              STR      r0,[r4,#0x10]
;;;87         I2Cx->SLPGR = (PCLK_Freq*11)/(I2C_InitStruct->I2C_Speed*20) - 6;
000086  2314              MOVS     r3,#0x14
000088  692a              LDR      r2,[r5,#0x10]
00008a  435a              MULS     r2,r3,r2
00008c  4611              MOV      r1,r2
00008e  220b              MOVS     r2,#0xb
000090  4372              MULS     r2,r6,r2
000092  4610              MOV      r0,r2
000094  f7fffffe          BL       __aeabi_uidivmod
000098  1f80              SUBS     r0,r0,#6
00009a  6160              STR      r0,[r4,#0x14]
;;;88         break;
00009c  e02c              B        |L1.248|
                  |L1.158|
;;;89     
;;;90         case 0x4000:
;;;91         I2Cx->SHPGR = (PCLK_Freq*9)/(I2C_InitStruct->I2C_Speed*20) - 8;
00009e  2314              MOVS     r3,#0x14
0000a0  692a              LDR      r2,[r5,#0x10]
0000a2  435a              MULS     r2,r3,r2
0000a4  4611              MOV      r1,r2
0000a6  00f2              LSLS     r2,r6,#3
0000a8  18b0              ADDS     r0,r6,r2
0000aa  f7fffffe          BL       __aeabi_uidivmod
0000ae  3808              SUBS     r0,r0,#8
0000b0  6120              STR      r0,[r4,#0x10]
;;;92         I2Cx->SLPGR = (PCLK_Freq*11)/(I2C_InitStruct->I2C_Speed*20) - 8;
0000b2  2314              MOVS     r3,#0x14
0000b4  692a              LDR      r2,[r5,#0x10]
0000b6  435a              MULS     r2,r3,r2
0000b8  4611              MOV      r1,r2
0000ba  220b              MOVS     r2,#0xb
0000bc  4372              MULS     r2,r6,r2
0000be  4610              MOV      r0,r2
0000c0  f7fffffe          BL       __aeabi_uidivmod
0000c4  3808              SUBS     r0,r0,#8
0000c6  6160              STR      r0,[r4,#0x14]
;;;93         break;
0000c8  e016              B        |L1.248|
                  |L1.202|
;;;94     
;;;95         case 0x8000:
;;;96         I2Cx->SHPGR = (PCLK_Freq*9)/(I2C_InitStruct->I2C_Speed*20) - 9;
0000ca  2314              MOVS     r3,#0x14
0000cc  692a              LDR      r2,[r5,#0x10]
0000ce  435a              MULS     r2,r3,r2
0000d0  4611              MOV      r1,r2
0000d2  00f2              LSLS     r2,r6,#3
0000d4  18b0              ADDS     r0,r6,r2
0000d6  f7fffffe          BL       __aeabi_uidivmod
0000da  3809              SUBS     r0,r0,#9
0000dc  6120              STR      r0,[r4,#0x10]
;;;97         I2Cx->SLPGR = (PCLK_Freq*11)/(I2C_InitStruct->I2C_Speed*20) - 9;
0000de  2314              MOVS     r3,#0x14
0000e0  692a              LDR      r2,[r5,#0x10]
0000e2  435a              MULS     r2,r3,r2
0000e4  4611              MOV      r1,r2
0000e6  220b              MOVS     r2,#0xb
0000e8  4372              MULS     r2,r6,r2
0000ea  4610              MOV      r0,r2
0000ec  f7fffffe          BL       __aeabi_uidivmod
0000f0  3809              SUBS     r0,r0,#9
0000f2  6160              STR      r0,[r4,#0x14]
;;;98         break;
0000f4  e000              B        |L1.248|
                  |L1.246|
;;;99     
;;;100        default:
;;;101        break;
0000f6  bf00              NOP      
                  |L1.248|
0000f8  bf00              NOP                            ;88
;;;102      }
;;;103    }
0000fa  bd70              POP      {r4-r6,pc}
;;;104    
                          ENDP

                  I2C_StructInit PROC
;;;109      ***********************************************************************************************************/
;;;110    void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
0000fc  2100              MOVS     r1,#0
;;;111    {
;;;112      I2C_InitStruct->I2C_GeneralCall = I2C_GENERALCALL_DISABLE;
0000fe  6001              STR      r1,[r0,#0]
;;;113      I2C_InitStruct->I2C_AddressingMode = I2C_ADDRESSING_7BIT;
000100  6041              STR      r1,[r0,#4]
;;;114      I2C_InitStruct->I2C_Acknowledge = I2C_ACK_DISABLE;
000102  6081              STR      r1,[r0,#8]
;;;115      I2C_InitStruct->I2C_OwnAddress = 0;
000104  8181              STRH     r1,[r0,#0xc]
;;;116      I2C_InitStruct->I2C_Speed = 1000000;
000106  4984              LDR      r1,|L1.792|
000108  6101              STR      r1,[r0,#0x10]
;;;117    }
00010a  4770              BX       lr
;;;118    
                          ENDP

                  I2C_GenerateSTOP PROC
;;;141      ***********************************************************************************************************/
;;;142    void I2C_GenerateSTOP(AM_I2C_TypeDef* I2Cx)
00010c  6801              LDR      r1,[r0,#0]
;;;143    {
;;;144      I2Cx->CR |= 0x2;
00010e  2202              MOVS     r2,#2
000110  4311              ORRS     r1,r1,r2
000112  6001              STR      r1,[r0,#0]
;;;145      while (I2Cx->CR & 0x2);
000114  bf00              NOP      
                  |L1.278|
000116  6801              LDR      r1,[r0,#0]
000118  2202              MOVS     r2,#2
00011a  4011              ANDS     r1,r1,r2
00011c  2900              CMP      r1,#0
00011e  d1fa              BNE      |L1.278|
;;;146    }
000120  4770              BX       lr
;;;147    
                          ENDP

                  I2C_IntConfig PROC
;;;167      ***********************************************************************************************************/
;;;168    void I2C_IntConfig(AM_I2C_TypeDef* I2Cx, u32 I2C_Int, ControlStatus NewState)
000122  2a00              CMP      r2,#0
;;;169    {
;;;170      if (NewState != DISABLE)
000124  d003              BEQ      |L1.302|
;;;171      {
;;;172        I2Cx->IER |= I2C_Int;
000126  6843              LDR      r3,[r0,#4]
000128  430b              ORRS     r3,r3,r1
00012a  6043              STR      r3,[r0,#4]
00012c  e002              B        |L1.308|
                  |L1.302|
;;;173      }
;;;174       else
;;;175      {
;;;176        I2Cx->IER &= (u32)~I2C_Int;
00012e  6843              LDR      r3,[r0,#4]
000130  438b              BICS     r3,r3,r1
000132  6043              STR      r3,[r0,#4]
                  |L1.308|
;;;177      }
;;;178    }
000134  4770              BX       lr
;;;179    
                          ENDP

                  I2C_GeneralCallCmd PROC
;;;185      ***********************************************************************************************************/
;;;186    void I2C_GeneralCallCmd(AM_I2C_TypeDef* I2Cx, ControlStatus NewState)
000136  2900              CMP      r1,#0
;;;187    {
;;;188      if (NewState != DISABLE)
000138  d004              BEQ      |L1.324|
;;;189      {
;;;190        I2Cx->CR |= CR_ENGC_SET;
00013a  6802              LDR      r2,[r0,#0]
00013c  2304              MOVS     r3,#4
00013e  431a              ORRS     r2,r2,r3
000140  6002              STR      r2,[r0,#0]
000142  e003              B        |L1.332|
                  |L1.324|
;;;191      }
;;;192      else
;;;193      {
;;;194        I2Cx->CR &= CR_ENGC_RESET;
000144  6802              LDR      r2,[r0,#0]
000146  2304              MOVS     r3,#4
000148  439a              BICS     r2,r2,r3
00014a  6002              STR      r2,[r0,#0]
                  |L1.332|
;;;195      }
;;;196    }
00014c  4770              BX       lr
;;;197    
                          ENDP

                  I2C_AckCmd PROC
;;;203      ***********************************************************************************************************/
;;;204    void I2C_AckCmd(AM_I2C_TypeDef* I2Cx, ControlStatus NewState)
00014e  2900              CMP      r1,#0
;;;205    {
;;;206      if (NewState != DISABLE)
000150  d004              BEQ      |L1.348|
;;;207      {
;;;208        I2Cx->CR |= CR_ACK_SET;
000152  6802              LDR      r2,[r0,#0]
000154  2301              MOVS     r3,#1
000156  431a              ORRS     r2,r2,r3
000158  6002              STR      r2,[r0,#0]
00015a  e003              B        |L1.356|
                  |L1.348|
;;;209      }
;;;210      else
;;;211      {
;;;212        I2Cx->CR &= CR_ACK_RESET;
00015c  6802              LDR      r2,[r0,#0]
00015e  0852              LSRS     r2,r2,#1
000160  0052              LSLS     r2,r2,#1
000162  6002              STR      r2,[r0,#0]
                  |L1.356|
;;;213      }
;;;214    }
000164  4770              BX       lr
;;;215    
                          ENDP

                  I2C_SetOwnAddress PROC
;;;221      ***********************************************************************************************************/
;;;222    void I2C_SetOwnAddress(AM_I2C_TypeDef* I2Cx, u16 I2C_Address)
000166  6081              STR      r1,[r0,#8]
;;;223    {
;;;224      I2Cx->ADDR = I2C_Address;
;;;225    }
000168  4770              BX       lr
;;;226    
                          ENDP

                  I2C_TargetAddressConfig PROC
;;;233      ***********************************************************************************************************/
;;;234    void I2C_TargetAddressConfig(AM_I2C_TypeDef* I2Cx, u16 I2C_Address, u32 I2C_Direction)
00016a  2a00              CMP      r2,#0
;;;235    {
;;;236      if (I2C_Direction != I2C_MASTER_WRITE)
00016c  d004              BEQ      |L1.376|
;;;237      {
;;;238        I2Cx->TAR = I2C_Address | I2C_MASTER_READ;
00016e  2301              MOVS     r3,#1
000170  029b              LSLS     r3,r3,#10
000172  430b              ORRS     r3,r3,r1
000174  61c3              STR      r3,[r0,#0x1c]
000176  e000              B        |L1.378|
                  |L1.376|
;;;239      }
;;;240       else
;;;241      {
;;;242        I2Cx->TAR = I2C_Address | I2C_MASTER_WRITE;
000178  61c1              STR      r1,[r0,#0x1c]
                  |L1.378|
;;;243      }
;;;244    }
00017a  4770              BX       lr
;;;245    
                          ENDP

                  I2C_SendData PROC
;;;251      ***********************************************************************************************************/
;;;252    void I2C_SendData(AM_I2C_TypeDef* I2Cx, u8 I2C_Data)
00017c  6181              STR      r1,[r0,#0x18]
;;;253    {
;;;254      I2Cx->DR = I2C_Data;
;;;255    }
00017e  4770              BX       lr
;;;256    
                          ENDP

                  I2C_ReceiveData PROC
;;;261      ***********************************************************************************************************/
;;;262    u8 I2C_ReceiveData(AM_I2C_TypeDef* I2Cx)
000180  4601              MOV      r1,r0
;;;263    {
;;;264      return (u8)I2Cx->DR;
000182  6988              LDR      r0,[r1,#0x18]
000184  b2c0              UXTB     r0,r0
;;;265    }
000186  4770              BX       lr
;;;266    
                          ENDP

                  I2C_ReadRegister PROC
;;;281      ***********************************************************************************************************/
;;;282    u32 I2C_ReadRegister(AM_I2C_TypeDef* I2Cx, u8 I2C_Register)
000188  b508              PUSH     {r3,lr}
;;;283    {
00018a  4602              MOV      r2,r0
;;;284      vu32 tmp = 0;
00018c  2000              MOVS     r0,#0
00018e  9000              STR      r0,[sp,#0]
;;;285    	
;;;286      tmp = (u32)I2Cx;
000190  9200              STR      r2,[sp,#0]
;;;287      tmp += I2C_Register;
000192  9800              LDR      r0,[sp,#0]
000194  1840              ADDS     r0,r0,r1
000196  9000              STR      r0,[sp,#0]
;;;288      return (*(u32 *)tmp);
000198  9800              LDR      r0,[sp,#0]
00019a  6800              LDR      r0,[r0,#0]
;;;289    }
00019c  bd08              POP      {r3,pc}
;;;290    
                          ENDP

                  I2C_GetFlagStatus PROC
;;;310      ***********************************************************************************************************/
;;;311    FlagStatus I2C_GetFlagStatus(AM_I2C_TypeDef* I2Cx, u32 I2C_Flag)
00019e  4602              MOV      r2,r0
;;;312    {
;;;313      if ((I2Cx->SR & I2C_Flag) != (u32)RESET)
0001a0  68d0              LDR      r0,[r2,#0xc]
0001a2  4008              ANDS     r0,r0,r1
0001a4  2800              CMP      r0,#0
0001a6  d001              BEQ      |L1.428|
;;;314      {
;;;315        return (SET);
0001a8  2001              MOVS     r0,#1
                  |L1.426|
;;;316      }
;;;317      else
;;;318      {
;;;319        return (RESET);
;;;320      }
;;;321    }
0001aa  4770              BX       lr
                  |L1.428|
0001ac  2000              MOVS     r0,#0                 ;319
0001ae  e7fc              B        |L1.426|
;;;322    
                          ENDP

                  I2C_CheckStatus PROC
;;;346      ***********************************************************************************************************/
;;;347    ErrStatus I2C_CheckStatus(AM_I2C_TypeDef* I2Cx, u32 I2C_Status)
0001b0  4602              MOV      r2,r0
;;;348    {
;;;349      if (I2Cx->SR == I2C_Status)
0001b2  68d0              LDR      r0,[r2,#0xc]
0001b4  4288              CMP      r0,r1
0001b6  d101              BNE      |L1.444|
;;;350      {
;;;351        return (SUCCESS);
0001b8  2001              MOVS     r0,#1
                  |L1.442|
;;;352      }
;;;353      else
;;;354      {
;;;355        return (ERROR);
;;;356      }
;;;357    }
0001ba  4770              BX       lr
                  |L1.444|
0001bc  2000              MOVS     r0,#0                 ;355
0001be  e7fc              B        |L1.442|
;;;358    
                          ENDP

                  I2C_ClearFlag PROC
;;;368      ***********************************************************************************************************/
;;;369    void I2C_ClearFlag(AM_I2C_TypeDef* I2Cx, u32 I2C_Flag)
0001c0  60c1              STR      r1,[r0,#0xc]
;;;370    {
;;;371      I2Cx->SR = I2C_Flag;
;;;372    }
0001c2  4770              BX       lr
;;;373    
                          ENDP

                  I2C_SetSCLHighPeriod PROC
;;;380      ***********************************************************************************************************/
;;;381    void I2C_SetSCLHighPeriod(AM_I2C_TypeDef* I2Cx, u32 I2C_HighPeriod)
0001c4  6101              STR      r1,[r0,#0x10]
;;;382    {
;;;383      I2Cx->SHPGR = I2C_HighPeriod;
;;;384    }
0001c6  4770              BX       lr
;;;385    
                          ENDP

                  I2C_SetSCLLowPeriod PROC
;;;392      ***********************************************************************************************************/
;;;393    void I2C_SetSCLLowPeriod(AM_I2C_TypeDef* I2Cx, u32 I2C_LowPeriod)
0001c8  6141              STR      r1,[r0,#0x14]
;;;394    {
;;;395      I2Cx->SLPGR = I2C_LowPeriod;
;;;396    }
0001ca  4770              BX       lr
;;;397    
                          ENDP

                  I2C_PDMACmd PROC
;;;407      ***********************************************************************************************************/
;;;408    void I2C_PDMACmd(AM_I2C_TypeDef* I2Cx, u32 I2C_PDMAREQ, ControlStatus NewState)
0001cc  2a00              CMP      r2,#0
;;;409    {
;;;410      if (NewState != DISABLE)
0001ce  d003              BEQ      |L1.472|
;;;411      {
;;;412        I2Cx->CR |= I2C_PDMAREQ;
0001d0  6803              LDR      r3,[r0,#0]
0001d2  430b              ORRS     r3,r3,r1
0001d4  6003              STR      r3,[r0,#0]
0001d6  e002              B        |L1.478|
                  |L1.472|
;;;413      }
;;;414      else
;;;415      {
;;;416        I2Cx->CR &= ~I2C_PDMAREQ;
0001d8  6803              LDR      r3,[r0,#0]
0001da  438b              BICS     r3,r3,r1
0001dc  6003              STR      r3,[r0,#0]
                  |L1.478|
;;;417      }
;;;418    }
0001de  4770              BX       lr
;;;419    
                          ENDP

                  I2C_PDMANACKCmd PROC
;;;425      ***********************************************************************************************************/
;;;426    void I2C_PDMANACKCmd(AM_I2C_TypeDef* I2Cx, ControlStatus NewState)
0001e0  2900              CMP      r1,#0
;;;427    {
;;;428      if (NewState != DISABLE)
0001e2  d005              BEQ      |L1.496|
;;;429      {
;;;430        I2Cx->CR |= CR_PDMANACK_SET;
0001e4  6802              LDR      r2,[r0,#0]
0001e6  2301              MOVS     r3,#1
0001e8  029b              LSLS     r3,r3,#10
0001ea  431a              ORRS     r2,r2,r3
0001ec  6002              STR      r2,[r0,#0]
0001ee  e004              B        |L1.506|
                  |L1.496|
;;;431      }
;;;432      else
;;;433      {
;;;434        I2Cx->CR &= CR_PDMANACK_RESET;
0001f0  6802              LDR      r2,[r0,#0]
0001f2  2301              MOVS     r3,#1
0001f4  029b              LSLS     r3,r3,#10
0001f6  439a              BICS     r2,r2,r3
0001f8  6002              STR      r2,[r0,#0]
                  |L1.506|
;;;435      }
;;;436    }
0001fa  4770              BX       lr
;;;437    
                          ENDP

                  I2C_TimeOutCmd PROC
;;;443      ***********************************************************************************************************/
;;;444    void I2C_TimeOutCmd(AM_I2C_TypeDef* I2Cx, ControlStatus NewState)
0001fc  2900              CMP      r1,#0
;;;445    {
;;;446      if (NewState != DISABLE)
0001fe  d005              BEQ      |L1.524|
;;;447      {
;;;448        I2Cx->CR |= CR_ENTOUT_SET;
000200  6802              LDR      r2,[r0,#0]
000202  2301              MOVS     r3,#1
000204  031b              LSLS     r3,r3,#12
000206  431a              ORRS     r2,r2,r3
000208  6002              STR      r2,[r0,#0]
00020a  e004              B        |L1.534|
                  |L1.524|
;;;449      }
;;;450      else
;;;451      {
;;;452        I2Cx->CR &= CR_ENTOUT_RESET;
00020c  6802              LDR      r2,[r0,#0]
00020e  2301              MOVS     r3,#1
000210  031b              LSLS     r3,r3,#12
000212  439a              BICS     r2,r2,r3
000214  6002              STR      r2,[r0,#0]
                  |L1.534|
;;;453      }
;;;454    }
000216  4770              BX       lr
;;;455    
                          ENDP

                  I2C_SetTimeOutValue PROC
;;;461      ***********************************************************************************************************/
;;;462    void I2C_SetTimeOutValue(AM_I2C_TypeDef* I2Cx, u32 I2C_Timeout)
000218  6a82              LDR      r2,[r0,#0x28]
;;;463    {
;;;464      I2Cx->TOUT = (I2C_Timeout | (I2Cx->TOUT & 0xFFFF0000));
00021a  0c12              LSRS     r2,r2,#16
00021c  0412              LSLS     r2,r2,#16
00021e  430a              ORRS     r2,r2,r1
000220  6282              STR      r2,[r0,#0x28]
;;;465    }
000222  4770              BX       lr
;;;466    
                          ENDP

                  I2C_SetTimeOutPrescaler PROC
;;;480      ***********************************************************************************************************/
;;;481    void I2C_SetTimeOutPrescaler(AM_I2C_TypeDef* I2Cx, u32 I2C_Prescaler)
000224  6a82              LDR      r2,[r0,#0x28]
;;;482    {
;;;483      I2Cx->TOUT = (I2C_Prescaler | (I2Cx->TOUT & 0x0000FFFF));
000226  b292              UXTH     r2,r2
000228  430a              ORRS     r2,r2,r1
00022a  6282              STR      r2,[r0,#0x28]
;;;484    }
00022c  4770              BX       lr
;;;485    
                          ENDP

                  I2C_AddressMaskConfig PROC
;;;502      ***********************************************************************************************************/
;;;503    void I2C_AddressMaskConfig(AM_I2C_TypeDef* I2Cx, u32 I2C_Mask)
00022e  6201              STR      r1,[r0,#0x20]
;;;504    {
;;;505      I2Cx->ADDMR = I2C_Mask;
;;;506    }
000230  4770              BX       lr
;;;507    
                          ENDP

                  I2C_GetAddressBuffer PROC
;;;512      ***********************************************************************************************************/
;;;513    u16 I2C_GetAddressBuffer(AM_I2C_TypeDef* I2Cx)
000232  4601              MOV      r1,r0
;;;514    {
;;;515      return ((u16)I2Cx->ADDBR);
000234  6a48              LDR      r0,[r1,#0x24]
000236  b280              UXTH     r0,r0
;;;516    }
000238  4770              BX       lr
;;;517    
                          ENDP

                  I2C_CombFilterCmd PROC
;;;523      ***********************************************************************************************************/
;;;524    void I2C_CombFilterCmd(AM_I2C_TypeDef* I2Cx, ControlStatus NewState)
00023a  2900              CMP      r1,#0
;;;525    {
;;;526      if (NewState != DISABLE)
00023c  d005              BEQ      |L1.586|
;;;527      {
;;;528        I2Cx->CR |= CR_COMBFILTER_SET;
00023e  6802              LDR      r2,[r0,#0]
000240  2301              MOVS     r3,#1
000242  035b              LSLS     r3,r3,#13
000244  431a              ORRS     r2,r2,r3
000246  6002              STR      r2,[r0,#0]
000248  e004              B        |L1.596|
                  |L1.586|
;;;529      }
;;;530      else
;;;531      {
;;;532        I2Cx->CR &= CR_COMBFILTER_RESET;
00024a  6802              LDR      r2,[r0,#0]
00024c  2301              MOVS     r3,#1
00024e  035b              LSLS     r3,r3,#13
000250  439a              BICS     r2,r2,r3
000252  6002              STR      r2,[r0,#0]
                  |L1.596|
;;;533      }
;;;534    }
000254  4770              BX       lr
;;;535    
                          ENDP

                  I2C_SequentialFilterConfig PROC
;;;545      ***********************************************************************************************************/
;;;546    void I2C_SequentialFilterConfig(AM_I2C_TypeDef* I2Cx, u32 Seq_Filter_Select)
000256  6802              LDR      r2,[r0,#0]
;;;547    {
;;;548    	switch(I2Cx->CR & 0xC000)
000258  2303              MOVS     r3,#3
00025a  039b              LSLS     r3,r3,#14
00025c  401a              ANDS     r2,r2,r3
00025e  2a00              CMP      r2,#0
000260  d006              BEQ      |L1.624|
000262  2301              MOVS     r3,#1
000264  039b              LSLS     r3,r3,#14
000266  1ad2              SUBS     r2,r2,r3
000268  d01e              BEQ      |L1.680|
00026a  1ad2              SUBS     r2,r2,r3
00026c  d147              BNE      |L1.766|
00026e  e032              B        |L1.726|
                  |L1.624|
;;;549      {
;;;550        case 0:
;;;551        if (Seq_Filter_Select == SEQ_FILTER_1_PCLK)
000270  2201              MOVS     r2,#1
000272  0392              LSLS     r2,r2,#14
000274  4291              CMP      r1,r2
000276  d109              BNE      |L1.652|
;;;552          {
;;;553            if (I2Cx->SHPGR >= 2)
000278  6902              LDR      r2,[r0,#0x10]
00027a  2a02              CMP      r2,#2
00027c  d313              BCC      |L1.678|
;;;554            {
;;;555              I2Cx->SHPGR -= 2;
00027e  6902              LDR      r2,[r0,#0x10]
000280  1e92              SUBS     r2,r2,#2
000282  6102              STR      r2,[r0,#0x10]
;;;556              I2Cx->SLPGR -= 2;
000284  6942              LDR      r2,[r0,#0x14]
000286  1e92              SUBS     r2,r2,#2
000288  6142              STR      r2,[r0,#0x14]
00028a  e00c              B        |L1.678|
                  |L1.652|
;;;557            }
;;;558          }
;;;559          else if (Seq_Filter_Select == SEQ_FILTER_2_PCLK)
00028c  2201              MOVS     r2,#1
00028e  03d2              LSLS     r2,r2,#15
000290  4291              CMP      r1,r2
000292  d108              BNE      |L1.678|
;;;560          {
;;;561            if (I2Cx->SHPGR >= 2)
000294  6902              LDR      r2,[r0,#0x10]
000296  2a02              CMP      r2,#2
000298  d305              BCC      |L1.678|
;;;562            {
;;;563              I2Cx->SHPGR -= 3;
00029a  6902              LDR      r2,[r0,#0x10]
00029c  1ed2              SUBS     r2,r2,#3
00029e  6102              STR      r2,[r0,#0x10]
;;;564              I2Cx->SLPGR -= 3;
0002a0  6942              LDR      r2,[r0,#0x14]
0002a2  1ed2              SUBS     r2,r2,#3
0002a4  6142              STR      r2,[r0,#0x14]
                  |L1.678|
;;;565            }
;;;566          }
;;;567        break;
0002a6  e02b              B        |L1.768|
                  |L1.680|
;;;568    
;;;569        case 0x4000:
;;;570        if (Seq_Filter_Select == SEQ_FILTER_DISABLE)
0002a8  2900              CMP      r1,#0
0002aa  d106              BNE      |L1.698|
;;;571          {
;;;572            I2Cx->SHPGR += 2;
0002ac  6902              LDR      r2,[r0,#0x10]
0002ae  1c92              ADDS     r2,r2,#2
0002b0  6102              STR      r2,[r0,#0x10]
;;;573            I2Cx->SLPGR += 2;
0002b2  6942              LDR      r2,[r0,#0x14]
0002b4  1c92              ADDS     r2,r2,#2
0002b6  6142              STR      r2,[r0,#0x14]
0002b8  e00c              B        |L1.724|
                  |L1.698|
;;;574          }
;;;575          else if (Seq_Filter_Select == SEQ_FILTER_2_PCLK)
0002ba  2201              MOVS     r2,#1
0002bc  03d2              LSLS     r2,r2,#15
0002be  4291              CMP      r1,r2
0002c0  d108              BNE      |L1.724|
;;;576          {
;;;577            if (I2Cx->SHPGR >= 1)
0002c2  6902              LDR      r2,[r0,#0x10]
0002c4  2a00              CMP      r2,#0
0002c6  d005              BEQ      |L1.724|
;;;578            {
;;;579              I2Cx->SHPGR -= 1;
0002c8  6902              LDR      r2,[r0,#0x10]
0002ca  1e52              SUBS     r2,r2,#1
0002cc  6102              STR      r2,[r0,#0x10]
;;;580              I2Cx->SLPGR -= 1;
0002ce  6942              LDR      r2,[r0,#0x14]
0002d0  1e52              SUBS     r2,r2,#1
0002d2  6142              STR      r2,[r0,#0x14]
                  |L1.724|
;;;581            }
;;;582          }
;;;583        break;
0002d4  e014              B        |L1.768|
                  |L1.726|
;;;584    
;;;585        case 0x8000:
;;;586        if (Seq_Filter_Select == SEQ_FILTER_DISABLE)
0002d6  2900              CMP      r1,#0
0002d8  d106              BNE      |L1.744|
;;;587          {
;;;588            I2Cx->SHPGR += 3;
0002da  6902              LDR      r2,[r0,#0x10]
0002dc  1cd2              ADDS     r2,r2,#3
0002de  6102              STR      r2,[r0,#0x10]
;;;589            I2Cx->SLPGR += 3;
0002e0  6942              LDR      r2,[r0,#0x14]
0002e2  1cd2              ADDS     r2,r2,#3
0002e4  6142              STR      r2,[r0,#0x14]
0002e6  e009              B        |L1.764|
                  |L1.744|
;;;590          }
;;;591          else if (Seq_Filter_Select == SEQ_FILTER_1_PCLK)
0002e8  2201              MOVS     r2,#1
0002ea  0392              LSLS     r2,r2,#14
0002ec  4291              CMP      r1,r2
0002ee  d105              BNE      |L1.764|
;;;592          {
;;;593            I2Cx->SHPGR += 1;
0002f0  6902              LDR      r2,[r0,#0x10]
0002f2  1c52              ADDS     r2,r2,#1
0002f4  6102              STR      r2,[r0,#0x10]
;;;594            I2Cx->SLPGR += 1;
0002f6  6942              LDR      r2,[r0,#0x14]
0002f8  1c52              ADDS     r2,r2,#1
0002fa  6142              STR      r2,[r0,#0x14]
                  |L1.764|
;;;595          }
;;;596        break;
0002fc  e000              B        |L1.768|
                  |L1.766|
;;;597    
;;;598        default:
;;;599        break;
0002fe  bf00              NOP      
                  |L1.768|
000300  bf00              NOP                            ;567
;;;600      }
;;;601    
;;;602      I2Cx->CR = (I2Cx->CR & 0x3FFF) | Seq_Filter_Select;
000302  6802              LDR      r2,[r0,#0]
000304  0492              LSLS     r2,r2,#18
000306  0c92              LSRS     r2,r2,#18
000308  430a              ORRS     r2,r2,r1
00030a  6002              STR      r2,[r0,#0]
;;;603    }
00030c  4770              BX       lr
;;;604    
                          ENDP

00030e  0000              DCW      0x0000
                  |L1.784|
                          DCD      0x40048000
                  |L1.788|
                          DCD      0x016e3600
                  |L1.792|
                          DCD      0x000f4240

;*** Start embedded assembler ***

#line 1 "..\\driver\\src\\i2c.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_7174d409____REV16|
#line 114 "..\\inc\\core_cmInstr.h"
|__asm___5_i2c_c_7174d409____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_7174d409____REVSH|
#line 128
|__asm___5_i2c_c_7174d409____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
